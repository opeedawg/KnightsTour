// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 14, 2023 11:18:11 AM
// File             : MemberExtensionsBase.cs
// ************************************************************************

using System.Collections.Generic;

namespace KnightsTour
{
    /// <summary>
    /// The MemberLiteExtensionsBase class where common and useful extensions are placed.
    /// Generated On: October 14, 2023 at 11:18:11 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// This class should NOT be modified - any extensions or overrides should be completed in the extended extensions class provided.
    /// </remarks>
    public static partial class Extensions
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions"/> class.
        /// Converts a <seealso cref="Member" /> to its <seealso cref="MemberLite" /> representation.
        /// </summary>
        /// <param name="member">The member to convert.</param>
        /// <returns>A lite representation of the Member entity.</returns>
        public static MemberLite ToLite(this Member member)
        {
            if (member != null)
            {
                return new MemberLite(member);
            }
            else
            {
                return null;
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions"/> class.
        /// Converts a collection of <seealso cref="Member" /> to their <seealso cref="MemberLite" /> representations.
        /// </summary>
        /// <param name="members">The member collection to convert.</param>
        /// <returns>A collection of lite representations of the Member entity collection.</returns>
        public static IEnumerable<MemberLite> ToLite(this IEnumerable<Member> members)
        {
            if (members != null)
            {
                List<MemberLite> liteMembers = new List<MemberLite>();
                foreach (Member member in members)
                {
                    liteMembers.Add(member.ToLite());
                }
                return liteMembers;
            }
            else
            {
                return null;
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions"/> class.
        /// Converts a <seealso cref="MemberLite" /> to its <seealso cref="Member" /> representation.
        /// </summary>
        /// <param name="memberLite">The member lite entity to convert.</param>
        /// <returns>A full representation of the MemberLite entity.</returns>
        public static Member ToFull(this MemberLite memberLite)
        {
            if (memberLite != null)
            {
                return new Member(memberLite);
            }
            else
            {
                return null;
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions"/> class.
        /// Converts a collection of <seealso cref="MemberLite" /> to their <seealso cref="Member" /> representations.
        /// </summary>
        /// <param name="memberLites">The lite member collection to convert.</param>
        /// <returns>A collection of full representations of the MemberLite entity collection.</returns>
        public static IEnumerable<Member> ToFull(this IEnumerable<MemberLite> memberLites)
        {
            if (memberLites != null)
            {
                List<Member> members = new List<Member>();
                foreach (MemberLite memberLite in memberLites)
                {
                    members.Add(memberLite.ToFull());
                }
                return members;
            }
            else
            {
                return null;
            }
        }
        #endregion Constructor(s)

    } // Class
} // Namespace
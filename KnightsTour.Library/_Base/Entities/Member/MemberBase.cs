// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 21, 2023 9:55:34 AM
// File             : MemberBase.cs
// ************************************************************************

using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

using KnightsTour.CoreLibrary;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace KnightsTour
{
    /// <summary>
    /// The MemberBase class which tightly binds the model to the object.  Inherits <seealso cref="MemberLiteBase" /> and implements <seealso cref="KnightsTour.CoreLibrary.IEntity{T}" />
    /// Generated On: October 21, 2023 at 9:55:34 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// This class should NOT be modified - any extensions or overrides should be completed in the extended class <seealso cref="Member" />.
    /// </remarks>
    public abstract class MemberBase : MemberLiteBase, KnightsTour.CoreLibrary.IEntity<int?>
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="MemberBase"/> class.
        /// Initializes a new instance of the <see cref="MemberBase"/> class initialized with default properties.
        /// </summary>
        public MemberBase() : base()
        {
            Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberBase"/> class.
        /// Initializes a new empty instance of the MemberBase class with the given primary key.
        /// </summary>
        /// <param name="id">The primary key value.</param>
        public MemberBase(int? id)
        {
            Initialize();
            SetPrimaryKey(id);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberBase"/> class.
        /// Initializes a new empty instance of the MemberBase class from the record in a data reader populating only the Member columns specified.
        /// </summary>
        /// <param name="record">A record returned from a database reader.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.MemberProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public MemberBase(IDataRecord record, List<Enumerations.MemberProperty> columnsToInclude = null)
        {
            Initialize();

            // If not specified, default to all columns.
            if (columnsToInclude == null)
            {
                columnsToInclude = new List<Enumerations.MemberProperty>() { Enumerations.MemberProperty.All };
            }

            // Primary key must always be passed.
            MemberId = record.ValueAs<int?>("MemberId");
            if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.CreateDate))
            {
                CreateDate = record.ValueAs<DateTime>("CreateDate");
            }
            if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.EmailAddress))
            {
                EmailAddress = record.ValueAs<string>("EmailAddress");
            }
            if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.ConfirmationDate))
            {
                ConfirmationDate = record.ValueAs<DateTime?>("ConfirmationDate");
            }
            if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.DisplayName))
            {
                DisplayName = record.ValueAs<string>("DisplayName");
            }
            if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.Password))
            {
                Password = Context.CryptographyHandler.Decrypt(record.ValueAs<string>("Password"));
            }
            if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.UserInitials))
            {
                UserInitials = record.ValueAs<string>("UserInitials");
            }
            if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.Code))
            {
                Code = record.ValueAs<string>("Code");
            }
            if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.IsAdministrator))
            {
                IsAdministrator = record.ValueAs<bool>("IsAdministrator");
            }

            // Link the primary key to the base Id field.
            SetPrimaryKey(MemberId.Value);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberBase"/> class.
        /// Initializes a new empty instance of the MemberBase class from a DataRow with the Member columns specified.
        /// </summary>
        /// <param name="record">A <see cref="DataRow"/>.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.MemberProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public MemberBase(DataRow record, List<Enumerations.MemberProperty> columnsToInclude = null)
        {
            if (record != null)
            {
                Initialize();

                // If not specified, default to all columns.
                if (columnsToInclude == null)
                {
                    columnsToInclude = new List<Enumerations.MemberProperty>() { Enumerations.MemberProperty.All };
                }

                // Primary key must always be passed.
                MemberId = record.ValueAs<int?>("MemberId");
                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.CreateDate))
                {
                    CreateDate = record.ValueAs<DateTime>("CreateDate");
                }
                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.EmailAddress))
                {
                    EmailAddress = record.ValueAs<string>("EmailAddress");
                }
                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.ConfirmationDate))
                {
                    ConfirmationDate = record.ValueAs<DateTime?>("ConfirmationDate");
                }
                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.DisplayName))
                {
                    DisplayName = record.ValueAs<string>("DisplayName");
                }
                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.Password))
                {
                    Password = Context.CryptographyHandler.Decrypt(record.ValueAs<string>("Password"));
                }
                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.UserInitials))
                {
                    UserInitials = record.ValueAs<string>("UserInitials");
                }
                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.Code))
                {
                    Code = record.ValueAs<string>("Code");
                }
                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.IsAdministrator))
                {
                    IsAdministrator = record.ValueAs<bool>("IsAdministrator");
                }

                // Link the primary key to the base Id field.
                SetPrimaryKey(MemberId.Value);
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberBase"/> class.
        /// Initializes a new empty instance of the MemberBase class from a DataRow with the Member columns specified.
        /// </summary>
        /// <param name="memberLite">A <see cref="MemberLite"/>.</param>
        public MemberBase(MemberLite memberLite)
        {
            if (memberLite != null)
            {
                Initialize();

                // Base properties.
                MemberId = memberLite.MemberId.HasValue && memberLite.MemberId.Value <= 0 ? null : memberLite.MemberId;
                CreateDate = memberLite.CreateDate;
                EmailAddress = memberLite.EmailAddress;
                ConfirmationDate = memberLite.ConfirmationDate;
                DisplayName = memberLite.DisplayName;
                Password = memberLite.Password;
                UserInitials = memberLite.UserInitials;
                Code = memberLite.Code;
                IsAdministrator = memberLite.IsAdministrator;

                // Link the primary key to the base Id field.
                SetPrimaryKey(MemberId);
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberBase"/> class.
        /// Initializes a new empty instance of the MemberBase class from a DataRow with the Member columns specified.
        /// </summary>
        /// <param name="record">A dynamic Expando Object.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.MemberProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public MemberBase(ExpandoObject record, List<Enumerations.MemberProperty> columnsToInclude = null)
        {
            if (record != null)
            {
                IDictionary<string, object> recordAsDictionary = (IDictionary<string, object>)record;

                Initialize();

                // If not specified, default to all columns.
                if (columnsToInclude == null)
                {
                    columnsToInclude = new List<Enumerations.MemberProperty>() { Enumerations.MemberProperty.All };
                }
                else if (!columnsToInclude.Contains(Enumerations.MemberProperty.All))
                {
                    // Primary key must always be passed.
                    MemberId = recordAsDictionary.ValueAs<int?>("MemberId");
                }

                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.CreateDate))
                {
                    CreateDate = recordAsDictionary.ValueAs<DateTime>("CreateDate");
                }
                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.EmailAddress))
                {
                    EmailAddress = recordAsDictionary.ValueAs<string>("EmailAddress");
                }
                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.ConfirmationDate))
                {
                    ConfirmationDate = recordAsDictionary.ValueAs<DateTime?>("ConfirmationDate");
                }
                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.DisplayName))
                {
                    DisplayName = recordAsDictionary.ValueAs<string>("DisplayName");
                }
                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.Password))
                {
                    Password = Context.CryptographyHandler.Decrypt(recordAsDictionary.ValueAs<string>("Password"));
                }
                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.UserInitials))
                {
                    UserInitials = recordAsDictionary.ValueAs<string>("UserInitials");
                }
                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.Code))
                {
                    Code = recordAsDictionary.ValueAs<string>("Code");
                }
                if (columnsToInclude.Contains(Enumerations.MemberProperty.All) || columnsToInclude.Contains(Enumerations.MemberProperty.IsAdministrator))
                {
                    IsAdministrator = recordAsDictionary.ValueAs<bool>("IsAdministrator");
                }

                // Link the primary key to the base Id field.
                SetPrimaryKey(MemberId.Value);
            }
        }
        #endregion Constructor(s)

        #region Declarations
        KnightsTour.CoreLibrary.IStorageHandler storageHandler = null; // Storage handler reference used for lazy loading.
        IEnumerable<KnightsTour.Solution> _solutions = null; // Private collection of child solutions references (by MemberId) used for graph hydration.  Lazy loaded if not initialized explicitly.
        IEnumerable<KnightsTour.EventHistory> _eventHistories = null; // Private collection of child eventHistories references (by MemberId) used for graph hydration.  Lazy loaded if not initialized explicitly.
        #endregion Declarations

        #region Properties

        /// <summary>
        /// The override implementation of the base Id interface property.
        /// </summary>
        /// <value>
        /// The id.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public new int? Id
        {
            get
            {
                return MemberId;
            }
            set
            {
                MemberId = value;
            }
        }

        /// <summary>
        /// Gets or sets the collection of child solutions references (by MemberId) used for graph hydration.  Lazy loaded if not initialized explicitly.
        /// </summary>
        /// <value>
        /// The solutions.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public IEnumerable<KnightsTour.Solution> Solutions
        {
            get
            {
                if (_solutions == null)
                {
                    _solutions = new List<Solution>();
                    if (!IsNew)
                    {
                        _solutions = new SolutionLogic(StorageHandler, UserName).GetByFK<int?>(EntityMapper.GetPropertyName(Enumerations.SolutionProperty.MemberId).ToString(), MemberId);
                    }
                }
                return _solutions;
            }
            set
            {
                _solutions = value;
            }
        }

        /// <summary>
        /// Gets or sets the collection of child eventHistories references (by MemberId) used for graph hydration.  Lazy loaded if not initialized explicitly.
        /// </summary>
        /// <value>
        /// The event histories.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public IEnumerable<KnightsTour.EventHistory> EventHistories
        {
            get
            {
                if (_eventHistories == null)
                {
                    _eventHistories = new List<EventHistory>();
                    if (!IsNew)
                    {
                        _eventHistories = new EventHistoryLogic(StorageHandler, UserName).GetByFK<int?>(EntityMapper.GetPropertyName(Enumerations.EventHistoryProperty.MemberId).ToString(), MemberId);
                    }
                }
                return _eventHistories;
            }
            set
            {
                _eventHistories = value;
            }
        }

        /// <summary>
        /// The primary key column for this entity.
        /// </summary>
        /// <value>
        /// The primary key.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public Enumerations.MemberProperty PrimaryKey
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the field validations.
        /// </summary>
        /// <value>
        /// The field validations.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public List<FieldValidator> FieldValidations
        {
            get;
            set;
        }

        /// <summary>
        /// The insert header for bulk SQL operations.
        /// </summary>
        /// <value>
        /// The s q l insert bulk header.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string SQLInsertBulkHeader
        {
            get
            {
                if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.AutoIncrement)
                {
                    return $"INSERT INTO {StorageProvider.GetTableSQL(EntityMapper.EntityNameTransformation[EntityName], TableSchema)} ({StorageProvider.GetColumnSQL("CreateDate")}, {StorageProvider.GetColumnSQL("EmailAddress")}, {StorageProvider.GetColumnSQL("ConfirmationDate")}, {StorageProvider.GetColumnSQL("DisplayName")}, {StorageProvider.GetColumnSQL("Password")}, {StorageProvider.GetColumnSQL("UserInitials")}, {StorageProvider.GetColumnSQL("Code")}, {StorageProvider.GetColumnSQL("IsAdministrator")})";
                }
                else
                {
                    return $"INSERT INTO {StorageProvider.GetTableSQL(EntityMapper.EntityNameTransformation[EntityName], TableSchema)} ({StorageProvider.GetColumnSQL("CreateDate")}, {StorageProvider.GetColumnSQL("EmailAddress")}, {StorageProvider.GetColumnSQL("ConfirmationDate")}, {StorageProvider.GetColumnSQL("DisplayName")}, {StorageProvider.GetColumnSQL("Password")}, {StorageProvider.GetColumnSQL("UserInitials")}, {StorageProvider.GetColumnSQL("Code")}, {StorageProvider.GetColumnSQL("IsAdministrator")})";
                }
            }
        }

        /// <summary>
        /// The SQL safe insert row for bulk SQL operations.
        /// </summary>
        /// <value>
        /// The s q l insert bulk row.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string SQLInsertBulkRow
        {
            get
            {
                if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.AutoIncrement)
                {
                    return $"({CreateDate.SafeSQL()}, {EmailAddress.SafeSQL()}, {ConfirmationDate.SafeSQL()}, {DisplayName.SafeSQL()}, {Context.CryptographyHandler.Encrypt(Password.SafeSQL())}, {UserInitials.SafeSQL()}, {Code.SafeSQL()}, {IsAdministrator.SafeSQL()})";
                }
                else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Manual)
                {
                    return $"({MemberId.SafeSQL()}, {CreateDate.SafeSQL()}, {EmailAddress.SafeSQL()}, {ConfirmationDate.SafeSQL()}, {DisplayName.SafeSQL()}, {Context.CryptographyHandler.Encrypt(Password.SafeSQL())}, {UserInitials.SafeSQL()}, {Code.SafeSQL()}, {IsAdministrator.SafeSQL()})";
                }
                else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Sequence)
                {
                    return $"({StorageProvider.GetTableSQL(EntityMapper.SequenceMapper[EntityName], TableSchema)}.NEXTVAL, {CreateDate.SafeSQL()}, {EmailAddress.SafeSQL()}, {ConfirmationDate.SafeSQL()}, {DisplayName.SafeSQL()}, {Context.CryptographyHandler.Encrypt(Password.SafeSQL())}, {UserInitials.SafeSQL()}, {Code.SafeSQL()}, {IsAdministrator.SafeSQL()})";
                }
                else
                {
                    throw new Exception($"Unhandled PK Insert Configuration: {StorageHandler.PKInsertConfiguration.ToString()}");
                }
            }
        }

        /// <summary>
        /// The insert SQL statement for single records.
        /// </summary>
        /// <value>
        /// The s q l insert statement.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public KnightsTour.CoreLibrary.IStorageStatement SQLInsertStatement
        {
            get
            {
                KnightsTour.CoreLibrary.StorageStatement statement = new KnightsTour.CoreLibrary.StorageStatement();

                if (KnightsTour.Context.UseStoredProcedureIntegration)
                {
                    statement.CommandType = System.Data.CommandType.StoredProcedure;
                    statement.Statement = GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType.Insert);
                    statement.Parameters = new List<KnightsTour.CoreLibrary.IParameter>
                    {
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}EmailAddress", GetDBValue(KnightsTour.Enumerations.MemberProperty.EmailAddress)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}ConfirmationDate", GetDBValue(KnightsTour.Enumerations.MemberProperty.ConfirmationDate)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}DisplayName", GetDBValue(KnightsTour.Enumerations.MemberProperty.DisplayName)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Password", GetDBValue(KnightsTour.Enumerations.MemberProperty.Password)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}UserInitials", GetDBValue(KnightsTour.Enumerations.MemberProperty.UserInitials)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Code", GetDBValue(KnightsTour.Enumerations.MemberProperty.Code)),
                    };
                }
                else
                {
                    StringBuilder sql = new StringBuilder(SQLInsertBulkHeader);

                    sql.Append(" VALUES(");
                    foreach (Enumerations.MemberPropertyNotComputed property in Enum.GetValues(typeof(Enumerations.MemberPropertyNotComputed)))
                    {
                        if (property != Enumerations.MemberPropertyNotComputed.All)
                        {
                            if (ConvertProperty(property) != PrimaryKey)
                            {
                                sql.Append($"{StorageProvider.GetParameterPrefix()}{property.ToString()}, ");
                                statement.Parameters.Add(new KnightsTour.CoreLibrary.GenericParameter(StorageProvider.GetParameterPrefix() + property.ToString(), GetDBValue(property), GetDataType(property)));
                            }
                            else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Sequence)
                            {
                                sql.Append($"{EntityMapper.GetSequenceName(EntityName)}.NEXTVAL, ");
                            }
                            else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Manual)
                            {
                                sql.Append($"{StorageProvider.GetParameterPrefix()}{property.ToString()}, ");
                                statement.Parameters.Add(new KnightsTour.CoreLibrary.GenericParameter(StorageProvider.GetParameterPrefix() + property.ToString(), GetDBValue(property), GetDataType(property)));
                            }
                        }
                    }

                    // Remove the trailing comma and space.
                    sql = sql.Remove(sql.Length - 2, 2);
                    sql.Append(")");

                    statement.Statement = sql.ToString();
                }

                return statement;
            }
        }

        /// <summary>
        /// The update SQL statement for single records.
        /// </summary>
        /// <value>
        /// The s q l update statement.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public KnightsTour.CoreLibrary.IStorageStatement SQLUpdateStatement
        {
            get
            {
                KnightsTour.CoreLibrary.StorageStatement statement = new KnightsTour.CoreLibrary.StorageStatement();

                if (KnightsTour.Context.UseStoredProcedureIntegration)
                {
                    statement.CommandType = System.Data.CommandType.StoredProcedure;
                    statement.Statement = GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType.Update);
                    statement.Parameters = new List<KnightsTour.CoreLibrary.IParameter>
                    {
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}MemberId", GetDBValue(KnightsTour.Enumerations.MemberProperty.MemberId)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}CreateDate", GetDBValue(KnightsTour.Enumerations.MemberProperty.CreateDate)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}EmailAddress", GetDBValue(KnightsTour.Enumerations.MemberProperty.EmailAddress)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}ConfirmationDate", GetDBValue(KnightsTour.Enumerations.MemberProperty.ConfirmationDate)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}DisplayName", GetDBValue(KnightsTour.Enumerations.MemberProperty.DisplayName)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Password", GetDBValue(KnightsTour.Enumerations.MemberProperty.Password)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}UserInitials", GetDBValue(KnightsTour.Enumerations.MemberProperty.UserInitials)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Code", GetDBValue(KnightsTour.Enumerations.MemberProperty.Code)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}IsAdministrator", GetDBValue(KnightsTour.Enumerations.MemberProperty.IsAdministrator)),
                    };
                }
                else
                {
                    StringBuilder sql = new StringBuilder($"UPDATE {StorageProvider.GetTableSQL(EntityMapper.EntityNameTransformation[EntityName], TableSchema)} SET ");

                    foreach (Enumerations.MemberPropertyNotComputed property in Enum.GetValues(typeof(Enumerations.MemberPropertyNotComputed)))
                    {
                        if (property != Enumerations.MemberPropertyNotComputed.All)
                        {
                            if (IsModified(ConvertProperty(property)))
                            {
                                sql.Append($"{StorageProvider.GetColumnSQL(EntityMapper.GetPropertyName(ConvertProperty(property)))} = {StorageProvider.GetParameterPrefix()}{property.ToString()}, ");
                                statement.Parameters.Add(new KnightsTour.CoreLibrary.GenericParameter(StorageProvider.GetParameterPrefix() + property.ToString(), GetDBValue(property), GetDataType(property)));
                            }
                        }
                    }

                    sql = sql.Remove(sql.Length - 2, 2); //Remove the trailing comma and space
                    sql.Append($" WHERE {StorageProvider.GetColumnSQL(PrimaryKeyField)} = {MemberId.SafeSQL()}");

                    statement.Statement = sql.ToString();
                }

                return statement;
            }
        }

        /// <summary>
        /// Gets or sets the initial state for this entity.
        /// </summary>
        /// <value>
        /// The initial state.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public MemberLiteBase InitialState
        {
            get;
            set;
        }

        /// <summary>
        /// Gets a value indicating whether this Member instance is new or not.
        /// </summary>
        /// <value>
        /// The is new.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public bool IsNew
        {
            get
            {
                return !MemberId.HasValue;
            }
        }

        /// <summary>
        /// Gets the related name of the actual database table.
        /// </summary>
        /// <value>
        /// The table name.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string TableName
        {
            get
            {
                return EntityMapper.GetDbEntityName(EntityName);
            }
        }

        /// <summary>
        /// Gets the related name of the actual database schema.
        /// </summary>
        /// <value>
        /// The table schema.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string TableSchema
        {
            get
            {
                return "dbo";
            }
        }

        /// <summary>
        /// Gets the primary key default value.
        /// </summary>
        /// <value>
        /// The p k default value.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string PKDefaultValue
        {
            get
            {
                return "";
            }
        }

        /// <summary>
        /// Gets or sets the storage handler from the default configured source unless otherwise set.
        /// </summary>
        /// <value>
        /// The storage handler.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public KnightsTour.CoreLibrary.IStorageHandler StorageHandler
        {
            get
            {
                if (storageHandler == null)
                {
                    storageHandler = StorageProvider.GetHandler();
                }
                return storageHandler;
            }
            set
            {
                storageHandler = value;
            }
        }

        /// <summary>
        /// The configured label or label collection configured, or the PK number or (new) if a new record.
        /// </summary>
        /// <value>
        /// The instance label.
        /// </value>
        public string InstanceLabel
        {
            get
            {
                if (IsNew)
                {
                    return "(New)";
                }
                else
                {
                    return MemberId.Value.ToString();
                }
            }
        }

        /// <summary>
        /// Returns the CreateDate formatted with either the projects default date format or the custom property date format if defined.
        /// </summary>
        /// <value>
        /// The create date formatted.
        /// </value>
        public string CreateDateFormatted
        {
            get
            {
                return CreateDate.ToString("yyyy-MM-dd");
            }
        }

        /// <summary>
        /// Returns the ConfirmationDate formatted with either the projects default date format or the custom property date format if defined.
        /// </summary>
        /// <value>
        /// The confirmation date formatted.
        /// </value>
        public string ConfirmationDateFormatted
        {
            get
            {
                if (ConfirmationDate.HasValue)
                {
                    return ConfirmationDate.Value.ToString("yyyy-MM-dd");
                }
                else
                {
                    return string.Empty;
                }
            }
        }
        #endregion Properties

        #region Methods

        /// <summary>
        /// Validates the object using the defined field validators.
        /// </summary>
        public KnightsTour.CoreLibrary.IActionResponse Validate()
        {
            return KnightsTour.Context.ValidationHandler.ValidateEntity<int?>(Enumerations.EntityName.Member.ToString(), TableSchema, this, IsNew);
        }

        /// <summary>
        /// Sets the original properties (required for object state checking).
        /// </summary>
        public void SetOriginalProperties()
        {
            InitialState = new MemberLite(this);
        }

        /// <summary>
        /// Serializes the object based on the defined serialization strategy defined in the <seealso cref="AuditHandler" />.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public string SerializeObject()
        {
            string objectSerialization = string.Empty;
            switch (KnightsTour.Context.AuditHandler.SerializationStrategy)
            {
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.XML:
                    objectSerialization = KnightsTour.CoreLibrary.XMLAssistant.Serialize(ToDynamic());
                    break;
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.JSON:
                    objectSerialization = ToDynamic().ToString();
                    break;
                default:
                    throw new NotImplementedException($"{KnightsTour.Context.AuditHandler.SerializationStrategy.ToString()} serialization strategy not implemented.");
            }
            return objectSerialization;
        }

        /// <summary>
        /// Serializes the object differential based on the defined serialization strategy defined in the <seealso cref="AuditHandler" />.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public string SerializeDifferential()
        {
            string objectSerialization = string.Empty;
            switch (KnightsTour.Context.AuditHandler.SerializationStrategy)
            {
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.XML:
                    objectSerialization = KnightsTour.CoreLibrary.XMLAssistant.Serialize(ToDynamic(KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.ModifiedPropertiesOnly));
                    break;
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.JSON:
                    objectSerialization = ToDynamic(KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.ModifiedPropertiesOnly).ToString();
                    break;
                default:
                    throw new NotImplementedException($"{KnightsTour.Context.AuditHandler.SerializationStrategy.ToString()} serialization strategy not implemented.");
            }
            return objectSerialization;
        }

        /// <summary>
        /// Creates a dynamic object based on the passed <seealso cref="KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy" />.
        /// </summary>
        /// <param name="strategy">The strategy.</param>
        /// <returns>dynamic.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public dynamic ToDynamic(KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy strategy = KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.AllProperties)
        {
            dynamic dynamicMember = new JObject();
            switch (strategy)
            {
                case KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.AllProperties:
                    dynamicMember.MemberId = MemberId;
                    dynamicMember.CreateDate = CreateDate;
                    dynamicMember.EmailAddress = EmailAddress;
                    dynamicMember.ConfirmationDate = ConfirmationDate;
                    dynamicMember.DisplayName = DisplayName;
                    dynamicMember.Password = Password;
                    dynamicMember.UserInitials = UserInitials;
                    dynamicMember.Code = Code;
                    dynamicMember.IsAdministrator = IsAdministrator;
                    break;
                case KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.AllPropertiesWithOriginals:
                    dynamicMember.MemberId = MemberId;
                    dynamicMember.MemberId_Original = InitialState.MemberId;
                    dynamicMember.CreateDate = CreateDate;
                    dynamicMember.CreateDate_Original = InitialState.CreateDate;
                    dynamicMember.EmailAddress = EmailAddress;
                    dynamicMember.EmailAddress_Original = InitialState.EmailAddress;
                    dynamicMember.ConfirmationDate = ConfirmationDate;
                    dynamicMember.ConfirmationDate_Original = InitialState.ConfirmationDate;
                    dynamicMember.DisplayName = DisplayName;
                    dynamicMember.DisplayName_Original = InitialState.DisplayName;
                    dynamicMember.Password = Password;
                    dynamicMember.Password_Original = InitialState.Password;
                    dynamicMember.UserInitials = UserInitials;
                    dynamicMember.UserInitials_Original = InitialState.UserInitials;
                    dynamicMember.Code = Code;
                    dynamicMember.Code_Original = InitialState.Code;
                    dynamicMember.IsAdministrator = IsAdministrator;
                    dynamicMember.IsAdministrator_Original = InitialState.IsAdministrator;
                    break;
                case KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.ModifiedPropertiesOnly:
                    if (IsModified(Enumerations.MemberProperty.MemberId))
                    {
                        dynamicMember.MemberId = MemberId;
                        dynamicMember.MemberId_Original = InitialState.MemberId;
                    }
                    if (IsModified(Enumerations.MemberProperty.CreateDate))
                    {
                        dynamicMember.CreateDate = CreateDate;
                        dynamicMember.CreateDate_Original = InitialState.CreateDate;
                    }
                    if (IsModified(Enumerations.MemberProperty.EmailAddress))
                    {
                        dynamicMember.EmailAddress = EmailAddress;
                        dynamicMember.EmailAddress_Original = InitialState.EmailAddress;
                    }
                    if (IsModified(Enumerations.MemberProperty.ConfirmationDate))
                    {
                        dynamicMember.ConfirmationDate = ConfirmationDate;
                        dynamicMember.ConfirmationDate_Original = InitialState.ConfirmationDate;
                    }
                    if (IsModified(Enumerations.MemberProperty.DisplayName))
                    {
                        dynamicMember.DisplayName = DisplayName;
                        dynamicMember.DisplayName_Original = InitialState.DisplayName;
                    }
                    if (IsModified(Enumerations.MemberProperty.Password))
                    {
                        dynamicMember.Password = Password;
                        dynamicMember.Password_Original = InitialState.Password;
                    }
                    if (IsModified(Enumerations.MemberProperty.UserInitials))
                    {
                        dynamicMember.UserInitials = UserInitials;
                        dynamicMember.UserInitials_Original = InitialState.UserInitials;
                    }
                    if (IsModified(Enumerations.MemberProperty.Code))
                    {
                        dynamicMember.Code = Code;
                        dynamicMember.Code_Original = InitialState.Code;
                    }
                    if (IsModified(Enumerations.MemberProperty.IsAdministrator))
                    {
                        dynamicMember.IsAdministrator = IsAdministrator;
                        dynamicMember.IsAdministrator_Original = InitialState.IsAdministrator;
                    }
                    break;
                default:
                    throw new NotImplementedException($"{strategy.ToString()} strategy not implemented.");
            }
            return dynamicMember;
        }

        /// <summary>
        /// Determines whether this instance is modified.
        /// </summary>
        /// <returns><c>true</c> if this instance is modified; otherwise, <c>false</c>.</returns>
        public bool IsModified()
        {
            foreach (Enumerations.MemberProperty property in Enum.GetValues(typeof(Enumerations.MemberProperty)))
            {
                if (property != Enumerations.MemberProperty.All)
                {
                    if (IsModified(property))
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Determines whether the specified property is modified.
        /// </summary>
        /// <param name="property">The Member property to test.</param>
        /// <returns><c>true</c> if the specified property is modified; otherwise, <c>false</c>.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public bool IsModified(Enumerations.MemberProperty property)
        {
            switch (property)
            {
                case Enumerations.MemberProperty.MemberId:
                    return MemberId != InitialState.MemberId;
                case Enumerations.MemberProperty.CreateDate:
                    return CreateDate != InitialState.CreateDate;
                case Enumerations.MemberProperty.EmailAddress:
                    return EmailAddress != InitialState.EmailAddress;
                case Enumerations.MemberProperty.ConfirmationDate:
                    return ConfirmationDate != InitialState.ConfirmationDate;
                case Enumerations.MemberProperty.DisplayName:
                    return DisplayName != InitialState.DisplayName;
                case Enumerations.MemberProperty.Password:
                    return Password != InitialState.Password;
                case Enumerations.MemberProperty.UserInitials:
                    return UserInitials != InitialState.UserInitials;
                case Enumerations.MemberProperty.Code:
                    return Code != InitialState.Code;
                case Enumerations.MemberProperty.IsAdministrator:
                    return IsAdministrator != InitialState.IsAdministrator;
                case Enumerations.MemberProperty.All:
                    return IsModified();
                default:
                    throw new NotImplementedException($"{property.ToString()} property not implemented.");
            }
        }

        /// <summary>
        /// Initializes the properties of this class.
        /// </summary>
        public void Initialize()
        {
            MethodWrappers.CommonWrapper(baseInitialize, KnightsTour.CoreLibrary.Enumerations.ApplicationTier.Business, new object[] { });
        }

        /// <summary>
        /// The privately wrapped implementation of the Initialize method.
        /// </summary>
        /// <param name="arguments">The generic arguments sent to this method from the public wrapped call.</param>
        private void baseInitialize(object[] arguments)
        {
            InitialState = new MemberLite();

            // Base Entity properties.
            EntityName = Enumerations.EntityName.Member.ToString();
            PrimaryKey = Enumerations.MemberProperty.MemberId;
            PrimaryKeyField = EntityMapper.GetPropertyName(PrimaryKey);
            PrimaryKeyFieldFormatted = "MemberId";
            PKInsertConfiguration = KnightsTour.CoreLibrary.Enumerations.InsertPKRule.AutoIncrement;

            // Table properties.
            MemberId = null;
            CreateDate = DateTime.Now;
            EmailAddress = string.Empty;
            ConfirmationDate = null;
            DisplayName = string.Empty;
            Password = string.Empty;
            UserInitials = string.Empty;
            Code = string.Empty;
            IsAdministrator = false;
        }

        /// <summary>
        /// Clones this instance.
        /// </summary>
        /// <returns>A cloned Member.</returns>
        public Member Clone()
        {
            Member member = new Member();

            member.MemberId = MemberId;
            member.CreateDate = CreateDate;
            member.EmailAddress = EmailAddress;
            member.ConfirmationDate = ConfirmationDate;
            member.DisplayName = DisplayName;
            member.Password = Password;
            member.UserInitials = UserInitials;
            member.Code = Code;
            member.IsAdministrator = IsAdministrator;

            return member;
        }

        /// <summary>
        /// Returns a readable summary of this object.
        /// </summary>
        /// <returns>System.String.</returns>
        public override string ToString()
        {
            return SerializeObject();
        }

        /// <summary>
        /// Converts a non computed property to a regular property.
        /// </summary>
        /// <param name="property">The non computed Member property to convert.</param>
        /// <returns>The regular related property value.</returns>
        /// <exception cref="ArgumentException"></exception>
        private Enumerations.MemberProperty ConvertProperty(Enumerations.MemberPropertyNotComputed property)
        {
            foreach (Enumerations.MemberProperty regularProperty in Enum.GetValues(typeof(Enumerations.MemberProperty)))
            {
                if (regularProperty.ToString() == property.ToString())
                {
                    return regularProperty;
                }
            }

            throw new Exception($"Unable to convert non computed property '{property.ToString()}' of type 'MemberPropertyNotComputed' to a 'MemberProperty'.");
        }

        /// <summary>
        /// Returns the underlying object value.
        /// </summary>
        /// <param name="property">The not computed Member property to test.</param>
        /// <returns>The dynamic underlying property value.</returns>
        /// <exception cref="ArgumentException"></exception>
        public dynamic GetDBValue(Enumerations.MemberPropertyNotComputed property)
        {
            return GetDBValue(ConvertProperty(property));
        }

        /// <summary>
        /// Returns the underlying object data type for this language.
        /// </summary>
        /// <param name="property">The non computed Member property to test.</param>
        /// <returns>The data type for this property.</returns>
        /// <exception cref="ArgumentException"></exception>
        private string GetDataType(Enumerations.MemberPropertyNotComputed property)
        {
            return GetDataType(ConvertProperty(property));
        }

        /// <summary>
        /// Returns the underlying object value.
        /// </summary>
        /// <param name="property">The Member property to test.</param>
        /// <returns>The dynamic underlying property value.</returns>
        /// <exception cref="ArgumentException"></exception>
        public dynamic GetDBValue(Enumerations.MemberProperty property)
        {
            switch (property)
            {
                case Enumerations.MemberProperty.MemberId:
                    if (MemberId == null) return DBNull.Value;
                    return MemberId;
                case Enumerations.MemberProperty.CreateDate:
                    return CreateDate;
                case Enumerations.MemberProperty.EmailAddress:
                    if (EmailAddress == null) return DBNull.Value;
                    return EmailAddress;
                case Enumerations.MemberProperty.ConfirmationDate:
                    if (ConfirmationDate == null) return DBNull.Value;
                    return ConfirmationDate;
                case Enumerations.MemberProperty.DisplayName:
                    if (DisplayName == null) return DBNull.Value;
                    return DisplayName;
                case Enumerations.MemberProperty.Password:
                    if (Password == null) return DBNull.Value;
                    return Password;
                case Enumerations.MemberProperty.UserInitials:
                    if (UserInitials == null) return DBNull.Value;
                    return UserInitials;
                case Enumerations.MemberProperty.Code:
                    if (Code == null) return DBNull.Value;
                    return Code;
                case Enumerations.MemberProperty.IsAdministrator:
                    return IsAdministrator;
                default:
                    throw new ArgumentException($"Property {property.ToString()} unhandled.");
            }
        }

        /// <summary>
        /// Returns the underlying object data type for this language.
        /// </summary>
        /// <param name="property">The Member property to test.</param>
        /// <returns>The data type for this property.</returns>
        /// <exception cref="ArgumentException"></exception>
        private string GetDataType(Enumerations.MemberProperty property)
        {
            switch (property)
            {
                case Enumerations.MemberProperty.MemberId:
                    return "int?";
                case Enumerations.MemberProperty.CreateDate:
                    return "DateTime";
                case Enumerations.MemberProperty.EmailAddress:
                    return "string";
                case Enumerations.MemberProperty.ConfirmationDate:
                    return "DateTime?";
                case Enumerations.MemberProperty.DisplayName:
                    return "string";
                case Enumerations.MemberProperty.Password:
                    return "string";
                case Enumerations.MemberProperty.UserInitials:
                    return "string";
                case Enumerations.MemberProperty.Code:
                    return "string";
                case Enumerations.MemberProperty.IsAdministrator:
                    return "bool";
                default:
                    throw new ArgumentException($"Property {property.ToString()} unhandled.");
            }
        }

        /// <summary>
        /// Sets the primary key.
        /// </summary>
        /// <param name="id">The Members primary key value.</param>
        public void SetPrimaryKey(int? id)
        {
            MemberId = id;
            Id = id;
            SetOriginalProperties();
        }

        /// <summary>
        /// Updates the individual properties from the lite object.
        /// </summary>
        /// <param name="memberLite">The MemberLite source object.</param>
        public void UpdateFromLite(MemberLite memberLite)
        {
            // Do this first just to make sure.
            SetOriginalProperties();

            MemberId = memberLite.MemberId;
            CreateDate = memberLite.CreateDate;
            EmailAddress = memberLite.EmailAddress;
            ConfirmationDate = memberLite.ConfirmationDate;
            DisplayName = memberLite.DisplayName;
            Password = memberLite.Password;
            UserInitials = memberLite.UserInitials;
            Code = memberLite.Code;
            IsAdministrator = memberLite.IsAdministrator;
        }

        /// <summary>
        /// Returns the stored procedure name (of a given type) or this class.
        /// </summary>
        /// <param name="type">The stored procedure type.</param>
        public string GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType type)
        {
            string storedProcedureName = string.Empty;

            // The Stored procedure prefix (as defined on the model) is optional, deal with that first.
            if (!string.IsNullOrEmpty(Schema.Model.StoredProcedurePrefix))
            {
                storedProcedureName += $"{Schema.Model.StoredProcedurePrefix}_";
            }

            // Model prefix (optional), entity name then finally the type.
            if (string.IsNullOrEmpty(TableSchema))
            {
                return $"{storedProcedureName}{TextAssistant.PascalCase(OnlyAlpha(TableName, true))}_{type}";
            }
            else
            {
                return $"{TableSchema}.{storedProcedureName}{TextAssistant.PascalCase(OnlyAlpha(TableName, true))}_{type}";
            }
        }
        #endregion Methods

    } // Class
} // Namespace
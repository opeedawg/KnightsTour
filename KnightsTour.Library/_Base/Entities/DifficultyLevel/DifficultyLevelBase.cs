// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 14, 2023 11:18:11 AM
// File             : DifficultyLevelBase.cs
// ************************************************************************

using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

using KnightsTour.CoreLibrary;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace KnightsTour
{
    /// <summary>
    /// The DifficultyLevelBase class which tightly binds the model to the object.  Inherits <seealso cref="DifficultyLevelLiteBase" /> and implements <seealso cref="KnightsTour.CoreLibrary.IEntity{T}" />
    /// Generated On: October 14, 2023 at 11:18:11 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// This class should NOT be modified - any extensions or overrides should be completed in the extended class <seealso cref="DifficultyLevel" />.
    /// </remarks>
    public abstract class DifficultyLevelBase : DifficultyLevelLiteBase, KnightsTour.CoreLibrary.IEntity<int?>
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="DifficultyLevelBase"/> class.
        /// Initializes a new instance of the <see cref="DifficultyLevelBase"/> class initialized with default properties.
        /// </summary>
        public DifficultyLevelBase() : base()
        {
            Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DifficultyLevelBase"/> class.
        /// Initializes a new empty instance of the DifficultyLevelBase class with the given primary key.
        /// </summary>
        /// <param name="id">The primary key value.</param>
        public DifficultyLevelBase(int? id)
        {
            Initialize();
            SetPrimaryKey(id);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DifficultyLevelBase"/> class.
        /// Initializes a new empty instance of the DifficultyLevelBase class from the record in a data reader populating only the DifficultyLevel columns specified.
        /// </summary>
        /// <param name="record">A record returned from a database reader.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.DifficultyLevelProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public DifficultyLevelBase(IDataRecord record, List<Enumerations.DifficultyLevelProperty> columnsToInclude = null)
        {
            Initialize();

            // If not specified, default to all columns.
            if (columnsToInclude == null)
            {
                columnsToInclude = new List<Enumerations.DifficultyLevelProperty>() { Enumerations.DifficultyLevelProperty.All };
            }

            // Primary key must always be passed.
            DifficultyLevelId = record.ValueAs<int?>("DifficultyLevelId");
            if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.Name))
            {
                Name = record.ValueAs<string>("Name");
            }
            if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.Description))
            {
                Description = record.ValueAs<string>("Description");
            }
            if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.MaximumGap))
            {
                MaximumGap = record.ValueAs<int>("MaximumGap");
            }
            if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.PercentVisibility))
            {
                PercentVisibility = record.ValueAs<decimal>("PercentVisibility");
            }
            if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.HighlightClosestEnabled))
            {
                HighlightClosestEnabled = record.ValueAs<bool>("HighlightClosestEnabled");
            }
            if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.DuplicateCheckingEnabled))
            {
                DuplicateCheckingEnabled = record.ValueAs<bool>("DuplicateCheckingEnabled");
            }
            if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.GuessFilterEnabled))
            {
                GuessFilterEnabled = record.ValueAs<bool>("GuessFilterEnabled");
            }
            if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.BadLinkEnabled))
            {
                BadLinkEnabled = record.ValueAs<bool>("BadLinkEnabled");
            }
            if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.MaximumDimension))
            {
                MaximumDimension = record.ValueAs<int>("MaximumDimension");
            }
            if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.MinimumDimension))
            {
                MinimumDimension = record.ValueAs<int>("MinimumDimension");
            }

            // Link the primary key to the base Id field.
            SetPrimaryKey(DifficultyLevelId.Value);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DifficultyLevelBase"/> class.
        /// Initializes a new empty instance of the DifficultyLevelBase class from a DataRow with the DifficultyLevel columns specified.
        /// </summary>
        /// <param name="record">A <see cref="DataRow"/>.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.DifficultyLevelProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public DifficultyLevelBase(DataRow record, List<Enumerations.DifficultyLevelProperty> columnsToInclude = null)
        {
            if (record != null)
            {
                Initialize();

                // If not specified, default to all columns.
                if (columnsToInclude == null)
                {
                    columnsToInclude = new List<Enumerations.DifficultyLevelProperty>() { Enumerations.DifficultyLevelProperty.All };
                }

                // Primary key must always be passed.
                DifficultyLevelId = record.ValueAs<int?>("DifficultyLevelId");
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.Name))
                {
                    Name = record.ValueAs<string>("Name");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.Description))
                {
                    Description = record.ValueAs<string>("Description");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.MaximumGap))
                {
                    MaximumGap = record.ValueAs<int>("MaximumGap");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.PercentVisibility))
                {
                    PercentVisibility = record.ValueAs<decimal>("PercentVisibility");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.HighlightClosestEnabled))
                {
                    HighlightClosestEnabled = record.ValueAs<bool>("HighlightClosestEnabled");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.DuplicateCheckingEnabled))
                {
                    DuplicateCheckingEnabled = record.ValueAs<bool>("DuplicateCheckingEnabled");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.GuessFilterEnabled))
                {
                    GuessFilterEnabled = record.ValueAs<bool>("GuessFilterEnabled");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.BadLinkEnabled))
                {
                    BadLinkEnabled = record.ValueAs<bool>("BadLinkEnabled");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.MaximumDimension))
                {
                    MaximumDimension = record.ValueAs<int>("MaximumDimension");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.MinimumDimension))
                {
                    MinimumDimension = record.ValueAs<int>("MinimumDimension");
                }

                // Link the primary key to the base Id field.
                SetPrimaryKey(DifficultyLevelId.Value);
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DifficultyLevelBase"/> class.
        /// Initializes a new empty instance of the DifficultyLevelBase class from a DataRow with the DifficultyLevel columns specified.
        /// </summary>
        /// <param name="difficultyLevelLite">A <see cref="DifficultyLevelLite"/>.</param>
        public DifficultyLevelBase(DifficultyLevelLite difficultyLevelLite)
        {
            if (difficultyLevelLite != null)
            {
                Initialize();

                // Base properties.
                DifficultyLevelId = difficultyLevelLite.DifficultyLevelId.HasValue && difficultyLevelLite.DifficultyLevelId.Value <= 0 ? null : difficultyLevelLite.DifficultyLevelId;
                Name = difficultyLevelLite.Name;
                Description = difficultyLevelLite.Description;
                MaximumGap = difficultyLevelLite.MaximumGap;
                PercentVisibility = difficultyLevelLite.PercentVisibility;
                HighlightClosestEnabled = difficultyLevelLite.HighlightClosestEnabled;
                DuplicateCheckingEnabled = difficultyLevelLite.DuplicateCheckingEnabled;
                GuessFilterEnabled = difficultyLevelLite.GuessFilterEnabled;
                BadLinkEnabled = difficultyLevelLite.BadLinkEnabled;
                MaximumDimension = difficultyLevelLite.MaximumDimension;
                MinimumDimension = difficultyLevelLite.MinimumDimension;

                // Link the primary key to the base Id field.
                SetPrimaryKey(DifficultyLevelId);
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DifficultyLevelBase"/> class.
        /// Initializes a new empty instance of the DifficultyLevelBase class from a DataRow with the DifficultyLevel columns specified.
        /// </summary>
        /// <param name="record">A dynamic Expando Object.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.DifficultyLevelProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public DifficultyLevelBase(ExpandoObject record, List<Enumerations.DifficultyLevelProperty> columnsToInclude = null)
        {
            if (record != null)
            {
                IDictionary<string, object> recordAsDictionary = (IDictionary<string, object>)record;

                Initialize();

                // If not specified, default to all columns.
                if (columnsToInclude == null)
                {
                    columnsToInclude = new List<Enumerations.DifficultyLevelProperty>() { Enumerations.DifficultyLevelProperty.All };
                }
                else if (!columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All))
                {
                    // Primary key must always be passed.
                    DifficultyLevelId = recordAsDictionary.ValueAs<int?>("DifficultyLevelId");
                }

                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.Name))
                {
                    Name = recordAsDictionary.ValueAs<string>("Name");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.Description))
                {
                    Description = recordAsDictionary.ValueAs<string>("Description");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.MaximumGap))
                {
                    MaximumGap = recordAsDictionary.ValueAs<int>("MaximumGap");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.PercentVisibility))
                {
                    PercentVisibility = recordAsDictionary.ValueAs<decimal>("PercentVisibility");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.HighlightClosestEnabled))
                {
                    HighlightClosestEnabled = recordAsDictionary.ValueAs<bool>("HighlightClosestEnabled");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.DuplicateCheckingEnabled))
                {
                    DuplicateCheckingEnabled = recordAsDictionary.ValueAs<bool>("DuplicateCheckingEnabled");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.GuessFilterEnabled))
                {
                    GuessFilterEnabled = recordAsDictionary.ValueAs<bool>("GuessFilterEnabled");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.BadLinkEnabled))
                {
                    BadLinkEnabled = recordAsDictionary.ValueAs<bool>("BadLinkEnabled");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.MaximumDimension))
                {
                    MaximumDimension = recordAsDictionary.ValueAs<int>("MaximumDimension");
                }
                if (columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.All) || columnsToInclude.Contains(Enumerations.DifficultyLevelProperty.MinimumDimension))
                {
                    MinimumDimension = recordAsDictionary.ValueAs<int>("MinimumDimension");
                }

                // Link the primary key to the base Id field.
                SetPrimaryKey(DifficultyLevelId.Value);
            }
        }
        #endregion Constructor(s)

        #region Declarations
        KnightsTour.CoreLibrary.IStorageHandler storageHandler = null; // Storage handler reference used for lazy loading.
        IEnumerable<KnightsTour.Puzzle> _puzzles = null; // Private collection of child puzzles references (by DifficultyLevelId) used for graph hydration.  Lazy loaded if not initialized explicitly.
        #endregion Declarations

        #region Properties

        /// <summary>
        /// The override implementation of the base Id interface property.
        /// </summary>
        /// <value>
        /// The id.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public new int? Id
        {
            get
            {
                return DifficultyLevelId;
            }
            set
            {
                DifficultyLevelId = value;
            }
        }

        /// <summary>
        /// Gets or sets the collection of child puzzles references (by DifficultyLevelId) used for graph hydration.  Lazy loaded if not initialized explicitly.
        /// </summary>
        /// <value>
        /// The puzzles.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public IEnumerable<KnightsTour.Puzzle> Puzzles
        {
            get
            {
                if (_puzzles == null)
                {
                    _puzzles = new List<Puzzle>();
                    if (!IsNew)
                    {
                        _puzzles = new PuzzleLogic(StorageHandler, UserName).GetByFK<int?>(EntityMapper.GetPropertyName(Enumerations.PuzzleProperty.DifficultyLevelId).ToString(), DifficultyLevelId);
                    }
                }
                return _puzzles;
            }
            set
            {
                _puzzles = value;
            }
        }

        /// <summary>
        /// The primary key column for this entity.
        /// </summary>
        /// <value>
        /// The primary key.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public Enumerations.DifficultyLevelProperty PrimaryKey
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the field validations.
        /// </summary>
        /// <value>
        /// The field validations.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public List<FieldValidator> FieldValidations
        {
            get;
            set;
        }

        /// <summary>
        /// The insert header for bulk SQL operations.
        /// </summary>
        /// <value>
        /// The s q l insert bulk header.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string SQLInsertBulkHeader
        {
            get
            {
                if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.AutoIncrement)
                {
                    return $"INSERT INTO {StorageProvider.GetTableSQL(EntityMapper.EntityNameTransformation[EntityName], TableSchema)} ({StorageProvider.GetColumnSQL("Name")}, {StorageProvider.GetColumnSQL("Description")}, {StorageProvider.GetColumnSQL("MaximumGap")}, {StorageProvider.GetColumnSQL("PercentVisibility")}, {StorageProvider.GetColumnSQL("HighlightClosestEnabled")}, {StorageProvider.GetColumnSQL("DuplicateCheckingEnabled")}, {StorageProvider.GetColumnSQL("GuessFilterEnabled")}, {StorageProvider.GetColumnSQL("BadLinkEnabled")}, {StorageProvider.GetColumnSQL("MaximumDimension")}, {StorageProvider.GetColumnSQL("MinimumDimension")})";
                }
                else
                {
                    return $"INSERT INTO {StorageProvider.GetTableSQL(EntityMapper.EntityNameTransformation[EntityName], TableSchema)} ({StorageProvider.GetColumnSQL("Name")}, {StorageProvider.GetColumnSQL("Description")}, {StorageProvider.GetColumnSQL("MaximumGap")}, {StorageProvider.GetColumnSQL("PercentVisibility")}, {StorageProvider.GetColumnSQL("HighlightClosestEnabled")}, {StorageProvider.GetColumnSQL("DuplicateCheckingEnabled")}, {StorageProvider.GetColumnSQL("GuessFilterEnabled")}, {StorageProvider.GetColumnSQL("BadLinkEnabled")}, {StorageProvider.GetColumnSQL("MaximumDimension")}, {StorageProvider.GetColumnSQL("MinimumDimension")})";
                }
            }
        }

        /// <summary>
        /// The SQL safe insert row for bulk SQL operations.
        /// </summary>
        /// <value>
        /// The s q l insert bulk row.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string SQLInsertBulkRow
        {
            get
            {
                if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.AutoIncrement)
                {
                    return $"({Name.SafeSQL()}, {Description.SafeSQL()}, {MaximumGap.SafeSQL()}, {PercentVisibility.SafeSQL()}, {HighlightClosestEnabled.SafeSQL()}, {DuplicateCheckingEnabled.SafeSQL()}, {GuessFilterEnabled.SafeSQL()}, {BadLinkEnabled.SafeSQL()}, {MaximumDimension.SafeSQL()}, {MinimumDimension.SafeSQL()})";
                }
                else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Manual)
                {
                    return $"({DifficultyLevelId.SafeSQL()}, {Name.SafeSQL()}, {Description.SafeSQL()}, {MaximumGap.SafeSQL()}, {PercentVisibility.SafeSQL()}, {HighlightClosestEnabled.SafeSQL()}, {DuplicateCheckingEnabled.SafeSQL()}, {GuessFilterEnabled.SafeSQL()}, {BadLinkEnabled.SafeSQL()}, {MaximumDimension.SafeSQL()}, {MinimumDimension.SafeSQL()})";
                }
                else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Sequence)
                {
                    return $"({StorageProvider.GetTableSQL(EntityMapper.SequenceMapper[EntityName], TableSchema)}.NEXTVAL, {Name.SafeSQL()}, {Description.SafeSQL()}, {MaximumGap.SafeSQL()}, {PercentVisibility.SafeSQL()}, {HighlightClosestEnabled.SafeSQL()}, {DuplicateCheckingEnabled.SafeSQL()}, {GuessFilterEnabled.SafeSQL()}, {BadLinkEnabled.SafeSQL()}, {MaximumDimension.SafeSQL()}, {MinimumDimension.SafeSQL()})";
                }
                else
                {
                    throw new Exception($"Unhandled PK Insert Configuration: {StorageHandler.PKInsertConfiguration.ToString()}");
                }
            }
        }

        /// <summary>
        /// The insert SQL statement for single records.
        /// </summary>
        /// <value>
        /// The s q l insert statement.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public KnightsTour.CoreLibrary.IStorageStatement SQLInsertStatement
        {
            get
            {
                KnightsTour.CoreLibrary.StorageStatement statement = new KnightsTour.CoreLibrary.StorageStatement();

                if (KnightsTour.Context.UseStoredProcedureIntegration)
                {
                    statement.CommandType = System.Data.CommandType.StoredProcedure;
                    statement.Statement = GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType.Insert);
                    statement.Parameters = new List<KnightsTour.CoreLibrary.IParameter>
                    {
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Name", GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.Name)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Description", GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.Description)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}MaximumGap", GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.MaximumGap)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}PercentVisibility", GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.PercentVisibility)),
                    };
                }
                else
                {
                    StringBuilder sql = new StringBuilder(SQLInsertBulkHeader);

                    sql.Append(" VALUES(");
                    foreach (Enumerations.DifficultyLevelPropertyNotComputed property in Enum.GetValues(typeof(Enumerations.DifficultyLevelPropertyNotComputed)))
                    {
                        if (property != Enumerations.DifficultyLevelPropertyNotComputed.All)
                        {
                            if (ConvertProperty(property) != PrimaryKey)
                            {
                                sql.Append($"{StorageProvider.GetParameterPrefix()}{property.ToString()}, ");
                                statement.Parameters.Add(new KnightsTour.CoreLibrary.GenericParameter(StorageProvider.GetParameterPrefix() + property.ToString(), GetDBValue(property), GetDataType(property)));
                            }
                            else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Sequence)
                            {
                                sql.Append($"{EntityMapper.GetSequenceName(EntityName)}.NEXTVAL, ");
                            }
                            else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Manual)
                            {
                                sql.Append($"{StorageProvider.GetParameterPrefix()}{property.ToString()}, ");
                                statement.Parameters.Add(new KnightsTour.CoreLibrary.GenericParameter(StorageProvider.GetParameterPrefix() + property.ToString(), GetDBValue(property), GetDataType(property)));
                            }
                        }
                    }

                    // Remove the trailing comma and space.
                    sql = sql.Remove(sql.Length - 2, 2);
                    sql.Append(")");

                    statement.Statement = sql.ToString();
                }

                return statement;
            }
        }

        /// <summary>
        /// The update SQL statement for single records.
        /// </summary>
        /// <value>
        /// The s q l update statement.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public KnightsTour.CoreLibrary.IStorageStatement SQLUpdateStatement
        {
            get
            {
                KnightsTour.CoreLibrary.StorageStatement statement = new KnightsTour.CoreLibrary.StorageStatement();

                if (KnightsTour.Context.UseStoredProcedureIntegration)
                {
                    statement.CommandType = System.Data.CommandType.StoredProcedure;
                    statement.Statement = GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType.Update);
                    statement.Parameters = new List<KnightsTour.CoreLibrary.IParameter>
                    {
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}DifficultyLevelId", GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.DifficultyLevelId)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Name", GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.Name)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Description", GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.Description)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}MaximumGap", GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.MaximumGap)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}PercentVisibility", GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.PercentVisibility)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}HighlightClosestEnabled", GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.HighlightClosestEnabled)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}DuplicateCheckingEnabled", GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.DuplicateCheckingEnabled)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}GuessFilterEnabled", GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.GuessFilterEnabled)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}BadLinkEnabled", GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.BadLinkEnabled)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}MaximumDimension", GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.MaximumDimension)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}MinimumDimension", GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.MinimumDimension)),
                    };
                }
                else
                {
                    StringBuilder sql = new StringBuilder($"UPDATE {StorageProvider.GetTableSQL(EntityMapper.EntityNameTransformation[EntityName], TableSchema)} SET ");

                    foreach (Enumerations.DifficultyLevelPropertyNotComputed property in Enum.GetValues(typeof(Enumerations.DifficultyLevelPropertyNotComputed)))
                    {
                        if (property != Enumerations.DifficultyLevelPropertyNotComputed.All)
                        {
                            if (IsModified(ConvertProperty(property)))
                            {
                                sql.Append($"{StorageProvider.GetColumnSQL(EntityMapper.GetPropertyName(ConvertProperty(property)))} = {StorageProvider.GetParameterPrefix()}{property.ToString()}, ");
                                statement.Parameters.Add(new KnightsTour.CoreLibrary.GenericParameter(StorageProvider.GetParameterPrefix() + property.ToString(), GetDBValue(property), GetDataType(property)));
                            }
                        }
                    }

                    sql = sql.Remove(sql.Length - 2, 2); //Remove the trailing comma and space
                    sql.Append($" WHERE {StorageProvider.GetColumnSQL(PrimaryKeyField)} = {DifficultyLevelId.SafeSQL()}");

                    statement.Statement = sql.ToString();
                }

                return statement;
            }
        }

        /// <summary>
        /// Gets or sets the initial state for this entity.
        /// </summary>
        /// <value>
        /// The initial state.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public DifficultyLevelLiteBase InitialState
        {
            get;
            set;
        }

        /// <summary>
        /// Gets a value indicating whether this DifficultyLevel instance is new or not.
        /// </summary>
        /// <value>
        /// The is new.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public bool IsNew
        {
            get
            {
                return !DifficultyLevelId.HasValue;
            }
        }

        /// <summary>
        /// Gets the related name of the actual database table.
        /// </summary>
        /// <value>
        /// The table name.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string TableName
        {
            get
            {
                return EntityMapper.GetDbEntityName(EntityName);
            }
        }

        /// <summary>
        /// Gets the related name of the actual database schema.
        /// </summary>
        /// <value>
        /// The table schema.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string TableSchema
        {
            get
            {
                return "dbo";
            }
        }

        /// <summary>
        /// Gets the primary key default value.
        /// </summary>
        /// <value>
        /// The p k default value.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string PKDefaultValue
        {
            get
            {
                return "";
            }
        }

        /// <summary>
        /// Gets or sets the storage handler from the default configured source unless otherwise set.
        /// </summary>
        /// <value>
        /// The storage handler.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public KnightsTour.CoreLibrary.IStorageHandler StorageHandler
        {
            get
            {
                if (storageHandler == null)
                {
                    storageHandler = StorageProvider.GetHandler();
                }
                return storageHandler;
            }
            set
            {
                storageHandler = value;
            }
        }

        /// <summary>
        /// The configured label or label collection configured, or the PK number or (new) if a new record.
        /// </summary>
        /// <value>
        /// The instance label.
        /// </value>
        public string InstanceLabel
        {
            get
            {
                if (IsNew)
                {
                    return "(New)";
                }
                else
                {
                    return DifficultyLevelId.Value.ToString();
                }
            }
        }

        /// <summary>
        /// Returns the PercentVisibility formatted as a currency.
        /// </summary>
        /// <value>
        /// The percent visibility as currency.
        /// </value>
        public string PercentVisibilityAsCurrency
        {
            get
            {
                return PercentVisibility.ToString("c");
            }
        }
        #endregion Properties

        #region Methods

        /// <summary>
        /// Validates the object using the defined field validators.
        /// </summary>
        public KnightsTour.CoreLibrary.IActionResponse Validate()
        {
            return KnightsTour.Context.ValidationHandler.ValidateEntity<int?>(Enumerations.EntityName.DifficultyLevel.ToString(), TableSchema, this, IsNew);
        }

        /// <summary>
        /// Sets the original properties (required for object state checking).
        /// </summary>
        public void SetOriginalProperties()
        {
            InitialState = new DifficultyLevelLite(this);
        }

        /// <summary>
        /// Serializes the object based on the defined serialization strategy defined in the <seealso cref="AuditHandler" />.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public string SerializeObject()
        {
            string objectSerialization = string.Empty;
            switch (KnightsTour.Context.AuditHandler.SerializationStrategy)
            {
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.XML:
                    objectSerialization = KnightsTour.CoreLibrary.XMLAssistant.Serialize(ToDynamic());
                    break;
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.JSON:
                    objectSerialization = ToDynamic().ToString();
                    break;
                default:
                    throw new NotImplementedException($"{KnightsTour.Context.AuditHandler.SerializationStrategy.ToString()} serialization strategy not implemented.");
            }
            return objectSerialization;
        }

        /// <summary>
        /// Serializes the object differential based on the defined serialization strategy defined in the <seealso cref="AuditHandler" />.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public string SerializeDifferential()
        {
            string objectSerialization = string.Empty;
            switch (KnightsTour.Context.AuditHandler.SerializationStrategy)
            {
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.XML:
                    objectSerialization = KnightsTour.CoreLibrary.XMLAssistant.Serialize(ToDynamic(KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.ModifiedPropertiesOnly));
                    break;
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.JSON:
                    objectSerialization = ToDynamic(KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.ModifiedPropertiesOnly).ToString();
                    break;
                default:
                    throw new NotImplementedException($"{KnightsTour.Context.AuditHandler.SerializationStrategy.ToString()} serialization strategy not implemented.");
            }
            return objectSerialization;
        }

        /// <summary>
        /// Creates a dynamic object based on the passed <seealso cref="KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy" />.
        /// </summary>
        /// <param name="strategy">The strategy.</param>
        /// <returns>dynamic.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public dynamic ToDynamic(KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy strategy = KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.AllProperties)
        {
            dynamic dynamicDifficultyLevel = new JObject();
            switch (strategy)
            {
                case KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.AllProperties:
                    dynamicDifficultyLevel.DifficultyLevelId = DifficultyLevelId;
                    dynamicDifficultyLevel.Name = Name;
                    dynamicDifficultyLevel.Description = Description;
                    dynamicDifficultyLevel.MaximumGap = MaximumGap;
                    dynamicDifficultyLevel.PercentVisibility = PercentVisibility;
                    dynamicDifficultyLevel.HighlightClosestEnabled = HighlightClosestEnabled;
                    dynamicDifficultyLevel.DuplicateCheckingEnabled = DuplicateCheckingEnabled;
                    dynamicDifficultyLevel.GuessFilterEnabled = GuessFilterEnabled;
                    dynamicDifficultyLevel.BadLinkEnabled = BadLinkEnabled;
                    dynamicDifficultyLevel.MaximumDimension = MaximumDimension;
                    dynamicDifficultyLevel.MinimumDimension = MinimumDimension;
                    break;
                case KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.AllPropertiesWithOriginals:
                    dynamicDifficultyLevel.DifficultyLevelId = DifficultyLevelId;
                    dynamicDifficultyLevel.DifficultyLevelId_Original = InitialState.DifficultyLevelId;
                    dynamicDifficultyLevel.Name = Name;
                    dynamicDifficultyLevel.Name_Original = InitialState.Name;
                    dynamicDifficultyLevel.Description = Description;
                    dynamicDifficultyLevel.Description_Original = InitialState.Description;
                    dynamicDifficultyLevel.MaximumGap = MaximumGap;
                    dynamicDifficultyLevel.MaximumGap_Original = InitialState.MaximumGap;
                    dynamicDifficultyLevel.PercentVisibility = PercentVisibility;
                    dynamicDifficultyLevel.PercentVisibility_Original = InitialState.PercentVisibility;
                    dynamicDifficultyLevel.HighlightClosestEnabled = HighlightClosestEnabled;
                    dynamicDifficultyLevel.HighlightClosestEnabled_Original = InitialState.HighlightClosestEnabled;
                    dynamicDifficultyLevel.DuplicateCheckingEnabled = DuplicateCheckingEnabled;
                    dynamicDifficultyLevel.DuplicateCheckingEnabled_Original = InitialState.DuplicateCheckingEnabled;
                    dynamicDifficultyLevel.GuessFilterEnabled = GuessFilterEnabled;
                    dynamicDifficultyLevel.GuessFilterEnabled_Original = InitialState.GuessFilterEnabled;
                    dynamicDifficultyLevel.BadLinkEnabled = BadLinkEnabled;
                    dynamicDifficultyLevel.BadLinkEnabled_Original = InitialState.BadLinkEnabled;
                    dynamicDifficultyLevel.MaximumDimension = MaximumDimension;
                    dynamicDifficultyLevel.MaximumDimension_Original = InitialState.MaximumDimension;
                    dynamicDifficultyLevel.MinimumDimension = MinimumDimension;
                    dynamicDifficultyLevel.MinimumDimension_Original = InitialState.MinimumDimension;
                    break;
                case KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.ModifiedPropertiesOnly:
                    if (IsModified(Enumerations.DifficultyLevelProperty.DifficultyLevelId))
                    {
                        dynamicDifficultyLevel.DifficultyLevelId = DifficultyLevelId;
                        dynamicDifficultyLevel.DifficultyLevelId_Original = InitialState.DifficultyLevelId;
                    }
                    if (IsModified(Enumerations.DifficultyLevelProperty.Name))
                    {
                        dynamicDifficultyLevel.Name = Name;
                        dynamicDifficultyLevel.Name_Original = InitialState.Name;
                    }
                    if (IsModified(Enumerations.DifficultyLevelProperty.Description))
                    {
                        dynamicDifficultyLevel.Description = Description;
                        dynamicDifficultyLevel.Description_Original = InitialState.Description;
                    }
                    if (IsModified(Enumerations.DifficultyLevelProperty.MaximumGap))
                    {
                        dynamicDifficultyLevel.MaximumGap = MaximumGap;
                        dynamicDifficultyLevel.MaximumGap_Original = InitialState.MaximumGap;
                    }
                    if (IsModified(Enumerations.DifficultyLevelProperty.PercentVisibility))
                    {
                        dynamicDifficultyLevel.PercentVisibility = PercentVisibility;
                        dynamicDifficultyLevel.PercentVisibility_Original = InitialState.PercentVisibility;
                    }
                    if (IsModified(Enumerations.DifficultyLevelProperty.HighlightClosestEnabled))
                    {
                        dynamicDifficultyLevel.HighlightClosestEnabled = HighlightClosestEnabled;
                        dynamicDifficultyLevel.HighlightClosestEnabled_Original = InitialState.HighlightClosestEnabled;
                    }
                    if (IsModified(Enumerations.DifficultyLevelProperty.DuplicateCheckingEnabled))
                    {
                        dynamicDifficultyLevel.DuplicateCheckingEnabled = DuplicateCheckingEnabled;
                        dynamicDifficultyLevel.DuplicateCheckingEnabled_Original = InitialState.DuplicateCheckingEnabled;
                    }
                    if (IsModified(Enumerations.DifficultyLevelProperty.GuessFilterEnabled))
                    {
                        dynamicDifficultyLevel.GuessFilterEnabled = GuessFilterEnabled;
                        dynamicDifficultyLevel.GuessFilterEnabled_Original = InitialState.GuessFilterEnabled;
                    }
                    if (IsModified(Enumerations.DifficultyLevelProperty.BadLinkEnabled))
                    {
                        dynamicDifficultyLevel.BadLinkEnabled = BadLinkEnabled;
                        dynamicDifficultyLevel.BadLinkEnabled_Original = InitialState.BadLinkEnabled;
                    }
                    if (IsModified(Enumerations.DifficultyLevelProperty.MaximumDimension))
                    {
                        dynamicDifficultyLevel.MaximumDimension = MaximumDimension;
                        dynamicDifficultyLevel.MaximumDimension_Original = InitialState.MaximumDimension;
                    }
                    if (IsModified(Enumerations.DifficultyLevelProperty.MinimumDimension))
                    {
                        dynamicDifficultyLevel.MinimumDimension = MinimumDimension;
                        dynamicDifficultyLevel.MinimumDimension_Original = InitialState.MinimumDimension;
                    }
                    break;
                default:
                    throw new NotImplementedException($"{strategy.ToString()} strategy not implemented.");
            }
            return dynamicDifficultyLevel;
        }

        /// <summary>
        /// Determines whether this instance is modified.
        /// </summary>
        /// <returns><c>true</c> if this instance is modified; otherwise, <c>false</c>.</returns>
        public bool IsModified()
        {
            foreach (Enumerations.DifficultyLevelProperty property in Enum.GetValues(typeof(Enumerations.DifficultyLevelProperty)))
            {
                if (property != Enumerations.DifficultyLevelProperty.All)
                {
                    if (IsModified(property))
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Determines whether the specified property is modified.
        /// </summary>
        /// <param name="property">The DifficultyLevel property to test.</param>
        /// <returns><c>true</c> if the specified property is modified; otherwise, <c>false</c>.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public bool IsModified(Enumerations.DifficultyLevelProperty property)
        {
            switch (property)
            {
                case Enumerations.DifficultyLevelProperty.DifficultyLevelId:
                    return DifficultyLevelId != InitialState.DifficultyLevelId;
                case Enumerations.DifficultyLevelProperty.Name:
                    return Name != InitialState.Name;
                case Enumerations.DifficultyLevelProperty.Description:
                    return Description != InitialState.Description;
                case Enumerations.DifficultyLevelProperty.MaximumGap:
                    return MaximumGap != InitialState.MaximumGap;
                case Enumerations.DifficultyLevelProperty.PercentVisibility:
                    return PercentVisibility != InitialState.PercentVisibility;
                case Enumerations.DifficultyLevelProperty.HighlightClosestEnabled:
                    return HighlightClosestEnabled != InitialState.HighlightClosestEnabled;
                case Enumerations.DifficultyLevelProperty.DuplicateCheckingEnabled:
                    return DuplicateCheckingEnabled != InitialState.DuplicateCheckingEnabled;
                case Enumerations.DifficultyLevelProperty.GuessFilterEnabled:
                    return GuessFilterEnabled != InitialState.GuessFilterEnabled;
                case Enumerations.DifficultyLevelProperty.BadLinkEnabled:
                    return BadLinkEnabled != InitialState.BadLinkEnabled;
                case Enumerations.DifficultyLevelProperty.MaximumDimension:
                    return MaximumDimension != InitialState.MaximumDimension;
                case Enumerations.DifficultyLevelProperty.MinimumDimension:
                    return MinimumDimension != InitialState.MinimumDimension;
                case Enumerations.DifficultyLevelProperty.All:
                    return IsModified();
                default:
                    throw new NotImplementedException($"{property.ToString()} property not implemented.");
            }
        }

        /// <summary>
        /// Initializes the properties of this class.
        /// </summary>
        public void Initialize()
        {
            MethodWrappers.CommonWrapper(baseInitialize, KnightsTour.CoreLibrary.Enumerations.ApplicationTier.Business, new object[] { });
        }

        /// <summary>
        /// The privately wrapped implementation of the Initialize method.
        /// </summary>
        /// <param name="arguments">The generic arguments sent to this method from the public wrapped call.</param>
        private void baseInitialize(object[] arguments)
        {
            InitialState = new DifficultyLevelLite();

            // Base Entity properties.
            EntityName = Enumerations.EntityName.DifficultyLevel.ToString();
            PrimaryKey = Enumerations.DifficultyLevelProperty.DifficultyLevelId;
            PrimaryKeyField = EntityMapper.GetPropertyName(PrimaryKey);
            PrimaryKeyFieldFormatted = "DifficultyLevelId";
            PKInsertConfiguration = KnightsTour.CoreLibrary.Enumerations.InsertPKRule.AutoIncrement;

            // Table properties.
            DifficultyLevelId = null;
            Name = string.Empty;
            Description = string.Empty;
            MaximumGap = 0;
            PercentVisibility = 0M;
            HighlightClosestEnabled = false;
            DuplicateCheckingEnabled = false;
            GuessFilterEnabled = false;
            BadLinkEnabled = false;
            MaximumDimension = 0;
            MinimumDimension = 0;
        }

        /// <summary>
        /// Clones this instance.
        /// </summary>
        /// <returns>A cloned DifficultyLevel.</returns>
        public DifficultyLevel Clone()
        {
            DifficultyLevel difficultyLevel = new DifficultyLevel();

            difficultyLevel.DifficultyLevelId = DifficultyLevelId;
            difficultyLevel.Name = Name;
            difficultyLevel.Description = Description;
            difficultyLevel.MaximumGap = MaximumGap;
            difficultyLevel.PercentVisibility = PercentVisibility;
            difficultyLevel.HighlightClosestEnabled = HighlightClosestEnabled;
            difficultyLevel.DuplicateCheckingEnabled = DuplicateCheckingEnabled;
            difficultyLevel.GuessFilterEnabled = GuessFilterEnabled;
            difficultyLevel.BadLinkEnabled = BadLinkEnabled;
            difficultyLevel.MaximumDimension = MaximumDimension;
            difficultyLevel.MinimumDimension = MinimumDimension;

            return difficultyLevel;
        }

        /// <summary>
        /// Returns a readable summary of this object.
        /// </summary>
        /// <returns>System.String.</returns>
        public override string ToString()
        {
            return SerializeObject();
        }

        /// <summary>
        /// Converts a non computed property to a regular property.
        /// </summary>
        /// <param name="property">The non computed DifficultyLevel property to convert.</param>
        /// <returns>The regular related property value.</returns>
        /// <exception cref="ArgumentException"></exception>
        private Enumerations.DifficultyLevelProperty ConvertProperty(Enumerations.DifficultyLevelPropertyNotComputed property)
        {
            foreach (Enumerations.DifficultyLevelProperty regularProperty in Enum.GetValues(typeof(Enumerations.DifficultyLevelProperty)))
            {
                if (regularProperty.ToString() == property.ToString())
                {
                    return regularProperty;
                }
            }

            throw new Exception($"Unable to convert non computed property '{property.ToString()}' of type 'DifficultyLevelPropertyNotComputed' to a 'DifficultyLevelProperty'.");
        }

        /// <summary>
        /// Returns the underlying object value.
        /// </summary>
        /// <param name="property">The not computed DifficultyLevel property to test.</param>
        /// <returns>The dynamic underlying property value.</returns>
        /// <exception cref="ArgumentException"></exception>
        public dynamic GetDBValue(Enumerations.DifficultyLevelPropertyNotComputed property)
        {
            return GetDBValue(ConvertProperty(property));
        }

        /// <summary>
        /// Returns the underlying object data type for this language.
        /// </summary>
        /// <param name="property">The non computed DifficultyLevel property to test.</param>
        /// <returns>The data type for this property.</returns>
        /// <exception cref="ArgumentException"></exception>
        private string GetDataType(Enumerations.DifficultyLevelPropertyNotComputed property)
        {
            return GetDataType(ConvertProperty(property));
        }

        /// <summary>
        /// Returns the underlying object value.
        /// </summary>
        /// <param name="property">The DifficultyLevel property to test.</param>
        /// <returns>The dynamic underlying property value.</returns>
        /// <exception cref="ArgumentException"></exception>
        public dynamic GetDBValue(Enumerations.DifficultyLevelProperty property)
        {
            switch (property)
            {
                case Enumerations.DifficultyLevelProperty.DifficultyLevelId:
                    if (DifficultyLevelId == null) return DBNull.Value;
                    return DifficultyLevelId;
                case Enumerations.DifficultyLevelProperty.Name:
                    if (Name == null) return DBNull.Value;
                    return Name;
                case Enumerations.DifficultyLevelProperty.Description:
                    if (Description == null) return DBNull.Value;
                    return Description;
                case Enumerations.DifficultyLevelProperty.MaximumGap:
                    return MaximumGap;
                case Enumerations.DifficultyLevelProperty.PercentVisibility:
                    return PercentVisibility;
                case Enumerations.DifficultyLevelProperty.HighlightClosestEnabled:
                    return HighlightClosestEnabled;
                case Enumerations.DifficultyLevelProperty.DuplicateCheckingEnabled:
                    return DuplicateCheckingEnabled;
                case Enumerations.DifficultyLevelProperty.GuessFilterEnabled:
                    return GuessFilterEnabled;
                case Enumerations.DifficultyLevelProperty.BadLinkEnabled:
                    return BadLinkEnabled;
                case Enumerations.DifficultyLevelProperty.MaximumDimension:
                    return MaximumDimension;
                case Enumerations.DifficultyLevelProperty.MinimumDimension:
                    return MinimumDimension;
                default:
                    throw new ArgumentException($"Property {property.ToString()} unhandled.");
            }
        }

        /// <summary>
        /// Returns the underlying object data type for this language.
        /// </summary>
        /// <param name="property">The DifficultyLevel property to test.</param>
        /// <returns>The data type for this property.</returns>
        /// <exception cref="ArgumentException"></exception>
        private string GetDataType(Enumerations.DifficultyLevelProperty property)
        {
            switch (property)
            {
                case Enumerations.DifficultyLevelProperty.DifficultyLevelId:
                    return "int?";
                case Enumerations.DifficultyLevelProperty.Name:
                    return "string";
                case Enumerations.DifficultyLevelProperty.Description:
                    return "string";
                case Enumerations.DifficultyLevelProperty.MaximumGap:
                    return "int";
                case Enumerations.DifficultyLevelProperty.PercentVisibility:
                    return "decimal";
                case Enumerations.DifficultyLevelProperty.HighlightClosestEnabled:
                    return "bool";
                case Enumerations.DifficultyLevelProperty.DuplicateCheckingEnabled:
                    return "bool";
                case Enumerations.DifficultyLevelProperty.GuessFilterEnabled:
                    return "bool";
                case Enumerations.DifficultyLevelProperty.BadLinkEnabled:
                    return "bool";
                case Enumerations.DifficultyLevelProperty.MaximumDimension:
                    return "int";
                case Enumerations.DifficultyLevelProperty.MinimumDimension:
                    return "int";
                default:
                    throw new ArgumentException($"Property {property.ToString()} unhandled.");
            }
        }

        /// <summary>
        /// Sets the primary key.
        /// </summary>
        /// <param name="id">The DifficultyLevels primary key value.</param>
        public void SetPrimaryKey(int? id)
        {
            DifficultyLevelId = id;
            Id = id;
            SetOriginalProperties();
        }

        /// <summary>
        /// Updates the individual properties from the lite object.
        /// </summary>
        /// <param name="difficultyLevelLite">The DifficultyLevelLite source object.</param>
        public void UpdateFromLite(DifficultyLevelLite difficultyLevelLite)
        {
            // Do this first just to make sure.
            SetOriginalProperties();

            DifficultyLevelId = difficultyLevelLite.DifficultyLevelId;
            Name = difficultyLevelLite.Name;
            Description = difficultyLevelLite.Description;
            MaximumGap = difficultyLevelLite.MaximumGap;
            PercentVisibility = difficultyLevelLite.PercentVisibility;
            HighlightClosestEnabled = difficultyLevelLite.HighlightClosestEnabled;
            DuplicateCheckingEnabled = difficultyLevelLite.DuplicateCheckingEnabled;
            GuessFilterEnabled = difficultyLevelLite.GuessFilterEnabled;
            BadLinkEnabled = difficultyLevelLite.BadLinkEnabled;
            MaximumDimension = difficultyLevelLite.MaximumDimension;
            MinimumDimension = difficultyLevelLite.MinimumDimension;
        }

        /// <summary>
        /// Returns the stored procedure name (of a given type) or this class.
        /// </summary>
        /// <param name="type">The stored procedure type.</param>
        public string GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType type)
        {
            string storedProcedureName = string.Empty;

            // The Stored procedure prefix (as defined on the model) is optional, deal with that first.
            if (!string.IsNullOrEmpty(Schema.Model.StoredProcedurePrefix))
            {
                storedProcedureName += $"{Schema.Model.StoredProcedurePrefix}_";
            }

            // Model prefix (optional), entity name then finally the type.
            if (string.IsNullOrEmpty(TableSchema))
            {
                return $"{storedProcedureName}{TextAssistant.PascalCase(OnlyAlpha(TableName, true))}_{type}";
            }
            else
            {
                return $"{TableSchema}.{storedProcedureName}{TextAssistant.PascalCase(OnlyAlpha(TableName, true))}_{type}";
            }
        }
        #endregion Methods

    } // Class
} // Namespace
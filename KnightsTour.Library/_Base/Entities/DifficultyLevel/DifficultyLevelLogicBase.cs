// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 21, 2023 9:55:34 AM
// File             : DifficultyLevelLogicBase.cs
// ************************************************************************

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Transactions;

namespace KnightsTour
{
    /// <summary>
    /// Base difficultyLevel logic support methods.  Implements both <seealso cref="KnightsTour.CoreLibrary.IRepository{T,TLite, TPk}" /> and <seealso cref="KnightsTour.CoreLibrary.IEntityLogic{T,TLite, TPk}" />
    /// Generated On: October 21, 2023 at 9:55:34 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class supports basic and extended CRUD access - agnostic to supporting both cache and direct database access.
    /// This class is abstract and is meant to only be inherited and accessed via <seealso cref="DifficultyLevelLogic" /> class.
    /// This class will be regenerated when requested to stay in sync with your model.
    /// </remarks>
    public abstract class DifficultyLevelLogicBase : LogicBase<KnightsTour.DifficultyLevel, KnightsTour.DifficultyLevelLite, int?>
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="DifficultyLevelLogicBase"/> class.
        /// Instantiates a new generic LogicBase class using the configured repository.
        /// </summary>
        /// <param name="userName">The user using this class.</param>
        /// <example>
        /// <code>
        /// DifficultyLevelLogicBase DifficultyLevelLogic = new DifficultyLevelLogic(userName);
        /// </code>
        /// </example>
        public DifficultyLevelLogicBase(string userName) : base(Enumerations.EntityName.DifficultyLevel, userName)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DifficultyLevelLogicBase"/> class.
        /// Instantiates a new generic LogicBase class using the passed handler.
        /// </summary>
        /// <param name="handler">A storage handler.</param>
        /// <param name="userName">The user using this class.</param>
        public DifficultyLevelLogicBase(KnightsTour.CoreLibrary.IStorageHandler handler, string userName) : base(Enumerations.EntityName.DifficultyLevel, handler, userName)
        {
        }
        #endregion Constructor(s)

        #region Methods

        /// <summary>
        /// Inserts the DifficultyLevel and also checks to insert all the FK objects as well.
        /// </summary>
        /// <param name="difficultyLevel">The <see cref="DifficultyLevel"/> to insert.</param>
        /// <returns><see cref="KnightsTour.CoreLibrary.IActionResponse"/>: A populated rich response object.</returns>
        public KnightsTour.CoreLibrary.IActionResponse InsertCascade(DifficultyLevel difficultyLevel)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.CoreLibrary.ActionResponse("Flat difficulty level insert");

            using (var transactionScope = new TransactionScope())
            {

                // Insert the hydrated object.
                response.Append(new DifficultyLevelLogic(UserName).Insert(difficultyLevel));

                // Complete the transaction if everything worked as expected with no errors.
                if (response.IsValid)
                {
                    transactionScope.Complete();
                }

            }

            // Return the response.
            return response;
        }

        /// <summary>
        /// Inserts the DifficultyLevel.
        /// </summary>
        /// <param name="difficultyLevel">The <see cref="DifficultyLevel"/> to insert.</param>
        /// <returns><see cref="KnightsTour.CoreLibrary.IActionResponse"/>: A populated rich response object.</returns>
        public new KnightsTour.CoreLibrary.IActionResponse Insert(DifficultyLevel difficultyLevel)
        {
            // Configured insert defaults.
            difficultyLevel.HighlightClosestEnabled = false;
            difficultyLevel.DuplicateCheckingEnabled = false;
            difficultyLevel.GuessFilterEnabled = false;

            // Encryption requested on these field(s).

            // Call the base method.
            return base.Insert(difficultyLevel);
        }
        #endregion Methods

    } // Class
} // Namespace
// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 26, 2023 9:31:46 AM
// File             : DifficultyLevelExtensionsBase.cs
// ************************************************************************

using System.Collections.Generic;

namespace KnightsTour
{
    /// <summary>
    /// The DifficultyLevelLiteExtensionsBase class where common and useful extensions are placed.
    /// Generated On: October 26, 2023 at 9:31:46 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// This class should NOT be modified - any extensions or overrides should be completed in the extended extensions class provided.
    /// </remarks>
    public static partial class Extensions
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions"/> class.
        /// Converts a <seealso cref="DifficultyLevel" /> to its <seealso cref="DifficultyLevelLite" /> representation.
        /// </summary>
        /// <param name="difficultyLevel">The difficulty level to convert.</param>
        /// <returns>A lite representation of the DifficultyLevel entity.</returns>
        public static DifficultyLevelLite ToLite(this DifficultyLevel difficultyLevel)
        {
            if (difficultyLevel != null)
            {
                return new DifficultyLevelLite(difficultyLevel);
            }
            else
            {
                return null;
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions"/> class.
        /// Converts a collection of <seealso cref="DifficultyLevel" /> to their <seealso cref="DifficultyLevelLite" /> representations.
        /// </summary>
        /// <param name="difficultyLevels">The difficulty level collection to convert.</param>
        /// <returns>A collection of lite representations of the DifficultyLevel entity collection.</returns>
        public static IEnumerable<DifficultyLevelLite> ToLite(this IEnumerable<DifficultyLevel> difficultyLevels)
        {
            if (difficultyLevels != null)
            {
                List<DifficultyLevelLite> liteDifficultyLevels = new List<DifficultyLevelLite>();
                foreach (DifficultyLevel difficultyLevel in difficultyLevels)
                {
                    liteDifficultyLevels.Add(difficultyLevel.ToLite());
                }
                return liteDifficultyLevels;
            }
            else
            {
                return null;
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions"/> class.
        /// Converts a <seealso cref="DifficultyLevelLite" /> to its <seealso cref="DifficultyLevel" /> representation.
        /// </summary>
        /// <param name="difficultyLevelLite">The difficulty level lite entity to convert.</param>
        /// <returns>A full representation of the DifficultyLevelLite entity.</returns>
        public static DifficultyLevel ToFull(this DifficultyLevelLite difficultyLevelLite)
        {
            if (difficultyLevelLite != null)
            {
                return new DifficultyLevel(difficultyLevelLite);
            }
            else
            {
                return null;
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions"/> class.
        /// Converts a collection of <seealso cref="DifficultyLevelLite" /> to their <seealso cref="DifficultyLevel" /> representations.
        /// </summary>
        /// <param name="difficultyLevelLites">The lite difficulty level collection to convert.</param>
        /// <returns>A collection of full representations of the DifficultyLevelLite entity collection.</returns>
        public static IEnumerable<DifficultyLevel> ToFull(this IEnumerable<DifficultyLevelLite> difficultyLevelLites)
        {
            if (difficultyLevelLites != null)
            {
                List<DifficultyLevel> difficultyLevels = new List<DifficultyLevel>();
                foreach (DifficultyLevelLite difficultyLevelLite in difficultyLevelLites)
                {
                    difficultyLevels.Add(difficultyLevelLite.ToFull());
                }
                return difficultyLevels;
            }
            else
            {
                return null;
            }
        }
        #endregion Constructor(s)

    } // Class
} // Namespace
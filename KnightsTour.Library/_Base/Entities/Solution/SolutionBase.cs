// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 26, 2023 9:31:46 AM
// File             : SolutionBase.cs
// ************************************************************************

using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

using KnightsTour.CoreLibrary;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace KnightsTour
{
    /// <summary>
    /// The SolutionBase class which tightly binds the model to the object.  Inherits <seealso cref="SolutionLiteBase" /> and implements <seealso cref="KnightsTour.CoreLibrary.IEntity{T}" />
    /// Generated On: October 26, 2023 at 9:31:46 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// This class should NOT be modified - any extensions or overrides should be completed in the extended class <seealso cref="Solution" />.
    /// </remarks>
    public abstract class SolutionBase : SolutionLiteBase, KnightsTour.CoreLibrary.IEntity<int?>
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="SolutionBase"/> class.
        /// Initializes a new instance of the <see cref="SolutionBase"/> class initialized with default properties.
        /// </summary>
        public SolutionBase() : base()
        {
            Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="SolutionBase"/> class.
        /// Initializes a new empty instance of the SolutionBase class with the given primary key.
        /// </summary>
        /// <param name="id">The primary key value.</param>
        public SolutionBase(int? id)
        {
            Initialize();
            SetPrimaryKey(id);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="SolutionBase"/> class.
        /// Initializes a new empty instance of the SolutionBase class from the record in a data reader populating only the Solution columns specified.
        /// </summary>
        /// <param name="record">A record returned from a database reader.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.SolutionProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public SolutionBase(IDataRecord record, List<Enumerations.SolutionProperty> columnsToInclude = null)
        {
            Initialize();

            // If not specified, default to all columns.
            if (columnsToInclude == null)
            {
                columnsToInclude = new List<Enumerations.SolutionProperty>() { Enumerations.SolutionProperty.All };
            }

            // Primary key must always be passed.
            SolutionId = record.ValueAs<int?>("SolutionId");
            if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.PuzzleId))
            {
                PuzzleId = record.ValueAs<int?>("PuzzleId");
            }
            if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.MemberId))
            {
                MemberId = record.ValueAs<int?>("MemberId");
            }
            if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.SolutionStartDate))
            {
                SolutionStartDate = record.ValueAs<DateTime>("SolutionStartDate");
            }
            if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.SolutionDuration))
            {
                SolutionDuration = record.ValueAs<decimal?>("SolutionDuration");
            }
            if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.Path))
            {
                Path = record.ValueAs<string>("Path");
            }
            if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.Note))
            {
                Note = record.ValueAs<string>("Note");
            }
            if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.Code))
            {
                Code = record.ValueAs<string>("Code");
            }
            if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.NonMemberName))
            {
                NonMemberName = record.ValueAs<string>("NonMemberName");
            }
            if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.NonMemberIp))
            {
                NonMemberIp = record.ValueAs<string>("NonMemberIP");
            }

            // Link the primary key to the base Id field.
            SetPrimaryKey(SolutionId.Value);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="SolutionBase"/> class.
        /// Initializes a new empty instance of the SolutionBase class from a DataRow with the Solution columns specified.
        /// </summary>
        /// <param name="record">A <see cref="DataRow"/>.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.SolutionProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public SolutionBase(DataRow record, List<Enumerations.SolutionProperty> columnsToInclude = null)
        {
            if (record != null)
            {
                Initialize();

                // If not specified, default to all columns.
                if (columnsToInclude == null)
                {
                    columnsToInclude = new List<Enumerations.SolutionProperty>() { Enumerations.SolutionProperty.All };
                }

                // Primary key must always be passed.
                SolutionId = record.ValueAs<int?>("SolutionId");
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.PuzzleId))
                {
                    PuzzleId = record.ValueAs<int?>("PuzzleId");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.MemberId))
                {
                    MemberId = record.ValueAs<int?>("MemberId");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.SolutionStartDate))
                {
                    SolutionStartDate = record.ValueAs<DateTime>("SolutionStartDate");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.SolutionDuration))
                {
                    SolutionDuration = record.ValueAs<decimal?>("SolutionDuration");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.Path))
                {
                    Path = record.ValueAs<string>("Path");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.Note))
                {
                    Note = record.ValueAs<string>("Note");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.Code))
                {
                    Code = record.ValueAs<string>("Code");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.NonMemberName))
                {
                    NonMemberName = record.ValueAs<string>("NonMemberName");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.NonMemberIp))
                {
                    NonMemberIp = record.ValueAs<string>("NonMemberIP");
                }

                // Link the primary key to the base Id field.
                SetPrimaryKey(SolutionId.Value);
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="SolutionBase"/> class.
        /// Initializes a new empty instance of the SolutionBase class from a DataRow with the Solution columns specified.
        /// </summary>
        /// <param name="solutionLite">A <see cref="SolutionLite"/>.</param>
        public SolutionBase(SolutionLite solutionLite)
        {
            if (solutionLite != null)
            {
                Initialize();

                // Base properties.
                SolutionId = solutionLite.SolutionId.HasValue && solutionLite.SolutionId.Value <= 0 ? null : solutionLite.SolutionId;
                PuzzleId = solutionLite.PuzzleId.HasValue && solutionLite.PuzzleId.Value <= 0 ? null : solutionLite.PuzzleId;
                MemberId = solutionLite.MemberId.HasValue && solutionLite.MemberId.Value <= 0 ? null : solutionLite.MemberId;
                SolutionStartDate = solutionLite.SolutionStartDate;
                SolutionDuration = solutionLite.SolutionDuration;
                Path = solutionLite.Path;
                Note = solutionLite.Note;
                Code = solutionLite.Code;
                NonMemberName = solutionLite.NonMemberName;
                NonMemberIp = solutionLite.NonMemberIp;

                // Also convert the lite FK reference objects.
                if (solutionLite.Puzzle != null)
                {
                    this.Puzzle = new Puzzle(solutionLite.Puzzle);
                }
                if (solutionLite.Member != null)
                {
                    this.Member = new Member(solutionLite.Member);
                }
                // Link the primary key to the base Id field.
                SetPrimaryKey(SolutionId);
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="SolutionBase"/> class.
        /// Initializes a new empty instance of the SolutionBase class from a DataRow with the Solution columns specified.
        /// </summary>
        /// <param name="record">A dynamic Expando Object.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.SolutionProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public SolutionBase(ExpandoObject record, List<Enumerations.SolutionProperty> columnsToInclude = null)
        {
            if (record != null)
            {
                IDictionary<string, object> recordAsDictionary = (IDictionary<string, object>)record;

                Initialize();

                // If not specified, default to all columns.
                if (columnsToInclude == null)
                {
                    columnsToInclude = new List<Enumerations.SolutionProperty>() { Enumerations.SolutionProperty.All };
                }
                else if (!columnsToInclude.Contains(Enumerations.SolutionProperty.All))
                {
                    // Primary key must always be passed.
                    SolutionId = recordAsDictionary.ValueAs<int?>("SolutionId");
                }

                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.PuzzleId))
                {
                    PuzzleId = recordAsDictionary.ValueAs<int?>("PuzzleId");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.MemberId))
                {
                    MemberId = recordAsDictionary.ValueAs<int?>("MemberId");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.SolutionStartDate))
                {
                    SolutionStartDate = recordAsDictionary.ValueAs<DateTime>("SolutionStartDate");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.SolutionDuration))
                {
                    SolutionDuration = recordAsDictionary.ValueAs<decimal?>("SolutionDuration");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.Path))
                {
                    Path = recordAsDictionary.ValueAs<string>("Path");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.Note))
                {
                    Note = recordAsDictionary.ValueAs<string>("Note");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.Code))
                {
                    Code = recordAsDictionary.ValueAs<string>("Code");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.NonMemberName))
                {
                    NonMemberName = recordAsDictionary.ValueAs<string>("NonMemberName");
                }
                if (columnsToInclude.Contains(Enumerations.SolutionProperty.All) || columnsToInclude.Contains(Enumerations.SolutionProperty.NonMemberIp))
                {
                    NonMemberIp = recordAsDictionary.ValueAs<string>("NonMemberIP");
                }

                // Link the primary key to the base Id field.
                SetPrimaryKey(SolutionId.Value);
            }
        }
        #endregion Constructor(s)

        #region Declarations
        KnightsTour.CoreLibrary.IStorageHandler storageHandler = null; // Storage handler reference used for lazy loading.
        KnightsTour.Puzzle _puzzle = null; // Private Puzzle (by PuzzleId) reference used for graph hydraion.  Lazy loaded if not initialized explicitly.
        KnightsTour.Member _member = null; // Private Member (by MemberId) reference used for graph hydraion.  Lazy loaded if not initialized explicitly.
        #endregion Declarations

        #region Properties

        /// <summary>
        /// The override implementation of the base Id interface property.
        /// </summary>
        /// <value>
        /// The id.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public new int? Id
        {
            get
            {
                return SolutionId;
            }
            set
            {
                SolutionId = value;
            }
        }

        /// <summary>
        /// Gets or sets the related Puzzle (by PuzzleId) entity reference.  Lazy loaded unless specified.
        /// </summary>
        /// <value>
        /// The puzzle.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public new KnightsTour.Puzzle Puzzle
        {
            get
            {
                if ((_puzzle == null || _puzzle.IsNew) && PuzzleId.HasValue)
                {
                    _puzzle = PuzzleId.HasValue ? new PuzzleLogic(StorageHandler, UserName).GetById(PuzzleId.Value) : new Puzzle();
                }
                return _puzzle;
            }
            set
            {
                _puzzle = value;
            }
        }

        /// <summary>
        /// Gets or sets the related Member (by MemberId) entity reference.  Lazy loaded unless specified.
        /// </summary>
        /// <value>
        /// The member.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public new KnightsTour.Member Member
        {
            get
            {
                if ((_member == null || _member.IsNew) && MemberId.HasValue)
                {
                    _member = MemberId.HasValue ? new MemberLogic(StorageHandler, UserName).GetById(MemberId.Value) : new Member();
                }
                return _member;
            }
            set
            {
                _member = value;
            }
        }

        /// <summary>
        /// The primary key column for this entity.
        /// </summary>
        /// <value>
        /// The primary key.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public Enumerations.SolutionProperty PrimaryKey
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the field validations.
        /// </summary>
        /// <value>
        /// The field validations.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public List<FieldValidator> FieldValidations
        {
            get;
            set;
        }

        /// <summary>
        /// The insert header for bulk SQL operations.
        /// </summary>
        /// <value>
        /// The s q l insert bulk header.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string SQLInsertBulkHeader
        {
            get
            {
                if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.AutoIncrement)
                {
                    return $"INSERT INTO {StorageProvider.GetTableSQL(EntityMapper.EntityNameTransformation[EntityName], TableSchema)} ({StorageProvider.GetColumnSQL("PuzzleId")}, {StorageProvider.GetColumnSQL("MemberId")}, {StorageProvider.GetColumnSQL("SolutionStartDate")}, {StorageProvider.GetColumnSQL("SolutionDuration")}, {StorageProvider.GetColumnSQL("Path")}, {StorageProvider.GetColumnSQL("Note")}, {StorageProvider.GetColumnSQL("Code")}, {StorageProvider.GetColumnSQL("NonMemberName")}, {StorageProvider.GetColumnSQL("NonMemberIP")})";
                }
                else
                {
                    return $"INSERT INTO {StorageProvider.GetTableSQL(EntityMapper.EntityNameTransformation[EntityName], TableSchema)} ({StorageProvider.GetColumnSQL("PuzzleId")}, {StorageProvider.GetColumnSQL("MemberId")}, {StorageProvider.GetColumnSQL("SolutionStartDate")}, {StorageProvider.GetColumnSQL("SolutionDuration")}, {StorageProvider.GetColumnSQL("Path")}, {StorageProvider.GetColumnSQL("Note")}, {StorageProvider.GetColumnSQL("Code")}, {StorageProvider.GetColumnSQL("NonMemberName")}, {StorageProvider.GetColumnSQL("NonMemberIP")})";
                }
            }
        }

        /// <summary>
        /// The SQL safe insert row for bulk SQL operations.
        /// </summary>
        /// <value>
        /// The s q l insert bulk row.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string SQLInsertBulkRow
        {
            get
            {
                if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.AutoIncrement)
                {
                    return $"({PuzzleId.SafeSQL()}, {MemberId.SafeSQL()}, {SolutionStartDate.SafeSQL()}, {SolutionDuration.SafeSQL()}, {Path.SafeSQL()}, {Note.SafeSQL()}, {Code.SafeSQL()}, {NonMemberName.SafeSQL()}, {NonMemberIp.SafeSQL()})";
                }
                else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Manual)
                {
                    return $"({SolutionId.SafeSQL()}, {PuzzleId.SafeSQL()}, {MemberId.SafeSQL()}, {SolutionStartDate.SafeSQL()}, {SolutionDuration.SafeSQL()}, {Path.SafeSQL()}, {Note.SafeSQL()}, {Code.SafeSQL()}, {NonMemberName.SafeSQL()}, {NonMemberIp.SafeSQL()})";
                }
                else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Sequence)
                {
                    return $"({StorageProvider.GetTableSQL(EntityMapper.SequenceMapper[EntityName], TableSchema)}.NEXTVAL, {PuzzleId.SafeSQL()}, {MemberId.SafeSQL()}, {SolutionStartDate.SafeSQL()}, {SolutionDuration.SafeSQL()}, {Path.SafeSQL()}, {Note.SafeSQL()}, {Code.SafeSQL()}, {NonMemberName.SafeSQL()}, {NonMemberIp.SafeSQL()})";
                }
                else
                {
                    throw new Exception($"Unhandled PK Insert Configuration: {StorageHandler.PKInsertConfiguration.ToString()}");
                }
            }
        }

        /// <summary>
        /// The insert SQL statement for single records.
        /// </summary>
        /// <value>
        /// The s q l insert statement.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public KnightsTour.CoreLibrary.IStorageStatement SQLInsertStatement
        {
            get
            {
                KnightsTour.CoreLibrary.StorageStatement statement = new KnightsTour.CoreLibrary.StorageStatement();

                if (KnightsTour.Context.UseStoredProcedureIntegration)
                {
                    statement.CommandType = System.Data.CommandType.StoredProcedure;
                    statement.Statement = GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType.Insert);
                    statement.Parameters = new List<KnightsTour.CoreLibrary.IParameter>
                    {
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}PuzzleId", GetDBValue(KnightsTour.Enumerations.SolutionProperty.PuzzleId)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}MemberId", GetDBValue(KnightsTour.Enumerations.SolutionProperty.MemberId)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}SolutionDuration", GetDBValue(KnightsTour.Enumerations.SolutionProperty.SolutionDuration)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Path", GetDBValue(KnightsTour.Enumerations.SolutionProperty.Path)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Note", GetDBValue(KnightsTour.Enumerations.SolutionProperty.Note)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}NonMemberName", GetDBValue(KnightsTour.Enumerations.SolutionProperty.NonMemberName)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}NonMemberIp", GetDBValue(KnightsTour.Enumerations.SolutionProperty.NonMemberIp)),
                    };
                }
                else
                {
                    StringBuilder sql = new StringBuilder(SQLInsertBulkHeader);

                    sql.Append(" VALUES(");
                    foreach (Enumerations.SolutionPropertyNotComputed property in Enum.GetValues(typeof(Enumerations.SolutionPropertyNotComputed)))
                    {
                        if (property != Enumerations.SolutionPropertyNotComputed.All)
                        {
                            if (ConvertProperty(property) != PrimaryKey)
                            {
                                sql.Append($"{StorageProvider.GetParameterPrefix()}{property.ToString()}, ");
                                statement.Parameters.Add(new KnightsTour.CoreLibrary.GenericParameter(StorageProvider.GetParameterPrefix() + property.ToString(), GetDBValue(property), GetDataType(property)));
                            }
                            else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Sequence)
                            {
                                sql.Append($"{EntityMapper.GetSequenceName(EntityName)}.NEXTVAL, ");
                            }
                            else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Manual)
                            {
                                sql.Append($"{StorageProvider.GetParameterPrefix()}{property.ToString()}, ");
                                statement.Parameters.Add(new KnightsTour.CoreLibrary.GenericParameter(StorageProvider.GetParameterPrefix() + property.ToString(), GetDBValue(property), GetDataType(property)));
                            }
                        }
                    }

                    // Remove the trailing comma and space.
                    sql = sql.Remove(sql.Length - 2, 2);
                    sql.Append(")");

                    statement.Statement = sql.ToString();
                }

                return statement;
            }
        }

        /// <summary>
        /// The update SQL statement for single records.
        /// </summary>
        /// <value>
        /// The s q l update statement.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public KnightsTour.CoreLibrary.IStorageStatement SQLUpdateStatement
        {
            get
            {
                KnightsTour.CoreLibrary.StorageStatement statement = new KnightsTour.CoreLibrary.StorageStatement();

                if (KnightsTour.Context.UseStoredProcedureIntegration)
                {
                    statement.CommandType = System.Data.CommandType.StoredProcedure;
                    statement.Statement = GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType.Update);
                    statement.Parameters = new List<KnightsTour.CoreLibrary.IParameter>
                    {
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}SolutionId", GetDBValue(KnightsTour.Enumerations.SolutionProperty.SolutionId)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}PuzzleId", GetDBValue(KnightsTour.Enumerations.SolutionProperty.PuzzleId)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}MemberId", GetDBValue(KnightsTour.Enumerations.SolutionProperty.MemberId)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}SolutionStartDate", GetDBValue(KnightsTour.Enumerations.SolutionProperty.SolutionStartDate)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}SolutionDuration", GetDBValue(KnightsTour.Enumerations.SolutionProperty.SolutionDuration)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Path", GetDBValue(KnightsTour.Enumerations.SolutionProperty.Path)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Note", GetDBValue(KnightsTour.Enumerations.SolutionProperty.Note)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Code", GetDBValue(KnightsTour.Enumerations.SolutionProperty.Code)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}NonMemberName", GetDBValue(KnightsTour.Enumerations.SolutionProperty.NonMemberName)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}NonMemberIp", GetDBValue(KnightsTour.Enumerations.SolutionProperty.NonMemberIp)),
                    };
                }
                else
                {
                    StringBuilder sql = new StringBuilder($"UPDATE {StorageProvider.GetTableSQL(EntityMapper.EntityNameTransformation[EntityName], TableSchema)} SET ");

                    foreach (Enumerations.SolutionPropertyNotComputed property in Enum.GetValues(typeof(Enumerations.SolutionPropertyNotComputed)))
                    {
                        if (property != Enumerations.SolutionPropertyNotComputed.All)
                        {
                            if (IsModified(ConvertProperty(property)))
                            {
                                sql.Append($"{StorageProvider.GetColumnSQL(EntityMapper.GetPropertyName(ConvertProperty(property)))} = {StorageProvider.GetParameterPrefix()}{property.ToString()}, ");
                                statement.Parameters.Add(new KnightsTour.CoreLibrary.GenericParameter(StorageProvider.GetParameterPrefix() + property.ToString(), GetDBValue(property), GetDataType(property)));
                            }
                        }
                    }

                    sql = sql.Remove(sql.Length - 2, 2); //Remove the trailing comma and space
                    sql.Append($" WHERE {StorageProvider.GetColumnSQL(PrimaryKeyField)} = {SolutionId.SafeSQL()}");

                    statement.Statement = sql.ToString();
                }

                return statement;
            }
        }

        /// <summary>
        /// Gets or sets the initial state for this entity.
        /// </summary>
        /// <value>
        /// The initial state.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public SolutionLiteBase InitialState
        {
            get;
            set;
        }

        /// <summary>
        /// Gets a value indicating whether this Solution instance is new or not.
        /// </summary>
        /// <value>
        /// The is new.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public bool IsNew
        {
            get
            {
                return !SolutionId.HasValue;
            }
        }

        /// <summary>
        /// Gets the related name of the actual database table.
        /// </summary>
        /// <value>
        /// The table name.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string TableName
        {
            get
            {
                return EntityMapper.GetDbEntityName(EntityName);
            }
        }

        /// <summary>
        /// Gets the related name of the actual database schema.
        /// </summary>
        /// <value>
        /// The table schema.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string TableSchema
        {
            get
            {
                return "dbo";
            }
        }

        /// <summary>
        /// Gets the primary key default value.
        /// </summary>
        /// <value>
        /// The p k default value.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string PKDefaultValue
        {
            get
            {
                return "";
            }
        }

        /// <summary>
        /// Gets or sets the storage handler from the default configured source unless otherwise set.
        /// </summary>
        /// <value>
        /// The storage handler.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public KnightsTour.CoreLibrary.IStorageHandler StorageHandler
        {
            get
            {
                if (storageHandler == null)
                {
                    storageHandler = StorageProvider.GetHandler();
                }
                return storageHandler;
            }
            set
            {
                storageHandler = value;
            }
        }

        /// <summary>
        /// The configured label or label collection configured, or the PK number or (new) if a new record.
        /// </summary>
        /// <value>
        /// The instance label.
        /// </value>
        public string InstanceLabel
        {
            get
            {
                if (IsNew)
                {
                    return "(New)";
                }
                else
                {
                    return SolutionId.Value.ToString();
                }
            }
        }

        /// <summary>
        /// Returns the SolutionStartDate formatted with either the projects default date format or the custom property date format if defined.
        /// </summary>
        /// <value>
        /// The solution start date formatted.
        /// </value>
        public string SolutionStartDateFormatted
        {
            get
            {
                return SolutionStartDate.ToString("yyyy-MM-dd");
            }
        }

        /// <summary>
        /// Returns the SolutionDuration formatted as a currency.
        /// </summary>
        /// <value>
        /// The solution duration as currency.
        /// </value>
        public string SolutionDurationAsCurrency
        {
            get
            {
                if (SolutionDuration.HasValue)
                {
                    return SolutionDuration.Value.ToString("c");
                }
                else
                {
                    return string.Empty;
                }
            }
        }
        #endregion Properties

        #region Methods

        /// <summary>
        /// Validates the object using the defined field validators.
        /// </summary>
        public KnightsTour.CoreLibrary.IActionResponse Validate()
        {
            return KnightsTour.Context.ValidationHandler.ValidateEntity<int?>(Enumerations.EntityName.Solution.ToString(), TableSchema, this, IsNew);
        }

        /// <summary>
        /// Sets the original properties (required for object state checking).
        /// </summary>
        public void SetOriginalProperties()
        {
            InitialState = new SolutionLite(this);
        }

        /// <summary>
        /// Serializes the object based on the defined serialization strategy defined in the <seealso cref="AuditHandler" />.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public string SerializeObject()
        {
            string objectSerialization = string.Empty;
            switch (KnightsTour.Context.AuditHandler.SerializationStrategy)
            {
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.XML:
                    objectSerialization = KnightsTour.CoreLibrary.XMLAssistant.Serialize(ToDynamic());
                    break;
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.JSON:
                    objectSerialization = ToDynamic().ToString();
                    break;
                default:
                    throw new NotImplementedException($"{KnightsTour.Context.AuditHandler.SerializationStrategy.ToString()} serialization strategy not implemented.");
            }
            return objectSerialization;
        }

        /// <summary>
        /// Serializes the object differential based on the defined serialization strategy defined in the <seealso cref="AuditHandler" />.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public string SerializeDifferential()
        {
            string objectSerialization = string.Empty;
            switch (KnightsTour.Context.AuditHandler.SerializationStrategy)
            {
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.XML:
                    objectSerialization = KnightsTour.CoreLibrary.XMLAssistant.Serialize(ToDynamic(KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.ModifiedPropertiesOnly));
                    break;
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.JSON:
                    objectSerialization = ToDynamic(KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.ModifiedPropertiesOnly).ToString();
                    break;
                default:
                    throw new NotImplementedException($"{KnightsTour.Context.AuditHandler.SerializationStrategy.ToString()} serialization strategy not implemented.");
            }
            return objectSerialization;
        }

        /// <summary>
        /// Creates a dynamic object based on the passed <seealso cref="KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy" />.
        /// </summary>
        /// <param name="strategy">The strategy.</param>
        /// <returns>dynamic.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public dynamic ToDynamic(KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy strategy = KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.AllProperties)
        {
            dynamic dynamicSolution = new JObject();
            switch (strategy)
            {
                case KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.AllProperties:
                    dynamicSolution.SolutionId = SolutionId;
                    dynamicSolution.PuzzleId = PuzzleId;
                    dynamicSolution.MemberId = MemberId;
                    dynamicSolution.SolutionStartDate = SolutionStartDate;
                    dynamicSolution.SolutionDuration = SolutionDuration;
                    dynamicSolution.Path = Path;
                    dynamicSolution.Note = Note;
                    dynamicSolution.Code = Code;
                    dynamicSolution.NonMemberName = NonMemberName;
                    dynamicSolution.NonMemberIp = NonMemberIp;
                    break;
                case KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.AllPropertiesWithOriginals:
                    dynamicSolution.SolutionId = SolutionId;
                    dynamicSolution.SolutionId_Original = InitialState.SolutionId;
                    dynamicSolution.PuzzleId = PuzzleId;
                    dynamicSolution.PuzzleId_Original = InitialState.PuzzleId;
                    dynamicSolution.MemberId = MemberId;
                    dynamicSolution.MemberId_Original = InitialState.MemberId;
                    dynamicSolution.SolutionStartDate = SolutionStartDate;
                    dynamicSolution.SolutionStartDate_Original = InitialState.SolutionStartDate;
                    dynamicSolution.SolutionDuration = SolutionDuration;
                    dynamicSolution.SolutionDuration_Original = InitialState.SolutionDuration;
                    dynamicSolution.Path = Path;
                    dynamicSolution.Path_Original = InitialState.Path;
                    dynamicSolution.Note = Note;
                    dynamicSolution.Note_Original = InitialState.Note;
                    dynamicSolution.Code = Code;
                    dynamicSolution.Code_Original = InitialState.Code;
                    dynamicSolution.NonMemberName = NonMemberName;
                    dynamicSolution.NonMemberName_Original = InitialState.NonMemberName;
                    dynamicSolution.NonMemberIp = NonMemberIp;
                    dynamicSolution.NonMemberIp_Original = InitialState.NonMemberIp;
                    break;
                case KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.ModifiedPropertiesOnly:
                    if (IsModified(Enumerations.SolutionProperty.SolutionId))
                    {
                        dynamicSolution.SolutionId = SolutionId;
                        dynamicSolution.SolutionId_Original = InitialState.SolutionId;
                    }
                    if (IsModified(Enumerations.SolutionProperty.PuzzleId))
                    {
                        dynamicSolution.PuzzleId = PuzzleId;
                        dynamicSolution.PuzzleId_Original = InitialState.PuzzleId;
                    }
                    if (IsModified(Enumerations.SolutionProperty.MemberId))
                    {
                        dynamicSolution.MemberId = MemberId;
                        dynamicSolution.MemberId_Original = InitialState.MemberId;
                    }
                    if (IsModified(Enumerations.SolutionProperty.SolutionStartDate))
                    {
                        dynamicSolution.SolutionStartDate = SolutionStartDate;
                        dynamicSolution.SolutionStartDate_Original = InitialState.SolutionStartDate;
                    }
                    if (IsModified(Enumerations.SolutionProperty.SolutionDuration))
                    {
                        dynamicSolution.SolutionDuration = SolutionDuration;
                        dynamicSolution.SolutionDuration_Original = InitialState.SolutionDuration;
                    }
                    if (IsModified(Enumerations.SolutionProperty.Path))
                    {
                        dynamicSolution.Path = Path;
                        dynamicSolution.Path_Original = InitialState.Path;
                    }
                    if (IsModified(Enumerations.SolutionProperty.Note))
                    {
                        dynamicSolution.Note = Note;
                        dynamicSolution.Note_Original = InitialState.Note;
                    }
                    if (IsModified(Enumerations.SolutionProperty.Code))
                    {
                        dynamicSolution.Code = Code;
                        dynamicSolution.Code_Original = InitialState.Code;
                    }
                    if (IsModified(Enumerations.SolutionProperty.NonMemberName))
                    {
                        dynamicSolution.NonMemberName = NonMemberName;
                        dynamicSolution.NonMemberName_Original = InitialState.NonMemberName;
                    }
                    if (IsModified(Enumerations.SolutionProperty.NonMemberIp))
                    {
                        dynamicSolution.NonMemberIp = NonMemberIp;
                        dynamicSolution.NonMemberIp_Original = InitialState.NonMemberIp;
                    }
                    break;
                default:
                    throw new NotImplementedException($"{strategy.ToString()} strategy not implemented.");
            }
            return dynamicSolution;
        }

        /// <summary>
        /// Determines whether this instance is modified.
        /// </summary>
        /// <returns><c>true</c> if this instance is modified; otherwise, <c>false</c>.</returns>
        public bool IsModified()
        {
            foreach (Enumerations.SolutionProperty property in Enum.GetValues(typeof(Enumerations.SolutionProperty)))
            {
                if (property != Enumerations.SolutionProperty.All)
                {
                    if (IsModified(property))
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Determines whether the specified property is modified.
        /// </summary>
        /// <param name="property">The Solution property to test.</param>
        /// <returns><c>true</c> if the specified property is modified; otherwise, <c>false</c>.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public bool IsModified(Enumerations.SolutionProperty property)
        {
            switch (property)
            {
                case Enumerations.SolutionProperty.SolutionId:
                    return SolutionId != InitialState.SolutionId;
                case Enumerations.SolutionProperty.PuzzleId:
                    return PuzzleId != InitialState.PuzzleId;
                case Enumerations.SolutionProperty.MemberId:
                    return MemberId != InitialState.MemberId;
                case Enumerations.SolutionProperty.SolutionStartDate:
                    return SolutionStartDate != InitialState.SolutionStartDate;
                case Enumerations.SolutionProperty.SolutionDuration:
                    return SolutionDuration != InitialState.SolutionDuration;
                case Enumerations.SolutionProperty.Path:
                    return Path != InitialState.Path;
                case Enumerations.SolutionProperty.Note:
                    return Note != InitialState.Note;
                case Enumerations.SolutionProperty.Code:
                    return Code != InitialState.Code;
                case Enumerations.SolutionProperty.NonMemberName:
                    return NonMemberName != InitialState.NonMemberName;
                case Enumerations.SolutionProperty.NonMemberIp:
                    return NonMemberIp != InitialState.NonMemberIp;
                case Enumerations.SolutionProperty.All:
                    return IsModified();
                default:
                    throw new NotImplementedException($"{property.ToString()} property not implemented.");
            }
        }

        /// <summary>
        /// Initializes the properties of this class.
        /// </summary>
        public void Initialize()
        {
            MethodWrappers.CommonWrapper(baseInitialize, KnightsTour.CoreLibrary.Enumerations.ApplicationTier.Business, new object[] { });
        }

        /// <summary>
        /// The privately wrapped implementation of the Initialize method.
        /// </summary>
        /// <param name="arguments">The generic arguments sent to this method from the public wrapped call.</param>
        private void baseInitialize(object[] arguments)
        {
            InitialState = new SolutionLite();

            // Base Entity properties.
            EntityName = Enumerations.EntityName.Solution.ToString();
            PrimaryKey = Enumerations.SolutionProperty.SolutionId;
            PrimaryKeyField = EntityMapper.GetPropertyName(PrimaryKey);
            PrimaryKeyFieldFormatted = "SolutionId";
            PKInsertConfiguration = KnightsTour.CoreLibrary.Enumerations.InsertPKRule.AutoIncrement;

            // Table properties.
            SolutionId = null;
            PuzzleId = null;
            MemberId = null;
            SolutionStartDate = DateTime.Now;
            SolutionDuration = null;
            Path = string.Empty;
            Note = string.Empty;
            Code = string.Empty;
            NonMemberName = string.Empty;
            NonMemberIp = string.Empty;
        }

        /// <summary>
        /// Clones this instance.
        /// </summary>
        /// <returns>A cloned Solution.</returns>
        public Solution Clone()
        {
            Solution solution = new Solution();

            solution.SolutionId = SolutionId;
            solution.PuzzleId = PuzzleId;
            solution.MemberId = MemberId;
            solution.SolutionStartDate = SolutionStartDate;
            solution.SolutionDuration = SolutionDuration;
            solution.Path = Path;
            solution.Note = Note;
            solution.Code = Code;
            solution.NonMemberName = NonMemberName;
            solution.NonMemberIp = NonMemberIp;

            return solution;
        }

        /// <summary>
        /// Returns a readable summary of this object.
        /// </summary>
        /// <returns>System.String.</returns>
        public override string ToString()
        {
            return SerializeObject();
        }

        /// <summary>
        /// Converts a non computed property to a regular property.
        /// </summary>
        /// <param name="property">The non computed Solution property to convert.</param>
        /// <returns>The regular related property value.</returns>
        /// <exception cref="ArgumentException"></exception>
        private Enumerations.SolutionProperty ConvertProperty(Enumerations.SolutionPropertyNotComputed property)
        {
            foreach (Enumerations.SolutionProperty regularProperty in Enum.GetValues(typeof(Enumerations.SolutionProperty)))
            {
                if (regularProperty.ToString() == property.ToString())
                {
                    return regularProperty;
                }
            }

            throw new Exception($"Unable to convert non computed property '{property.ToString()}' of type 'SolutionPropertyNotComputed' to a 'SolutionProperty'.");
        }

        /// <summary>
        /// Returns the underlying object value.
        /// </summary>
        /// <param name="property">The not computed Solution property to test.</param>
        /// <returns>The dynamic underlying property value.</returns>
        /// <exception cref="ArgumentException"></exception>
        public dynamic GetDBValue(Enumerations.SolutionPropertyNotComputed property)
        {
            return GetDBValue(ConvertProperty(property));
        }

        /// <summary>
        /// Returns the underlying object data type for this language.
        /// </summary>
        /// <param name="property">The non computed Solution property to test.</param>
        /// <returns>The data type for this property.</returns>
        /// <exception cref="ArgumentException"></exception>
        private string GetDataType(Enumerations.SolutionPropertyNotComputed property)
        {
            return GetDataType(ConvertProperty(property));
        }

        /// <summary>
        /// Returns the underlying object value.
        /// </summary>
        /// <param name="property">The Solution property to test.</param>
        /// <returns>The dynamic underlying property value.</returns>
        /// <exception cref="ArgumentException"></exception>
        public dynamic GetDBValue(Enumerations.SolutionProperty property)
        {
            switch (property)
            {
                case Enumerations.SolutionProperty.SolutionId:
                    if (SolutionId == null) return DBNull.Value;
                    return SolutionId;
                case Enumerations.SolutionProperty.PuzzleId:
                    if (PuzzleId == null) return DBNull.Value;
                    return PuzzleId;
                case Enumerations.SolutionProperty.MemberId:
                    if (MemberId == null) return DBNull.Value;
                    return MemberId;
                case Enumerations.SolutionProperty.SolutionStartDate:
                    return SolutionStartDate;
                case Enumerations.SolutionProperty.SolutionDuration:
                    if (SolutionDuration == null) return DBNull.Value;
                    return SolutionDuration;
                case Enumerations.SolutionProperty.Path:
                    if (Path == null) return DBNull.Value;
                    return Path;
                case Enumerations.SolutionProperty.Note:
                    if (Note == null) return DBNull.Value;
                    return Note;
                case Enumerations.SolutionProperty.Code:
                    if (Code == null) return DBNull.Value;
                    return Code;
                case Enumerations.SolutionProperty.NonMemberName:
                    if (NonMemberName == null) return DBNull.Value;
                    return NonMemberName;
                case Enumerations.SolutionProperty.NonMemberIp:
                    if (NonMemberIp == null) return DBNull.Value;
                    return NonMemberIp;
                default:
                    throw new ArgumentException($"Property {property.ToString()} unhandled.");
            }
        }

        /// <summary>
        /// Returns the underlying object data type for this language.
        /// </summary>
        /// <param name="property">The Solution property to test.</param>
        /// <returns>The data type for this property.</returns>
        /// <exception cref="ArgumentException"></exception>
        private string GetDataType(Enumerations.SolutionProperty property)
        {
            switch (property)
            {
                case Enumerations.SolutionProperty.SolutionId:
                    return "int?";
                case Enumerations.SolutionProperty.PuzzleId:
                    return "int?";
                case Enumerations.SolutionProperty.MemberId:
                    return "int?";
                case Enumerations.SolutionProperty.SolutionStartDate:
                    return "DateTime";
                case Enumerations.SolutionProperty.SolutionDuration:
                    return "decimal?";
                case Enumerations.SolutionProperty.Path:
                    return "string";
                case Enumerations.SolutionProperty.Note:
                    return "string";
                case Enumerations.SolutionProperty.Code:
                    return "string";
                case Enumerations.SolutionProperty.NonMemberName:
                    return "string";
                case Enumerations.SolutionProperty.NonMemberIp:
                    return "string";
                default:
                    throw new ArgumentException($"Property {property.ToString()} unhandled.");
            }
        }

        /// <summary>
        /// Sets the primary key.
        /// </summary>
        /// <param name="id">The Solutions primary key value.</param>
        public void SetPrimaryKey(int? id)
        {
            SolutionId = id;
            Id = id;
            SetOriginalProperties();
        }

        /// <summary>
        /// Updates the individual properties from the lite object.
        /// </summary>
        /// <param name="solutionLite">The SolutionLite source object.</param>
        public void UpdateFromLite(SolutionLite solutionLite)
        {
            // Do this first just to make sure.
            SetOriginalProperties();

            SolutionId = solutionLite.SolutionId;
            PuzzleId = solutionLite.PuzzleId;
            MemberId = solutionLite.MemberId;
            SolutionStartDate = solutionLite.SolutionStartDate;
            SolutionDuration = solutionLite.SolutionDuration;
            Path = solutionLite.Path;
            Note = solutionLite.Note;
            Code = solutionLite.Code;
            NonMemberName = solutionLite.NonMemberName;
            NonMemberIp = solutionLite.NonMemberIp;
        }

        /// <summary>
        /// Returns the stored procedure name (of a given type) or this class.
        /// </summary>
        /// <param name="type">The stored procedure type.</param>
        public string GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType type)
        {
            string storedProcedureName = string.Empty;

            // The Stored procedure prefix (as defined on the model) is optional, deal with that first.
            if (!string.IsNullOrEmpty(Schema.Model.StoredProcedurePrefix))
            {
                storedProcedureName += $"{Schema.Model.StoredProcedurePrefix}_";
            }

            // Model prefix (optional), entity name then finally the type.
            if (string.IsNullOrEmpty(TableSchema))
            {
                return $"{storedProcedureName}{TextAssistant.PascalCase(OnlyAlpha(TableName, true))}_{type}";
            }
            else
            {
                return $"{TableSchema}.{storedProcedureName}{TextAssistant.PascalCase(OnlyAlpha(TableName, true))}_{type}";
            }
        }
        #endregion Methods

    } // Class
} // Namespace
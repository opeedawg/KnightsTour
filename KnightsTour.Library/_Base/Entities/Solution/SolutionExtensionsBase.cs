// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 26, 2023 9:31:46 AM
// File             : SolutionExtensionsBase.cs
// ************************************************************************

using System.Collections.Generic;

namespace KnightsTour
{
    /// <summary>
    /// The SolutionLiteExtensionsBase class where common and useful extensions are placed.
    /// Generated On: October 26, 2023 at 9:31:46 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// This class should NOT be modified - any extensions or overrides should be completed in the extended extensions class provided.
    /// </remarks>
    public static partial class Extensions
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions"/> class.
        /// Converts a <seealso cref="Solution" /> to its <seealso cref="SolutionLite" /> representation.
        /// </summary>
        /// <param name="solution">The solution to convert.</param>
        /// <returns>A lite representation of the Solution entity.</returns>
        public static SolutionLite ToLite(this Solution solution)
        {
            if (solution != null)
            {
                return new SolutionLite(solution);
            }
            else
            {
                return null;
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions"/> class.
        /// Converts a collection of <seealso cref="Solution" /> to their <seealso cref="SolutionLite" /> representations.
        /// </summary>
        /// <param name="solutions">The solution collection to convert.</param>
        /// <returns>A collection of lite representations of the Solution entity collection.</returns>
        public static IEnumerable<SolutionLite> ToLite(this IEnumerable<Solution> solutions)
        {
            if (solutions != null)
            {
                List<SolutionLite> liteSolutions = new List<SolutionLite>();
                foreach (Solution solution in solutions)
                {
                    liteSolutions.Add(solution.ToLite());
                }
                return liteSolutions;
            }
            else
            {
                return null;
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions"/> class.
        /// Converts a <seealso cref="SolutionLite" /> to its <seealso cref="Solution" /> representation.
        /// </summary>
        /// <param name="solutionLite">The solution lite entity to convert.</param>
        /// <returns>A full representation of the SolutionLite entity.</returns>
        public static Solution ToFull(this SolutionLite solutionLite)
        {
            if (solutionLite != null)
            {
                return new Solution(solutionLite);
            }
            else
            {
                return null;
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions"/> class.
        /// Converts a collection of <seealso cref="SolutionLite" /> to their <seealso cref="Solution" /> representations.
        /// </summary>
        /// <param name="solutionLites">The lite solution collection to convert.</param>
        /// <returns>A collection of full representations of the SolutionLite entity collection.</returns>
        public static IEnumerable<Solution> ToFull(this IEnumerable<SolutionLite> solutionLites)
        {
            if (solutionLites != null)
            {
                List<Solution> solutions = new List<Solution>();
                foreach (SolutionLite solutionLite in solutionLites)
                {
                    solutions.Add(solutionLite.ToFull());
                }
                return solutions;
            }
            else
            {
                return null;
            }
        }
        #endregion Constructor(s)

    } // Class
} // Namespace
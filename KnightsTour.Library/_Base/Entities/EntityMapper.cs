// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 14, 2023 11:18:11 AM
// File             : EntityMapper.cs
// ************************************************************************

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Serialization;

using Newtonsoft.Json;

namespace KnightsTour
{
    /// <summary>
    /// Maps the enties and entities properties to safe names and back again.
    /// Generated On: October 14, 2023 at 11:18:11 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// </remarks>
    public static class EntityMapper
    {
        #region Declarations
        static ConcurrentDictionary<Enumerations.EntityName, string> entityNameMapper = null; // A mapper for entity names used for lazy loading.
        static ConcurrentDictionary<string, string> entityNameTransformation = null; // A mapper for safe entity names to their original.
        static ConcurrentDictionary<Enumerations.BoardProperty, string> boardPropertyMapper = null; // Mapper for Board properties used for lazy loading.
        static ConcurrentDictionary<Enumerations.DifficultyLevelProperty, string> difficultyLevelPropertyMapper = null; // Mapper for DifficultyLevel properties used for lazy loading.
        static ConcurrentDictionary<Enumerations.EventHistoryProperty, string> eventHistoryPropertyMapper = null; // Mapper for EventHistory properties used for lazy loading.
        static ConcurrentDictionary<Enumerations.EventTypeProperty, string> eventTypePropertyMapper = null; // Mapper for EventType properties used for lazy loading.
        static ConcurrentDictionary<Enumerations.MemberProperty, string> memberPropertyMapper = null; // Mapper for Member properties used for lazy loading.
        static ConcurrentDictionary<Enumerations.PuzzleProperty, string> puzzlePropertyMapper = null; // Mapper for Puzzle properties used for lazy loading.
        static ConcurrentDictionary<Enumerations.SolutionProperty, string> solutionPropertyMapper = null; // Mapper for Solution properties used for lazy loading.
        static List<Enumerations.BoardProperty> boardFKs = null; // A list of Board foreign keys used for lazy loading.
        static List<Enumerations.DifficultyLevelProperty> difficultyLevelFKs = null; // A list of DifficultyLevel foreign keys used for lazy loading.
        static List<Enumerations.EventHistoryProperty> eventHistoryFKs = null; // A list of EventHistory foreign keys used for lazy loading.
        static List<Enumerations.EventTypeProperty> eventTypeFKs = null; // A list of EventType foreign keys used for lazy loading.
        static List<Enumerations.MemberProperty> memberFKs = null; // A list of Member foreign keys used for lazy loading.
        static List<Enumerations.PuzzleProperty> puzzleFKs = null; // A list of Puzzle foreign keys used for lazy loading.
        static List<Enumerations.SolutionProperty> solutionFKs = null; // A list of Solution foreign keys used for lazy loading.
        static ConcurrentDictionary<string, string> synonymTransformation = null; // A transformation for safe synonym enumerations to their declaration.
        static ConcurrentDictionary<string, string> viewTransformation = null; // A transformation for safe view enumerations to their database name equivalent.
        static ConcurrentDictionary<string, string> storedProcedureTransformation = null; // A transformation for safe stored procedure enumerations to their declaration.
        static ConcurrentDictionary<string, string> sequenceMapper = null; // A mapper for from class names to their declared (or default) sequence name.
        #endregion Declarations

        #region Properties

        /// <summary>
        /// Manages the entity mapper.
        /// </summary>
        /// <value>
        /// The entity name mapper.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        static ConcurrentDictionary<Enumerations.EntityName, string> EntityNameMapper
        {
            get
            {
                if (entityNameMapper == null)
                {
                    entityNameMapper = new ConcurrentDictionary<Enumerations.EntityName, string>();
                    entityNameMapper.GetOrAdd(Enumerations.EntityName.Board, "Board");
                    entityNameMapper.GetOrAdd(Enumerations.EntityName.DifficultyLevel, "DifficultyLevel");
                    entityNameMapper.GetOrAdd(Enumerations.EntityName.EventHistory, "EventHistory");
                    entityNameMapper.GetOrAdd(Enumerations.EntityName.EventType, "EventType");
                    entityNameMapper.GetOrAdd(Enumerations.EntityName.Member, "Member");
                    entityNameMapper.GetOrAdd(Enumerations.EntityName.Puzzle, "Puzzle");
                    entityNameMapper.GetOrAdd(Enumerations.EntityName.Solution, "Solution");
                }
                return entityNameMapper;
            }
        }

        /// <summary>
        /// Transforms safe entity names to their original name.
        /// </summary>
        /// <value>
        /// The entity name transformation.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public static ConcurrentDictionary<string, string> EntityNameTransformation
        {
            get
            {
                if (entityNameTransformation == null)
                {
                    // Maps actual entity names (keyword safe) to original table names (possibly unsafe).
                    entityNameTransformation = new ConcurrentDictionary<string, string>();
                    entityNameTransformation.GetOrAdd(Enumerations.EntityName.Board.ToString(), "Board");
                    entityNameTransformation.GetOrAdd(Enumerations.EntityName.DifficultyLevel.ToString(), "DifficultyLevel");
                    entityNameTransformation.GetOrAdd(Enumerations.EntityName.EventHistory.ToString(), "EventHistory");
                    entityNameTransformation.GetOrAdd(Enumerations.EntityName.EventType.ToString(), "EventType");
                    entityNameTransformation.GetOrAdd(Enumerations.EntityName.Member.ToString(), "Member");
                    entityNameTransformation.GetOrAdd(Enumerations.EntityName.Puzzle.ToString(), "Puzzle");
                    entityNameTransformation.GetOrAdd(Enumerations.EntityName.Solution.ToString(), "Solution");
                }
                return entityNameTransformation;
            }
        }

        /// <summary>
        /// Transforms safe synonym enumerations to their original name.
        /// </summary>
        /// <value>
        /// The synonym transformation.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public static ConcurrentDictionary<string, string> SynonymTransformation
        {
            get
            {
                if (synonymTransformation == null)
                {
                    // Maps actual synonym enumeration (safe) to declared name (possibly unsafe).
                    synonymTransformation = new ConcurrentDictionary<string, string>();
                }
                return synonymTransformation;
            }
        }

        /// <summary>
        /// Transforms safe view enumerations to their original name.
        /// </summary>
        /// <value>
        /// The view transformation.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public static ConcurrentDictionary<string, string> ViewTransformation
        {
            get
            {
                if (viewTransformation == null)
                {
                    // Maps actual view enumeration (safe) to declared name (possibly unsafe).
                    viewTransformation = new ConcurrentDictionary<string, string>();
                    viewTransformation.GetOrAdd(Enumerations.View.DboVPuzzleOfTheDaySolution.ToString(), "dbo.V_PuzzleOfTheDaySolution");
                    viewTransformation.GetOrAdd(Enumerations.View.DboVPuzzleOfTheDay.ToString(), "dbo.V_PuzzleOfTheDay");
                    viewTransformation.GetOrAdd(Enumerations.View.DboVMemberSolution.ToString(), "dbo.V_MemberSolution");
                    viewTransformation.GetOrAdd(Enumerations.View.DboVSolutionRanking.ToString(), "dbo.V_SolutionRanking");
                    viewTransformation.GetOrAdd(Enumerations.View.DboVDistinctBoardSizes.ToString(), "dbo.V_DistinctBoardSizes");
                    viewTransformation.GetOrAdd(Enumerations.View.DboVMemberStatistics.ToString(), "dbo.V_MemberStatistics");
                }
                return viewTransformation;
            }
        }

        /// <summary>
        /// Transforms safe stored proecured enumerations to their original name.
        /// </summary>
        /// <value>
        /// The stored procedure transformation.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public static ConcurrentDictionary<string, string> StoredProcedureTransformation
        {
            get
            {
                if (storedProcedureTransformation == null)
                {
                    // Maps actual stored procedure enumeration (safe) to declared name (possibly unsafe).
                    storedProcedureTransformation = new ConcurrentDictionary<string, string>();
                    storedProcedureTransformation.GetOrAdd(Enumerations.StoredProcedure.DbospAlterdiagram.ToString(), "dbo.sp_alterdiagram");
                    storedProcedureTransformation.GetOrAdd(Enumerations.StoredProcedure.DbospCreatediagram.ToString(), "dbo.sp_creatediagram");
                    storedProcedureTransformation.GetOrAdd(Enumerations.StoredProcedure.DbospDropdiagram.ToString(), "dbo.sp_dropdiagram");
                    storedProcedureTransformation.GetOrAdd(Enumerations.StoredProcedure.DbospHelpdiagramdefinition.ToString(), "dbo.sp_helpdiagramdefinition");
                    storedProcedureTransformation.GetOrAdd(Enumerations.StoredProcedure.DbospHelpdiagrams.ToString(), "dbo.sp_helpdiagrams");
                    storedProcedureTransformation.GetOrAdd(Enumerations.StoredProcedure.DbospRenamediagram.ToString(), "dbo.sp_renamediagram");
                    storedProcedureTransformation.GetOrAdd(Enumerations.StoredProcedure.DbospUpgraddiagrams.ToString(), "dbo.sp_upgraddiagrams");
                }
                return storedProcedureTransformation;
            }
        }

        /// <summary>
        /// Manages the Board property mapper.
        /// </summary>
        /// <value>
        /// The board property mapper.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        static ConcurrentDictionary<Enumerations.BoardProperty, string> BoardPropertyMapper
        {
            get
            {
                if (boardPropertyMapper == null)
                {
                    boardPropertyMapper = new ConcurrentDictionary<Enumerations.BoardProperty, string>();
                    boardPropertyMapper.GetOrAdd(Enumerations.BoardProperty.BoardId, "BoardId");
                    boardPropertyMapper.GetOrAdd(Enumerations.BoardProperty.BoardCode, "BoardCode");
                    boardPropertyMapper.GetOrAdd(Enumerations.BoardProperty.RowDimension, "RowDimension");
                    boardPropertyMapper.GetOrAdd(Enumerations.BoardProperty.ColDimension, "ColDimension");
                    boardPropertyMapper.GetOrAdd(Enumerations.BoardProperty.DiscoveryDate, "DiscoveryDate");
                    boardPropertyMapper.GetOrAdd(Enumerations.BoardProperty.Author, "Author");
                    boardPropertyMapper.GetOrAdd(Enumerations.BoardProperty.DiscoveryIterationCount, "DiscoveryIterationCount");
                    boardPropertyMapper.GetOrAdd(Enumerations.BoardProperty.DiscoveryRandomness, "DiscoveryRandomness");
                    boardPropertyMapper.GetOrAdd(Enumerations.BoardProperty.Path, "Path");
                    boardPropertyMapper.GetOrAdd(Enumerations.BoardProperty.SourceBoardId, "SourceBoardId");
                }
                return boardPropertyMapper;
            }
        }

        /// <summary>
        /// Manages the DifficultyLevel property mapper.
        /// </summary>
        /// <value>
        /// The difficulty level property mapper.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        static ConcurrentDictionary<Enumerations.DifficultyLevelProperty, string> DifficultyLevelPropertyMapper
        {
            get
            {
                if (difficultyLevelPropertyMapper == null)
                {
                    difficultyLevelPropertyMapper = new ConcurrentDictionary<Enumerations.DifficultyLevelProperty, string>();
                    difficultyLevelPropertyMapper.GetOrAdd(Enumerations.DifficultyLevelProperty.DifficultyLevelId, "DifficultyLevelId");
                    difficultyLevelPropertyMapper.GetOrAdd(Enumerations.DifficultyLevelProperty.Name, "Name");
                    difficultyLevelPropertyMapper.GetOrAdd(Enumerations.DifficultyLevelProperty.Description, "Description");
                    difficultyLevelPropertyMapper.GetOrAdd(Enumerations.DifficultyLevelProperty.MaximumGap, "MaximumGap");
                    difficultyLevelPropertyMapper.GetOrAdd(Enumerations.DifficultyLevelProperty.PercentVisibility, "PercentVisibility");
                    difficultyLevelPropertyMapper.GetOrAdd(Enumerations.DifficultyLevelProperty.HighlightClosestEnabled, "HighlightClosestEnabled");
                    difficultyLevelPropertyMapper.GetOrAdd(Enumerations.DifficultyLevelProperty.DuplicateCheckingEnabled, "DuplicateCheckingEnabled");
                    difficultyLevelPropertyMapper.GetOrAdd(Enumerations.DifficultyLevelProperty.GuessFilterEnabled, "GuessFilterEnabled");
                    difficultyLevelPropertyMapper.GetOrAdd(Enumerations.DifficultyLevelProperty.BadLinkEnabled, "BadLinkEnabled");
                    difficultyLevelPropertyMapper.GetOrAdd(Enumerations.DifficultyLevelProperty.MaximumDimension, "MaximumDimension");
                    difficultyLevelPropertyMapper.GetOrAdd(Enumerations.DifficultyLevelProperty.MinimumDimension, "MinimumDimension");
                }
                return difficultyLevelPropertyMapper;
            }
        }

        /// <summary>
        /// Manages the EventHistory property mapper.
        /// </summary>
        /// <value>
        /// The event history property mapper.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        static ConcurrentDictionary<Enumerations.EventHistoryProperty, string> EventHistoryPropertyMapper
        {
            get
            {
                if (eventHistoryPropertyMapper == null)
                {
                    eventHistoryPropertyMapper = new ConcurrentDictionary<Enumerations.EventHistoryProperty, string>();
                    eventHistoryPropertyMapper.GetOrAdd(Enumerations.EventHistoryProperty.EventHistoryId, "EventHistoryId");
                    eventHistoryPropertyMapper.GetOrAdd(Enumerations.EventHistoryProperty.EventTypeId, "EventTypeId");
                    eventHistoryPropertyMapper.GetOrAdd(Enumerations.EventHistoryProperty.EventDate, "EventDate");
                    eventHistoryPropertyMapper.GetOrAdd(Enumerations.EventHistoryProperty.SourceInternetAddress, "SourceInternetAddress");
                    eventHistoryPropertyMapper.GetOrAdd(Enumerations.EventHistoryProperty.Country, "Country");
                    eventHistoryPropertyMapper.GetOrAdd(Enumerations.EventHistoryProperty.Region, "Region");
                    eventHistoryPropertyMapper.GetOrAdd(Enumerations.EventHistoryProperty.City, "City");
                    eventHistoryPropertyMapper.GetOrAdd(Enumerations.EventHistoryProperty.ZipPostal, "ZipPostal");
                    eventHistoryPropertyMapper.GetOrAdd(Enumerations.EventHistoryProperty.Context, "Context");
                    eventHistoryPropertyMapper.GetOrAdd(Enumerations.EventHistoryProperty.MemberId, "MemberId");
                }
                return eventHistoryPropertyMapper;
            }
        }

        /// <summary>
        /// Manages the EventType property mapper.
        /// </summary>
        /// <value>
        /// The event type property mapper.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        static ConcurrentDictionary<Enumerations.EventTypeProperty, string> EventTypePropertyMapper
        {
            get
            {
                if (eventTypePropertyMapper == null)
                {
                    eventTypePropertyMapper = new ConcurrentDictionary<Enumerations.EventTypeProperty, string>();
                    eventTypePropertyMapper.GetOrAdd(Enumerations.EventTypeProperty.EventTypeId, "EventTypeId");
                    eventTypePropertyMapper.GetOrAdd(Enumerations.EventTypeProperty.Name, "Name");
                }
                return eventTypePropertyMapper;
            }
        }

        /// <summary>
        /// Manages the Member property mapper.
        /// </summary>
        /// <value>
        /// The member property mapper.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        static ConcurrentDictionary<Enumerations.MemberProperty, string> MemberPropertyMapper
        {
            get
            {
                if (memberPropertyMapper == null)
                {
                    memberPropertyMapper = new ConcurrentDictionary<Enumerations.MemberProperty, string>();
                    memberPropertyMapper.GetOrAdd(Enumerations.MemberProperty.MemberId, "MemberId");
                    memberPropertyMapper.GetOrAdd(Enumerations.MemberProperty.CreateDate, "CreateDate");
                    memberPropertyMapper.GetOrAdd(Enumerations.MemberProperty.EmailAddress, "EmailAddress");
                    memberPropertyMapper.GetOrAdd(Enumerations.MemberProperty.ConfirmationDate, "ConfirmationDate");
                    memberPropertyMapper.GetOrAdd(Enumerations.MemberProperty.DisplayName, "DisplayName");
                    memberPropertyMapper.GetOrAdd(Enumerations.MemberProperty.Password, "Password");
                    memberPropertyMapper.GetOrAdd(Enumerations.MemberProperty.UserInitials, "UserInitials");
                    memberPropertyMapper.GetOrAdd(Enumerations.MemberProperty.Code, "Code");
                    memberPropertyMapper.GetOrAdd(Enumerations.MemberProperty.IsAdministrator, "IsAdministrator");
                }
                return memberPropertyMapper;
            }
        }

        /// <summary>
        /// Manages the Puzzle property mapper.
        /// </summary>
        /// <value>
        /// The puzzle property mapper.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        static ConcurrentDictionary<Enumerations.PuzzleProperty, string> PuzzlePropertyMapper
        {
            get
            {
                if (puzzlePropertyMapper == null)
                {
                    puzzlePropertyMapper = new ConcurrentDictionary<Enumerations.PuzzleProperty, string>();
                    puzzlePropertyMapper.GetOrAdd(Enumerations.PuzzleProperty.PuzzleId, "PuzzleId");
                    puzzlePropertyMapper.GetOrAdd(Enumerations.PuzzleProperty.PuzzleCode, "PuzzleCode");
                    puzzlePropertyMapper.GetOrAdd(Enumerations.PuzzleProperty.BoardId, "BoardId");
                    puzzlePropertyMapper.GetOrAdd(Enumerations.PuzzleProperty.DifficultyLevelId, "DifficultyLevelId");
                    puzzlePropertyMapper.GetOrAdd(Enumerations.PuzzleProperty.Path, "Path");
                    puzzlePropertyMapper.GetOrAdd(Enumerations.PuzzleProperty.PuzzleOfTheDayDate, "PuzzleOfTheDayDate");
                }
                return puzzlePropertyMapper;
            }
        }

        /// <summary>
        /// Manages the Solution property mapper.
        /// </summary>
        /// <value>
        /// The solution property mapper.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        static ConcurrentDictionary<Enumerations.SolutionProperty, string> SolutionPropertyMapper
        {
            get
            {
                if (solutionPropertyMapper == null)
                {
                    solutionPropertyMapper = new ConcurrentDictionary<Enumerations.SolutionProperty, string>();
                    solutionPropertyMapper.GetOrAdd(Enumerations.SolutionProperty.SolutionId, "SolutionId");
                    solutionPropertyMapper.GetOrAdd(Enumerations.SolutionProperty.PuzzleId, "PuzzleId");
                    solutionPropertyMapper.GetOrAdd(Enumerations.SolutionProperty.MemberId, "MemberId");
                    solutionPropertyMapper.GetOrAdd(Enumerations.SolutionProperty.SolutionStartDate, "SolutionStartDate");
                    solutionPropertyMapper.GetOrAdd(Enumerations.SolutionProperty.SolutionDuration, "SolutionDuration");
                    solutionPropertyMapper.GetOrAdd(Enumerations.SolutionProperty.Path, "Path");
                    solutionPropertyMapper.GetOrAdd(Enumerations.SolutionProperty.Note, "Note");
                    solutionPropertyMapper.GetOrAdd(Enumerations.SolutionProperty.Code, "Code");
                    solutionPropertyMapper.GetOrAdd(Enumerations.SolutionProperty.NonMemberName, "NonMemberName");
                }
                return solutionPropertyMapper;
            }
        }

        /// <summary>
        /// A list of Foreign Key's in the Board table.
        /// </summary>
        /// <value>
        /// The board f ks.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        static List<Enumerations.BoardProperty> BoardFKs
        {
            get
            {
                if (boardFKs == null)
                {
                    boardFKs = new List<Enumerations.BoardProperty>
                    {
                        Enumerations.BoardProperty.SourceBoardId,
                    };
                }

                return boardFKs;
            }
        }

        /// <summary>
        /// A list of Foreign Key's in the DifficultyLevel table.
        /// </summary>
        /// <value>
        /// The difficulty level f ks.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        static List<Enumerations.DifficultyLevelProperty> DifficultyLevelFKs
        {
            get
            {
                if (difficultyLevelFKs == null)
                {
                    difficultyLevelFKs = new List<Enumerations.DifficultyLevelProperty>
                    {
                    };
                }

                return difficultyLevelFKs;
            }
        }

        /// <summary>
        /// A list of Foreign Key's in the EventHistory table.
        /// </summary>
        /// <value>
        /// The event history f ks.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        static List<Enumerations.EventHistoryProperty> EventHistoryFKs
        {
            get
            {
                if (eventHistoryFKs == null)
                {
                    eventHistoryFKs = new List<Enumerations.EventHistoryProperty>
                    {
                        Enumerations.EventHistoryProperty.EventTypeId,
                        Enumerations.EventHistoryProperty.MemberId,
                    };
                }

                return eventHistoryFKs;
            }
        }

        /// <summary>
        /// A list of Foreign Key's in the EventType table.
        /// </summary>
        /// <value>
        /// The event type f ks.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        static List<Enumerations.EventTypeProperty> EventTypeFKs
        {
            get
            {
                if (eventTypeFKs == null)
                {
                    eventTypeFKs = new List<Enumerations.EventTypeProperty>
                    {
                    };
                }

                return eventTypeFKs;
            }
        }

        /// <summary>
        /// A list of Foreign Key's in the Member table.
        /// </summary>
        /// <value>
        /// The member f ks.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        static List<Enumerations.MemberProperty> MemberFKs
        {
            get
            {
                if (memberFKs == null)
                {
                    memberFKs = new List<Enumerations.MemberProperty>
                    {
                    };
                }

                return memberFKs;
            }
        }

        /// <summary>
        /// A list of Foreign Key's in the Puzzle table.
        /// </summary>
        /// <value>
        /// The puzzle f ks.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        static List<Enumerations.PuzzleProperty> PuzzleFKs
        {
            get
            {
                if (puzzleFKs == null)
                {
                    puzzleFKs = new List<Enumerations.PuzzleProperty>
                    {
                        Enumerations.PuzzleProperty.BoardId,
                        Enumerations.PuzzleProperty.DifficultyLevelId,
                    };
                }

                return puzzleFKs;
            }
        }

        /// <summary>
        /// A list of Foreign Key's in the Solution table.
        /// </summary>
        /// <value>
        /// The solution f ks.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        static List<Enumerations.SolutionProperty> SolutionFKs
        {
            get
            {
                if (solutionFKs == null)
                {
                    solutionFKs = new List<Enumerations.SolutionProperty>
                    {
                        Enumerations.SolutionProperty.PuzzleId,
                        Enumerations.SolutionProperty.MemberId,
                    };
                }

                return solutionFKs;
            }
        }

        /// <summary>
        /// Maps a class name to the declared (or default) sequence name.
        /// </summary>
        /// <value>
        /// The sequence mapper.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public static ConcurrentDictionary<string, string> SequenceMapper
        {
            get
            {
                if (sequenceMapper == null)
                {
                    // Maps a class name to the declared (or default) sequence name.
                    sequenceMapper = new ConcurrentDictionary<string, string>();
                    sequenceMapper.GetOrAdd("Board", "Board_SEQ");
                    sequenceMapper.GetOrAdd("DifficultyLevel", "DifficultyLevel_SEQ");
                    sequenceMapper.GetOrAdd("EventHistory", "EventHistory_SEQ");
                    sequenceMapper.GetOrAdd("EventType", "EventType_SEQ");
                    sequenceMapper.GetOrAdd("Member", "Member_SEQ");
                    sequenceMapper.GetOrAdd("Puzzle", "Puzzle_SEQ");
                    sequenceMapper.GetOrAdd("Solution", "Solution_SEQ");
                }
                return sequenceMapper;
            }
        }
        #endregion Properties

        #region Methods

        /// <summary>
        /// Returns the actual (raw) entity name from the model based on the enumeration.
        /// </summary>
        /// <param name="entity">The enumerated entity name.</param>
        /// <returns>System.String: The raw name of the entity.</returns>
        public static string GetEntityName(Enumerations.EntityName entity)
        {
            if (EntityNameMapper.ContainsKey(entity))
            {
                return EntityNameMapper[entity];
            }
            else
            {
                return entity.ToString();
            }

        }

        /// <summary>
        /// Gets the enumerated value from the actual (raw) entity name (case insensitive).
        /// </summary>
        /// <param name="name">The raw entity name.</param>
        /// <returns>Enumerations.EntityName</returns>
        public static Enumerations.EntityName GetEntity(string name)
        {
            if (!string.IsNullOrEmpty(name))
            {
                if(EntityNameMapper.Any(x => x.Value.ToUpper() == name.ToUpper()))
                {
                    return EntityNameMapper.First(x => x.Value.ToUpper() == name.ToUpper()).Key;
                }
                else
                {
                    throw new Exception($"No entity found with name '{name}'.");
                }
            }
            else
            {
                throw new Exception($"Name cannot be null or empty.");
            }

        }

        /// <summary>
        /// Returns the database table name for the entity.
        /// </summary>
        /// <param name="entityName">The entity name.</param>
        /// <returns>System.String: the raw property name.</returns>
        public static string GetDbEntityName(string entityName)
        {
            // Perform a case invariant comparison.
            foreach (string key in EntityNameTransformation.Keys)
            {
                if (key.ToLower() == entityName.ToLower())
                {
                    return EntityNameTransformation[key];
                }
            }

            // If nothing is found, do the best we can.
            return entityName;
        }

        /// <summary>
        /// Gets the sequence name from a given entity name (case insensitive).
        /// </summary>
        /// <param name="entityName">The entity name.</param>
        /// <returns>The sequence name as a string.</returns>
        public static string GetSequenceName(string entityName)
        {
            if (!string.IsNullOrEmpty(entityName))
            {
                // Case insensitive comparison is important here.
                foreach (string key in SequenceMapper.Keys)
                {
                    if (key.ToUpper() == entityName.ToUpper())
                    {
                        return SequenceMapper[key];
                    }
                }
                throw new Exception($"No sequence found for entity '{entityName}'.");
            }
            else
            {
                throw new Exception($"Entity name cannot be null or empty.");
            }
        }

        /// <summary>
        /// Returns the original property name from the given enumerated <see cref="Board"/> property.
        /// </summary>
        /// <param name="entity">The enumerated Board propery.</param>
        /// <returns>System.String: the raw property name.</returns>
        public static string GetPropertyName(Enumerations.BoardProperty entity)
        {
            if (BoardPropertyMapper.ContainsKey(entity))
            {
                return BoardPropertyMapper[entity];
            }
            else
            {
                return entity.ToString();
            }
        }

        /// <summary>
        /// Returns the original property name from the given enumerated <see cref="Board"/> property.
        /// </summary>
        /// <param name="name">The raw Board propery name.</param>
        /// <returns>System.String: the raw property name.</returns>
        public static Enumerations.BoardProperty GetBoardProperty(string name)
        {
            if (BoardPropertyMapper.Values.Contains(name))
            {
                return BoardPropertyMapper.FirstOrDefault(x => x.Value == name).Key;
            }
            else
            {
                throw new Exception($"No Board property found with name {name}.");
            }

        }

        /// <summary>
        /// Returns the original property name from the given enumerated <see cref="DifficultyLevel"/> property.
        /// </summary>
        /// <param name="entity">The enumerated DifficultyLevel propery.</param>
        /// <returns>System.String: the raw property name.</returns>
        public static string GetPropertyName(Enumerations.DifficultyLevelProperty entity)
        {
            if (DifficultyLevelPropertyMapper.ContainsKey(entity))
            {
                return DifficultyLevelPropertyMapper[entity];
            }
            else
            {
                return entity.ToString();
            }
        }

        /// <summary>
        /// Returns the original property name from the given enumerated <see cref="DifficultyLevel"/> property.
        /// </summary>
        /// <param name="name">The raw DifficultyLevel propery name.</param>
        /// <returns>System.String: the raw property name.</returns>
        public static Enumerations.DifficultyLevelProperty GetDifficultyLevelProperty(string name)
        {
            if (DifficultyLevelPropertyMapper.Values.Contains(name))
            {
                return DifficultyLevelPropertyMapper.FirstOrDefault(x => x.Value == name).Key;
            }
            else
            {
                throw new Exception($"No DifficultyLevel property found with name {name}.");
            }

        }

        /// <summary>
        /// Returns the original property name from the given enumerated <see cref="EventHistory"/> property.
        /// </summary>
        /// <param name="entity">The enumerated EventHistory propery.</param>
        /// <returns>System.String: the raw property name.</returns>
        public static string GetPropertyName(Enumerations.EventHistoryProperty entity)
        {
            if (EventHistoryPropertyMapper.ContainsKey(entity))
            {
                return EventHistoryPropertyMapper[entity];
            }
            else
            {
                return entity.ToString();
            }
        }

        /// <summary>
        /// Returns the original property name from the given enumerated <see cref="EventHistory"/> property.
        /// </summary>
        /// <param name="name">The raw EventHistory propery name.</param>
        /// <returns>System.String: the raw property name.</returns>
        public static Enumerations.EventHistoryProperty GetEventHistoryProperty(string name)
        {
            if (EventHistoryPropertyMapper.Values.Contains(name))
            {
                return EventHistoryPropertyMapper.FirstOrDefault(x => x.Value == name).Key;
            }
            else
            {
                throw new Exception($"No EventHistory property found with name {name}.");
            }

        }

        /// <summary>
        /// Returns the original property name from the given enumerated <see cref="EventType"/> property.
        /// </summary>
        /// <param name="entity">The enumerated EventType propery.</param>
        /// <returns>System.String: the raw property name.</returns>
        public static string GetPropertyName(Enumerations.EventTypeProperty entity)
        {
            if (EventTypePropertyMapper.ContainsKey(entity))
            {
                return EventTypePropertyMapper[entity];
            }
            else
            {
                return entity.ToString();
            }
        }

        /// <summary>
        /// Returns the original property name from the given enumerated <see cref="EventType"/> property.
        /// </summary>
        /// <param name="name">The raw EventType propery name.</param>
        /// <returns>System.String: the raw property name.</returns>
        public static Enumerations.EventTypeProperty GetEventTypeProperty(string name)
        {
            if (EventTypePropertyMapper.Values.Contains(name))
            {
                return EventTypePropertyMapper.FirstOrDefault(x => x.Value == name).Key;
            }
            else
            {
                throw new Exception($"No EventType property found with name {name}.");
            }

        }

        /// <summary>
        /// Returns the original property name from the given enumerated <see cref="Member"/> property.
        /// </summary>
        /// <param name="entity">The enumerated Member propery.</param>
        /// <returns>System.String: the raw property name.</returns>
        public static string GetPropertyName(Enumerations.MemberProperty entity)
        {
            if (MemberPropertyMapper.ContainsKey(entity))
            {
                return MemberPropertyMapper[entity];
            }
            else
            {
                return entity.ToString();
            }
        }

        /// <summary>
        /// Returns the original property name from the given enumerated <see cref="Member"/> property.
        /// </summary>
        /// <param name="name">The raw Member propery name.</param>
        /// <returns>System.String: the raw property name.</returns>
        public static Enumerations.MemberProperty GetMemberProperty(string name)
        {
            if (MemberPropertyMapper.Values.Contains(name))
            {
                return MemberPropertyMapper.FirstOrDefault(x => x.Value == name).Key;
            }
            else
            {
                throw new Exception($"No Member property found with name {name}.");
            }

        }

        /// <summary>
        /// Returns the original property name from the given enumerated <see cref="Puzzle"/> property.
        /// </summary>
        /// <param name="entity">The enumerated Puzzle propery.</param>
        /// <returns>System.String: the raw property name.</returns>
        public static string GetPropertyName(Enumerations.PuzzleProperty entity)
        {
            if (PuzzlePropertyMapper.ContainsKey(entity))
            {
                return PuzzlePropertyMapper[entity];
            }
            else
            {
                return entity.ToString();
            }
        }

        /// <summary>
        /// Returns the original property name from the given enumerated <see cref="Puzzle"/> property.
        /// </summary>
        /// <param name="name">The raw Puzzle propery name.</param>
        /// <returns>System.String: the raw property name.</returns>
        public static Enumerations.PuzzleProperty GetPuzzleProperty(string name)
        {
            if (PuzzlePropertyMapper.Values.Contains(name))
            {
                return PuzzlePropertyMapper.FirstOrDefault(x => x.Value == name).Key;
            }
            else
            {
                throw new Exception($"No Puzzle property found with name {name}.");
            }

        }

        /// <summary>
        /// Returns the original property name from the given enumerated <see cref="Solution"/> property.
        /// </summary>
        /// <param name="entity">The enumerated Solution propery.</param>
        /// <returns>System.String: the raw property name.</returns>
        public static string GetPropertyName(Enumerations.SolutionProperty entity)
        {
            if (SolutionPropertyMapper.ContainsKey(entity))
            {
                return SolutionPropertyMapper[entity];
            }
            else
            {
                return entity.ToString();
            }
        }

        /// <summary>
        /// Returns the original property name from the given enumerated <see cref="Solution"/> property.
        /// </summary>
        /// <param name="name">The raw Solution propery name.</param>
        /// <returns>System.String: the raw property name.</returns>
        public static Enumerations.SolutionProperty GetSolutionProperty(string name)
        {
            if (SolutionPropertyMapper.Values.Contains(name))
            {
                return SolutionPropertyMapper.FirstOrDefault(x => x.Value == name).Key;
            }
            else
            {
                throw new Exception($"No Solution property found with name {name}.");
            }

        }

        /// <summary>
        /// Returns a list of strings coresponding to the foreign keys for the entity name passed.
        /// </summary>
        /// <param name="entityName">The entity name for which to retrieve the list of foreign key names.</param>
        /// <returns>A list of foreign key names.</returns>
        public static List<string> FKNames(string entityName)
        {
            List<string> names = new List<string>();

            Enumerations.EntityName entity = GetEntity(entityName);

            switch (entity)
            {
                case Enumerations.EntityName.Board:
                    foreach (Enumerations.BoardProperty property in BoardFKs)
                    {
                        names.Add(GetPropertyName(property));
                    }
                    break;
                case Enumerations.EntityName.DifficultyLevel:
                    foreach (Enumerations.DifficultyLevelProperty property in DifficultyLevelFKs)
                    {
                        names.Add(GetPropertyName(property));
                    }
                    break;
                case Enumerations.EntityName.EventHistory:
                    foreach (Enumerations.EventHistoryProperty property in EventHistoryFKs)
                    {
                        names.Add(GetPropertyName(property));
                    }
                    break;
                case Enumerations.EntityName.EventType:
                    foreach (Enumerations.EventTypeProperty property in EventTypeFKs)
                    {
                        names.Add(GetPropertyName(property));
                    }
                    break;
                case Enumerations.EntityName.Member:
                    foreach (Enumerations.MemberProperty property in MemberFKs)
                    {
                        names.Add(GetPropertyName(property));
                    }
                    break;
                case Enumerations.EntityName.Puzzle:
                    foreach (Enumerations.PuzzleProperty property in PuzzleFKs)
                    {
                        names.Add(GetPropertyName(property));
                    }
                    break;
                case Enumerations.EntityName.Solution:
                    foreach (Enumerations.SolutionProperty property in SolutionFKs)
                    {
                        names.Add(GetPropertyName(property));
                    }
                    break;
                default:
                    break;
            }

            return names;

        }
        #endregion Methods

    } // Class
} // Namespace
// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 26, 2023 9:31:46 AM
// File             : BoardLiteBase.cs
// ************************************************************************

using System;
using System.Xml;

namespace KnightsTour
{
    /// <summary>
    /// The BoardLiteBase class which is the single place which defines the properties.  Inherits <seealso cref="KnightsTour.CoreLibrary.EntityBase{T}" />
    /// Generated On: October 26, 2023 at 9:31:46 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// This class should NOT be modified - any extensions or overrides should be completed in the extended class <seealso cref="BoardLite" />.
    /// </remarks>
    public abstract class BoardLiteBase : KnightsTour.CoreLibrary.EntityBase<int?>
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="BoardLiteBase"/> class.
        /// Initializes a new instance of the <see cref="BoardLiteBase"/> class.
        /// </summary>
        public BoardLiteBase()
        {
            OnIdSet += BoardLiteBase_OnIdSet;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoardLiteBase"/> class.
        /// Initializes a new instance of the <see cref="BoardLite"/> class from its full class representation.
        /// </summary>
        /// <param name="boardBase">The <see cref="BoardBase"/>.</param>
        public BoardLiteBase(BoardBase boardBase)
        {
            // Only do this if the object exists.
            if (boardBase != null)
            {
                OnIdSet += BoardLiteBase_OnIdSet;
                BoardId = boardBase.BoardId;
                BoardCode = boardBase.BoardCode;
                RowDimension = boardBase.RowDimension;
                ColDimension = boardBase.ColDimension;
                DiscoveryDate = boardBase.DiscoveryDate;
                Author = boardBase.Author;
                DiscoveryIterationCount = boardBase.DiscoveryIterationCount;
                DiscoveryRandomness = boardBase.DiscoveryRandomness;
                Path = boardBase.Path;
                SourceBoardId = boardBase.SourceBoardId;

                // Also set the Id field.
                Id = this.BoardId;
            }
        }
        #endregion Constructor(s)

        #region Declarations
        KnightsTour.BoardLite _boardLite = null; // Private Board (by SourceBoardId) reference used for lite graph hydraion.  NOT lazy loaded.
        #endregion Declarations

        #region Properties

        /// <summary>
        /// Gets or sets the related BoardLite (by SourceBoardId) entity reference.  Never lazy loaded.
        /// </summary>
        /// <value>
        /// The board.
        /// </value>
        public KnightsTour.BoardLite Board
        {
            get
            {
                return _boardLite;
            }
            set
            {
                _boardLite = value;
            }
        }

        /// <summary>
        /// Gets or sets the primary key field board id.
        /// </summary>
        /// <value>
        /// The board id.
        /// </value>
        public int? BoardId
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the board code.
        /// </summary>
        /// <value>
        /// The board code.
        /// </value>
        public Guid BoardCode
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the row dimension.
        /// </summary>
        /// <value>
        /// The row dimension.
        /// </value>
        public int RowDimension
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the col dimension.
        /// </summary>
        /// <value>
        /// The col dimension.
        /// </value>
        public int ColDimension
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the discovery date.
        /// </summary>
        /// <value>
        /// The discovery date.
        /// </value>
        public DateTime DiscoveryDate
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the author.
        /// </summary>
        /// <value>
        /// The author.
        /// </value>
        public string Author
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the discovery iteration count.
        /// </summary>
        /// <value>
        /// The discovery iteration count.
        /// </value>
        public long DiscoveryIterationCount
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the discovery randomness.
        /// </summary>
        /// <value>
        /// The discovery randomness.
        /// </value>
        public int DiscoveryRandomness
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the path.
        /// </summary>
        /// <value>
        /// The path.
        /// </value>
        public string Path
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the source board id.
        /// </summary>
        /// <value>
        /// The source board id.
        /// </value>
        public int? SourceBoardId
        {
            get;
            set;
        }
        #endregion Properties

        #region Methods

        /// <summary>
        /// Invoked when the generic Id field of this class is modified (set).
        /// </summary>
        private void BoardLiteBase_OnIdSet()
        {
            BoardId = Id;
        }
        #endregion Methods

    } // Class
} // Namespace
// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 21, 2023 9:55:34 AM
// File             : BoardBase.cs
// ************************************************************************

using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

using KnightsTour.CoreLibrary;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace KnightsTour
{
    /// <summary>
    /// The BoardBase class which tightly binds the model to the object.  Inherits <seealso cref="BoardLiteBase" /> and implements <seealso cref="KnightsTour.CoreLibrary.IEntity{T}" />
    /// Generated On: October 21, 2023 at 9:55:34 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// This class should NOT be modified - any extensions or overrides should be completed in the extended class <seealso cref="Board" />.
    /// </remarks>
    public abstract class BoardBase : BoardLiteBase, KnightsTour.CoreLibrary.IEntity<int?>
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="BoardBase"/> class.
        /// Initializes a new instance of the <see cref="BoardBase"/> class initialized with default properties.
        /// </summary>
        public BoardBase() : base()
        {
            Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoardBase"/> class.
        /// Initializes a new empty instance of the BoardBase class with the given primary key.
        /// </summary>
        /// <param name="id">The primary key value.</param>
        public BoardBase(int? id)
        {
            Initialize();
            SetPrimaryKey(id);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoardBase"/> class.
        /// Initializes a new empty instance of the BoardBase class from the record in a data reader populating only the Board columns specified.
        /// </summary>
        /// <param name="record">A record returned from a database reader.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.BoardProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public BoardBase(IDataRecord record, List<Enumerations.BoardProperty> columnsToInclude = null)
        {
            Initialize();

            // If not specified, default to all columns.
            if (columnsToInclude == null)
            {
                columnsToInclude = new List<Enumerations.BoardProperty>() { Enumerations.BoardProperty.All };
            }

            // Primary key must always be passed.
            BoardId = record.ValueAs<int?>("BoardId");
            if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.BoardCode))
            {
                BoardCode = record.ValueAs<Guid>("BoardCode");
            }
            if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.RowDimension))
            {
                RowDimension = record.ValueAs<int>("RowDimension");
            }
            if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.ColDimension))
            {
                ColDimension = record.ValueAs<int>("ColDimension");
            }
            if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.DiscoveryDate))
            {
                DiscoveryDate = record.ValueAs<DateTime>("DiscoveryDate");
            }
            if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.Author))
            {
                Author = record.ValueAs<string>("Author");
            }
            if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.DiscoveryIterationCount))
            {
                DiscoveryIterationCount = record.ValueAs<long>("DiscoveryIterationCount");
            }
            if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.DiscoveryRandomness))
            {
                DiscoveryRandomness = record.ValueAs<int>("DiscoveryRandomness");
            }
            if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.Path))
            {
                Path = record.ValueAs<string>("Path");
            }
            if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.SourceBoardId))
            {
                SourceBoardId = record.ValueAs<int?>("SourceBoardId");
            }

            // Link the primary key to the base Id field.
            SetPrimaryKey(BoardId.Value);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoardBase"/> class.
        /// Initializes a new empty instance of the BoardBase class from a DataRow with the Board columns specified.
        /// </summary>
        /// <param name="record">A <see cref="DataRow"/>.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.BoardProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public BoardBase(DataRow record, List<Enumerations.BoardProperty> columnsToInclude = null)
        {
            if (record != null)
            {
                Initialize();

                // If not specified, default to all columns.
                if (columnsToInclude == null)
                {
                    columnsToInclude = new List<Enumerations.BoardProperty>() { Enumerations.BoardProperty.All };
                }

                // Primary key must always be passed.
                BoardId = record.ValueAs<int?>("BoardId");
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.BoardCode))
                {
                    BoardCode = record.ValueAs<Guid>("BoardCode");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.RowDimension))
                {
                    RowDimension = record.ValueAs<int>("RowDimension");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.ColDimension))
                {
                    ColDimension = record.ValueAs<int>("ColDimension");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.DiscoveryDate))
                {
                    DiscoveryDate = record.ValueAs<DateTime>("DiscoveryDate");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.Author))
                {
                    Author = record.ValueAs<string>("Author");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.DiscoveryIterationCount))
                {
                    DiscoveryIterationCount = record.ValueAs<long>("DiscoveryIterationCount");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.DiscoveryRandomness))
                {
                    DiscoveryRandomness = record.ValueAs<int>("DiscoveryRandomness");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.Path))
                {
                    Path = record.ValueAs<string>("Path");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.SourceBoardId))
                {
                    SourceBoardId = record.ValueAs<int?>("SourceBoardId");
                }

                // Link the primary key to the base Id field.
                SetPrimaryKey(BoardId.Value);
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoardBase"/> class.
        /// Initializes a new empty instance of the BoardBase class from a DataRow with the Board columns specified.
        /// </summary>
        /// <param name="boardLite">A <see cref="BoardLite"/>.</param>
        public BoardBase(BoardLite boardLite)
        {
            if (boardLite != null)
            {
                Initialize();

                // Base properties.
                BoardId = boardLite.BoardId.HasValue && boardLite.BoardId.Value <= 0 ? null : boardLite.BoardId;
                BoardCode = boardLite.BoardCode;
                RowDimension = boardLite.RowDimension;
                ColDimension = boardLite.ColDimension;
                DiscoveryDate = boardLite.DiscoveryDate;
                Author = boardLite.Author;
                DiscoveryIterationCount = boardLite.DiscoveryIterationCount;
                DiscoveryRandomness = boardLite.DiscoveryRandomness;
                Path = boardLite.Path;
                SourceBoardId = boardLite.SourceBoardId.HasValue && boardLite.SourceBoardId.Value <= 0 ? null : boardLite.SourceBoardId;

                // Also convert the lite FK reference objects.
                if (boardLite.Board != null)
                {
                    this.Board = new Board(boardLite.Board);
                }
                // Link the primary key to the base Id field.
                SetPrimaryKey(BoardId);
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="BoardBase"/> class.
        /// Initializes a new empty instance of the BoardBase class from a DataRow with the Board columns specified.
        /// </summary>
        /// <param name="record">A dynamic Expando Object.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.BoardProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public BoardBase(ExpandoObject record, List<Enumerations.BoardProperty> columnsToInclude = null)
        {
            if (record != null)
            {
                IDictionary<string, object> recordAsDictionary = (IDictionary<string, object>)record;

                Initialize();

                // If not specified, default to all columns.
                if (columnsToInclude == null)
                {
                    columnsToInclude = new List<Enumerations.BoardProperty>() { Enumerations.BoardProperty.All };
                }
                else if (!columnsToInclude.Contains(Enumerations.BoardProperty.All))
                {
                    // Primary key must always be passed.
                    BoardId = recordAsDictionary.ValueAs<int?>("BoardId");
                }

                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.BoardCode))
                {
                    BoardCode = recordAsDictionary.ValueAs<Guid>("BoardCode");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.RowDimension))
                {
                    RowDimension = recordAsDictionary.ValueAs<int>("RowDimension");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.ColDimension))
                {
                    ColDimension = recordAsDictionary.ValueAs<int>("ColDimension");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.DiscoveryDate))
                {
                    DiscoveryDate = recordAsDictionary.ValueAs<DateTime>("DiscoveryDate");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.Author))
                {
                    Author = recordAsDictionary.ValueAs<string>("Author");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.DiscoveryIterationCount))
                {
                    DiscoveryIterationCount = recordAsDictionary.ValueAs<long>("DiscoveryIterationCount");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.DiscoveryRandomness))
                {
                    DiscoveryRandomness = recordAsDictionary.ValueAs<int>("DiscoveryRandomness");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.Path))
                {
                    Path = recordAsDictionary.ValueAs<string>("Path");
                }
                if (columnsToInclude.Contains(Enumerations.BoardProperty.All) || columnsToInclude.Contains(Enumerations.BoardProperty.SourceBoardId))
                {
                    SourceBoardId = recordAsDictionary.ValueAs<int?>("SourceBoardId");
                }

                // Link the primary key to the base Id field.
                SetPrimaryKey(BoardId.Value);
            }
        }
        #endregion Constructor(s)

        #region Declarations
        KnightsTour.CoreLibrary.IStorageHandler storageHandler = null; // Storage handler reference used for lazy loading.
        KnightsTour.Board _board = null; // Private Board (by SourceBoardId) reference used for graph hydraion.  Lazy loaded if not initialized explicitly.
        IEnumerable<KnightsTour.Board> _boards = null; // Private collection of child boards references (by SourceBoardId) used for graph hydration.  Lazy loaded if not initialized explicitly.
        IEnumerable<KnightsTour.Puzzle> _puzzles = null; // Private collection of child puzzles references (by BoardId) used for graph hydration.  Lazy loaded if not initialized explicitly.
        #endregion Declarations

        #region Properties

        /// <summary>
        /// The override implementation of the base Id interface property.
        /// </summary>
        /// <value>
        /// The id.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public new int? Id
        {
            get
            {
                return BoardId;
            }
            set
            {
                BoardId = value;
            }
        }

        /// <summary>
        /// Gets or sets the related Board (by SourceBoardId) entity reference.  Lazy loaded unless specified.
        /// </summary>
        /// <value>
        /// The board.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public new KnightsTour.Board Board
        {
            get
            {
                if ((_board == null || _board.IsNew) && SourceBoardId.HasValue)
                {
                    _board = SourceBoardId.HasValue ? new BoardLogic(StorageHandler, UserName).GetById(SourceBoardId.Value) : new Board();
                }
                return _board;
            }
            set
            {
                _board = value;
            }
        }

        /// <summary>
        /// Gets or sets the collection of child boards references (by SourceBoardId) used for graph hydration.  Lazy loaded if not initialized explicitly.
        /// </summary>
        /// <value>
        /// The boards.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public IEnumerable<KnightsTour.Board> Boards
        {
            get
            {
                if (_boards == null)
                {
                    _boards = new List<Board>();
                    if (!IsNew)
                    {
                        _boards = new BoardLogic(StorageHandler, UserName).GetByFK<int?>(EntityMapper.GetPropertyName(Enumerations.BoardProperty.SourceBoardId).ToString(), SourceBoardId.Value);
                    }
                }
                return _boards;
            }
            set
            {
                _boards = value;
            }
        }

        /// <summary>
        /// Gets or sets the collection of child puzzles references (by BoardId) used for graph hydration.  Lazy loaded if not initialized explicitly.
        /// </summary>
        /// <value>
        /// The puzzles.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public IEnumerable<KnightsTour.Puzzle> Puzzles
        {
            get
            {
                if (_puzzles == null)
                {
                    _puzzles = new List<Puzzle>();
                    if (!IsNew)
                    {
                        _puzzles = new PuzzleLogic(StorageHandler, UserName).GetByFK<int?>(EntityMapper.GetPropertyName(Enumerations.PuzzleProperty.BoardId).ToString(), BoardId);
                    }
                }
                return _puzzles;
            }
            set
            {
                _puzzles = value;
            }
        }

        /// <summary>
        /// The primary key column for this entity.
        /// </summary>
        /// <value>
        /// The primary key.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public Enumerations.BoardProperty PrimaryKey
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the field validations.
        /// </summary>
        /// <value>
        /// The field validations.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public List<FieldValidator> FieldValidations
        {
            get;
            set;
        }

        /// <summary>
        /// The insert header for bulk SQL operations.
        /// </summary>
        /// <value>
        /// The s q l insert bulk header.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string SQLInsertBulkHeader
        {
            get
            {
                if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.AutoIncrement)
                {
                    return $"INSERT INTO {StorageProvider.GetTableSQL(EntityMapper.EntityNameTransformation[EntityName], TableSchema)} ({StorageProvider.GetColumnSQL("BoardCode")}, {StorageProvider.GetColumnSQL("RowDimension")}, {StorageProvider.GetColumnSQL("ColDimension")}, {StorageProvider.GetColumnSQL("DiscoveryDate")}, {StorageProvider.GetColumnSQL("Author")}, {StorageProvider.GetColumnSQL("DiscoveryIterationCount")}, {StorageProvider.GetColumnSQL("DiscoveryRandomness")}, {StorageProvider.GetColumnSQL("Path")}, {StorageProvider.GetColumnSQL("SourceBoardId")})";
                }
                else
                {
                    return $"INSERT INTO {StorageProvider.GetTableSQL(EntityMapper.EntityNameTransformation[EntityName], TableSchema)} ({StorageProvider.GetColumnSQL("BoardCode")}, {StorageProvider.GetColumnSQL("RowDimension")}, {StorageProvider.GetColumnSQL("ColDimension")}, {StorageProvider.GetColumnSQL("DiscoveryDate")}, {StorageProvider.GetColumnSQL("Author")}, {StorageProvider.GetColumnSQL("DiscoveryIterationCount")}, {StorageProvider.GetColumnSQL("DiscoveryRandomness")}, {StorageProvider.GetColumnSQL("Path")}, {StorageProvider.GetColumnSQL("SourceBoardId")})";
                }
            }
        }

        /// <summary>
        /// The SQL safe insert row for bulk SQL operations.
        /// </summary>
        /// <value>
        /// The s q l insert bulk row.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string SQLInsertBulkRow
        {
            get
            {
                if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.AutoIncrement)
                {
                    return $"({BoardCode.SafeSQL()}, {RowDimension.SafeSQL()}, {ColDimension.SafeSQL()}, {DiscoveryDate.SafeSQL()}, {Author.SafeSQL()}, {DiscoveryIterationCount.SafeSQL()}, {DiscoveryRandomness.SafeSQL()}, {Path.SafeSQL()}, {SourceBoardId.SafeSQL()})";
                }
                else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Manual)
                {
                    return $"({BoardId.SafeSQL()}, {BoardCode.SafeSQL()}, {RowDimension.SafeSQL()}, {ColDimension.SafeSQL()}, {DiscoveryDate.SafeSQL()}, {Author.SafeSQL()}, {DiscoveryIterationCount.SafeSQL()}, {DiscoveryRandomness.SafeSQL()}, {Path.SafeSQL()}, {SourceBoardId.SafeSQL()})";
                }
                else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Sequence)
                {
                    return $"({StorageProvider.GetTableSQL(EntityMapper.SequenceMapper[EntityName], TableSchema)}.NEXTVAL, {BoardCode.SafeSQL()}, {RowDimension.SafeSQL()}, {ColDimension.SafeSQL()}, {DiscoveryDate.SafeSQL()}, {Author.SafeSQL()}, {DiscoveryIterationCount.SafeSQL()}, {DiscoveryRandomness.SafeSQL()}, {Path.SafeSQL()}, {SourceBoardId.SafeSQL()})";
                }
                else
                {
                    throw new Exception($"Unhandled PK Insert Configuration: {StorageHandler.PKInsertConfiguration.ToString()}");
                }
            }
        }

        /// <summary>
        /// The insert SQL statement for single records.
        /// </summary>
        /// <value>
        /// The s q l insert statement.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public KnightsTour.CoreLibrary.IStorageStatement SQLInsertStatement
        {
            get
            {
                KnightsTour.CoreLibrary.StorageStatement statement = new KnightsTour.CoreLibrary.StorageStatement();

                if (KnightsTour.Context.UseStoredProcedureIntegration)
                {
                    statement.CommandType = System.Data.CommandType.StoredProcedure;
                    statement.Statement = GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType.Insert);
                    statement.Parameters = new List<KnightsTour.CoreLibrary.IParameter>
                    {
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}RowDimension", GetDBValue(KnightsTour.Enumerations.BoardProperty.RowDimension)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}ColDimension", GetDBValue(KnightsTour.Enumerations.BoardProperty.ColDimension)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Author", GetDBValue(KnightsTour.Enumerations.BoardProperty.Author)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}DiscoveryIterationCount", GetDBValue(KnightsTour.Enumerations.BoardProperty.DiscoveryIterationCount)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}DiscoveryRandomness", GetDBValue(KnightsTour.Enumerations.BoardProperty.DiscoveryRandomness)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Path", GetDBValue(KnightsTour.Enumerations.BoardProperty.Path)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}SourceBoardId", GetDBValue(KnightsTour.Enumerations.BoardProperty.SourceBoardId)),
                    };
                }
                else
                {
                    StringBuilder sql = new StringBuilder(SQLInsertBulkHeader);

                    sql.Append(" VALUES(");
                    foreach (Enumerations.BoardPropertyNotComputed property in Enum.GetValues(typeof(Enumerations.BoardPropertyNotComputed)))
                    {
                        if (property != Enumerations.BoardPropertyNotComputed.All)
                        {
                            if (ConvertProperty(property) != PrimaryKey)
                            {
                                sql.Append($"{StorageProvider.GetParameterPrefix()}{property.ToString()}, ");
                                statement.Parameters.Add(new KnightsTour.CoreLibrary.GenericParameter(StorageProvider.GetParameterPrefix() + property.ToString(), GetDBValue(property), GetDataType(property)));
                            }
                            else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Sequence)
                            {
                                sql.Append($"{EntityMapper.GetSequenceName(EntityName)}.NEXTVAL, ");
                            }
                            else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Manual)
                            {
                                sql.Append($"{StorageProvider.GetParameterPrefix()}{property.ToString()}, ");
                                statement.Parameters.Add(new KnightsTour.CoreLibrary.GenericParameter(StorageProvider.GetParameterPrefix() + property.ToString(), GetDBValue(property), GetDataType(property)));
                            }
                        }
                    }

                    // Remove the trailing comma and space.
                    sql = sql.Remove(sql.Length - 2, 2);
                    sql.Append(")");

                    statement.Statement = sql.ToString();
                }

                return statement;
            }
        }

        /// <summary>
        /// The update SQL statement for single records.
        /// </summary>
        /// <value>
        /// The s q l update statement.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public KnightsTour.CoreLibrary.IStorageStatement SQLUpdateStatement
        {
            get
            {
                KnightsTour.CoreLibrary.StorageStatement statement = new KnightsTour.CoreLibrary.StorageStatement();

                if (KnightsTour.Context.UseStoredProcedureIntegration)
                {
                    statement.CommandType = System.Data.CommandType.StoredProcedure;
                    statement.Statement = GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType.Update);
                    statement.Parameters = new List<KnightsTour.CoreLibrary.IParameter>
                    {
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}BoardId", GetDBValue(KnightsTour.Enumerations.BoardProperty.BoardId)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}BoardCode", GetDBValue(KnightsTour.Enumerations.BoardProperty.BoardCode)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}RowDimension", GetDBValue(KnightsTour.Enumerations.BoardProperty.RowDimension)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}ColDimension", GetDBValue(KnightsTour.Enumerations.BoardProperty.ColDimension)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}DiscoveryDate", GetDBValue(KnightsTour.Enumerations.BoardProperty.DiscoveryDate)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Author", GetDBValue(KnightsTour.Enumerations.BoardProperty.Author)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}DiscoveryIterationCount", GetDBValue(KnightsTour.Enumerations.BoardProperty.DiscoveryIterationCount)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}DiscoveryRandomness", GetDBValue(KnightsTour.Enumerations.BoardProperty.DiscoveryRandomness)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Path", GetDBValue(KnightsTour.Enumerations.BoardProperty.Path)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}SourceBoardId", GetDBValue(KnightsTour.Enumerations.BoardProperty.SourceBoardId)),
                    };
                }
                else
                {
                    StringBuilder sql = new StringBuilder($"UPDATE {StorageProvider.GetTableSQL(EntityMapper.EntityNameTransformation[EntityName], TableSchema)} SET ");

                    foreach (Enumerations.BoardPropertyNotComputed property in Enum.GetValues(typeof(Enumerations.BoardPropertyNotComputed)))
                    {
                        if (property != Enumerations.BoardPropertyNotComputed.All)
                        {
                            if (IsModified(ConvertProperty(property)))
                            {
                                sql.Append($"{StorageProvider.GetColumnSQL(EntityMapper.GetPropertyName(ConvertProperty(property)))} = {StorageProvider.GetParameterPrefix()}{property.ToString()}, ");
                                statement.Parameters.Add(new KnightsTour.CoreLibrary.GenericParameter(StorageProvider.GetParameterPrefix() + property.ToString(), GetDBValue(property), GetDataType(property)));
                            }
                        }
                    }

                    sql = sql.Remove(sql.Length - 2, 2); //Remove the trailing comma and space
                    sql.Append($" WHERE {StorageProvider.GetColumnSQL(PrimaryKeyField)} = {BoardId.SafeSQL()}");

                    statement.Statement = sql.ToString();
                }

                return statement;
            }
        }

        /// <summary>
        /// Gets or sets the initial state for this entity.
        /// </summary>
        /// <value>
        /// The initial state.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public BoardLiteBase InitialState
        {
            get;
            set;
        }

        /// <summary>
        /// Gets a value indicating whether this Board instance is new or not.
        /// </summary>
        /// <value>
        /// The is new.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public bool IsNew
        {
            get
            {
                return !BoardId.HasValue;
            }
        }

        /// <summary>
        /// Gets the related name of the actual database table.
        /// </summary>
        /// <value>
        /// The table name.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string TableName
        {
            get
            {
                return EntityMapper.GetDbEntityName(EntityName);
            }
        }

        /// <summary>
        /// Gets the related name of the actual database schema.
        /// </summary>
        /// <value>
        /// The table schema.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string TableSchema
        {
            get
            {
                return "dbo";
            }
        }

        /// <summary>
        /// Gets the primary key default value.
        /// </summary>
        /// <value>
        /// The p k default value.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string PKDefaultValue
        {
            get
            {
                return "";
            }
        }

        /// <summary>
        /// Gets or sets the storage handler from the default configured source unless otherwise set.
        /// </summary>
        /// <value>
        /// The storage handler.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public KnightsTour.CoreLibrary.IStorageHandler StorageHandler
        {
            get
            {
                if (storageHandler == null)
                {
                    storageHandler = StorageProvider.GetHandler();
                }
                return storageHandler;
            }
            set
            {
                storageHandler = value;
            }
        }

        /// <summary>
        /// The configured label or label collection configured, or the PK number or (new) if a new record.
        /// </summary>
        /// <value>
        /// The instance label.
        /// </value>
        public string InstanceLabel
        {
            get
            {
                if (IsNew)
                {
                    return "(New)";
                }
                else
                {
                    return BoardId.Value.ToString();
                }
            }
        }

        /// <summary>
        /// Returns the DiscoveryDate formatted with either the projects default date format or the custom property date format if defined.
        /// </summary>
        /// <value>
        /// The discovery date formatted.
        /// </value>
        public string DiscoveryDateFormatted
        {
            get
            {
                return DiscoveryDate.ToString("yyyy-MM-dd");
            }
        }
        #endregion Properties

        #region Methods

        /// <summary>
        /// Validates the object using the defined field validators.
        /// </summary>
        public KnightsTour.CoreLibrary.IActionResponse Validate()
        {
            return KnightsTour.Context.ValidationHandler.ValidateEntity<int?>(Enumerations.EntityName.Board.ToString(), TableSchema, this, IsNew);
        }

        /// <summary>
        /// Sets the original properties (required for object state checking).
        /// </summary>
        public void SetOriginalProperties()
        {
            InitialState = new BoardLite(this);
        }

        /// <summary>
        /// Serializes the object based on the defined serialization strategy defined in the <seealso cref="AuditHandler" />.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public string SerializeObject()
        {
            string objectSerialization = string.Empty;
            switch (KnightsTour.Context.AuditHandler.SerializationStrategy)
            {
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.XML:
                    objectSerialization = KnightsTour.CoreLibrary.XMLAssistant.Serialize(ToDynamic());
                    break;
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.JSON:
                    objectSerialization = ToDynamic().ToString();
                    break;
                default:
                    throw new NotImplementedException($"{KnightsTour.Context.AuditHandler.SerializationStrategy.ToString()} serialization strategy not implemented.");
            }
            return objectSerialization;
        }

        /// <summary>
        /// Serializes the object differential based on the defined serialization strategy defined in the <seealso cref="AuditHandler" />.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public string SerializeDifferential()
        {
            string objectSerialization = string.Empty;
            switch (KnightsTour.Context.AuditHandler.SerializationStrategy)
            {
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.XML:
                    objectSerialization = KnightsTour.CoreLibrary.XMLAssistant.Serialize(ToDynamic(KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.ModifiedPropertiesOnly));
                    break;
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.JSON:
                    objectSerialization = ToDynamic(KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.ModifiedPropertiesOnly).ToString();
                    break;
                default:
                    throw new NotImplementedException($"{KnightsTour.Context.AuditHandler.SerializationStrategy.ToString()} serialization strategy not implemented.");
            }
            return objectSerialization;
        }

        /// <summary>
        /// Creates a dynamic object based on the passed <seealso cref="KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy" />.
        /// </summary>
        /// <param name="strategy">The strategy.</param>
        /// <returns>dynamic.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public dynamic ToDynamic(KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy strategy = KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.AllProperties)
        {
            dynamic dynamicBoard = new JObject();
            switch (strategy)
            {
                case KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.AllProperties:
                    dynamicBoard.BoardId = BoardId;
                    dynamicBoard.BoardCode = BoardCode;
                    dynamicBoard.RowDimension = RowDimension;
                    dynamicBoard.ColDimension = ColDimension;
                    dynamicBoard.DiscoveryDate = DiscoveryDate;
                    dynamicBoard.Author = Author;
                    dynamicBoard.DiscoveryIterationCount = DiscoveryIterationCount;
                    dynamicBoard.DiscoveryRandomness = DiscoveryRandomness;
                    dynamicBoard.Path = Path;
                    dynamicBoard.SourceBoardId = SourceBoardId;
                    break;
                case KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.AllPropertiesWithOriginals:
                    dynamicBoard.BoardId = BoardId;
                    dynamicBoard.BoardId_Original = InitialState.BoardId;
                    dynamicBoard.BoardCode = BoardCode;
                    dynamicBoard.BoardCode_Original = InitialState.BoardCode;
                    dynamicBoard.RowDimension = RowDimension;
                    dynamicBoard.RowDimension_Original = InitialState.RowDimension;
                    dynamicBoard.ColDimension = ColDimension;
                    dynamicBoard.ColDimension_Original = InitialState.ColDimension;
                    dynamicBoard.DiscoveryDate = DiscoveryDate;
                    dynamicBoard.DiscoveryDate_Original = InitialState.DiscoveryDate;
                    dynamicBoard.Author = Author;
                    dynamicBoard.Author_Original = InitialState.Author;
                    dynamicBoard.DiscoveryIterationCount = DiscoveryIterationCount;
                    dynamicBoard.DiscoveryIterationCount_Original = InitialState.DiscoveryIterationCount;
                    dynamicBoard.DiscoveryRandomness = DiscoveryRandomness;
                    dynamicBoard.DiscoveryRandomness_Original = InitialState.DiscoveryRandomness;
                    dynamicBoard.Path = Path;
                    dynamicBoard.Path_Original = InitialState.Path;
                    dynamicBoard.SourceBoardId = SourceBoardId;
                    dynamicBoard.SourceBoardId_Original = InitialState.SourceBoardId;
                    break;
                case KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.ModifiedPropertiesOnly:
                    if (IsModified(Enumerations.BoardProperty.BoardId))
                    {
                        dynamicBoard.BoardId = BoardId;
                        dynamicBoard.BoardId_Original = InitialState.BoardId;
                    }
                    if (IsModified(Enumerations.BoardProperty.BoardCode))
                    {
                        dynamicBoard.BoardCode = BoardCode;
                        dynamicBoard.BoardCode_Original = InitialState.BoardCode;
                    }
                    if (IsModified(Enumerations.BoardProperty.RowDimension))
                    {
                        dynamicBoard.RowDimension = RowDimension;
                        dynamicBoard.RowDimension_Original = InitialState.RowDimension;
                    }
                    if (IsModified(Enumerations.BoardProperty.ColDimension))
                    {
                        dynamicBoard.ColDimension = ColDimension;
                        dynamicBoard.ColDimension_Original = InitialState.ColDimension;
                    }
                    if (IsModified(Enumerations.BoardProperty.DiscoveryDate))
                    {
                        dynamicBoard.DiscoveryDate = DiscoveryDate;
                        dynamicBoard.DiscoveryDate_Original = InitialState.DiscoveryDate;
                    }
                    if (IsModified(Enumerations.BoardProperty.Author))
                    {
                        dynamicBoard.Author = Author;
                        dynamicBoard.Author_Original = InitialState.Author;
                    }
                    if (IsModified(Enumerations.BoardProperty.DiscoveryIterationCount))
                    {
                        dynamicBoard.DiscoveryIterationCount = DiscoveryIterationCount;
                        dynamicBoard.DiscoveryIterationCount_Original = InitialState.DiscoveryIterationCount;
                    }
                    if (IsModified(Enumerations.BoardProperty.DiscoveryRandomness))
                    {
                        dynamicBoard.DiscoveryRandomness = DiscoveryRandomness;
                        dynamicBoard.DiscoveryRandomness_Original = InitialState.DiscoveryRandomness;
                    }
                    if (IsModified(Enumerations.BoardProperty.Path))
                    {
                        dynamicBoard.Path = Path;
                        dynamicBoard.Path_Original = InitialState.Path;
                    }
                    if (IsModified(Enumerations.BoardProperty.SourceBoardId))
                    {
                        dynamicBoard.SourceBoardId = SourceBoardId;
                        dynamicBoard.SourceBoardId_Original = InitialState.SourceBoardId;
                    }
                    break;
                default:
                    throw new NotImplementedException($"{strategy.ToString()} strategy not implemented.");
            }
            return dynamicBoard;
        }

        /// <summary>
        /// Determines whether this instance is modified.
        /// </summary>
        /// <returns><c>true</c> if this instance is modified; otherwise, <c>false</c>.</returns>
        public bool IsModified()
        {
            foreach (Enumerations.BoardProperty property in Enum.GetValues(typeof(Enumerations.BoardProperty)))
            {
                if (property != Enumerations.BoardProperty.All)
                {
                    if (IsModified(property))
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Determines whether the specified property is modified.
        /// </summary>
        /// <param name="property">The Board property to test.</param>
        /// <returns><c>true</c> if the specified property is modified; otherwise, <c>false</c>.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public bool IsModified(Enumerations.BoardProperty property)
        {
            switch (property)
            {
                case Enumerations.BoardProperty.BoardId:
                    return BoardId != InitialState.BoardId;
                case Enumerations.BoardProperty.BoardCode:
                    return BoardCode != InitialState.BoardCode;
                case Enumerations.BoardProperty.RowDimension:
                    return RowDimension != InitialState.RowDimension;
                case Enumerations.BoardProperty.ColDimension:
                    return ColDimension != InitialState.ColDimension;
                case Enumerations.BoardProperty.DiscoveryDate:
                    return DiscoveryDate != InitialState.DiscoveryDate;
                case Enumerations.BoardProperty.Author:
                    return Author != InitialState.Author;
                case Enumerations.BoardProperty.DiscoveryIterationCount:
                    return DiscoveryIterationCount != InitialState.DiscoveryIterationCount;
                case Enumerations.BoardProperty.DiscoveryRandomness:
                    return DiscoveryRandomness != InitialState.DiscoveryRandomness;
                case Enumerations.BoardProperty.Path:
                    return Path != InitialState.Path;
                case Enumerations.BoardProperty.SourceBoardId:
                    return SourceBoardId != InitialState.SourceBoardId;
                case Enumerations.BoardProperty.All:
                    return IsModified();
                default:
                    throw new NotImplementedException($"{property.ToString()} property not implemented.");
            }
        }

        /// <summary>
        /// Initializes the properties of this class.
        /// </summary>
        public void Initialize()
        {
            MethodWrappers.CommonWrapper(baseInitialize, KnightsTour.CoreLibrary.Enumerations.ApplicationTier.Business, new object[] { });
        }

        /// <summary>
        /// The privately wrapped implementation of the Initialize method.
        /// </summary>
        /// <param name="arguments">The generic arguments sent to this method from the public wrapped call.</param>
        private void baseInitialize(object[] arguments)
        {
            InitialState = new BoardLite();

            // Base Entity properties.
            EntityName = Enumerations.EntityName.Board.ToString();
            PrimaryKey = Enumerations.BoardProperty.BoardId;
            PrimaryKeyField = EntityMapper.GetPropertyName(PrimaryKey);
            PrimaryKeyFieldFormatted = "BoardId";
            PKInsertConfiguration = KnightsTour.CoreLibrary.Enumerations.InsertPKRule.AutoIncrement;

            // Table properties.
            BoardId = null;
            BoardCode = Guid.NewGuid();
            RowDimension = 0;
            ColDimension = 0;
            DiscoveryDate = DateTime.Now;
            Author = string.Empty;
            DiscoveryIterationCount = 0;
            DiscoveryRandomness = 0;
            Path = string.Empty;
            SourceBoardId = null;
        }

        /// <summary>
        /// Clones this instance.
        /// </summary>
        /// <returns>A cloned Board.</returns>
        public Board Clone()
        {
            Board board = new Board();

            board.BoardId = BoardId;
            board.BoardCode = BoardCode;
            board.RowDimension = RowDimension;
            board.ColDimension = ColDimension;
            board.DiscoveryDate = DiscoveryDate;
            board.Author = Author;
            board.DiscoveryIterationCount = DiscoveryIterationCount;
            board.DiscoveryRandomness = DiscoveryRandomness;
            board.Path = Path;
            board.SourceBoardId = SourceBoardId;

            return board;
        }

        /// <summary>
        /// Returns a readable summary of this object.
        /// </summary>
        /// <returns>System.String.</returns>
        public override string ToString()
        {
            return SerializeObject();
        }

        /// <summary>
        /// Converts a non computed property to a regular property.
        /// </summary>
        /// <param name="property">The non computed Board property to convert.</param>
        /// <returns>The regular related property value.</returns>
        /// <exception cref="ArgumentException"></exception>
        private Enumerations.BoardProperty ConvertProperty(Enumerations.BoardPropertyNotComputed property)
        {
            foreach (Enumerations.BoardProperty regularProperty in Enum.GetValues(typeof(Enumerations.BoardProperty)))
            {
                if (regularProperty.ToString() == property.ToString())
                {
                    return regularProperty;
                }
            }

            throw new Exception($"Unable to convert non computed property '{property.ToString()}' of type 'BoardPropertyNotComputed' to a 'BoardProperty'.");
        }

        /// <summary>
        /// Returns the underlying object value.
        /// </summary>
        /// <param name="property">The not computed Board property to test.</param>
        /// <returns>The dynamic underlying property value.</returns>
        /// <exception cref="ArgumentException"></exception>
        public dynamic GetDBValue(Enumerations.BoardPropertyNotComputed property)
        {
            return GetDBValue(ConvertProperty(property));
        }

        /// <summary>
        /// Returns the underlying object data type for this language.
        /// </summary>
        /// <param name="property">The non computed Board property to test.</param>
        /// <returns>The data type for this property.</returns>
        /// <exception cref="ArgumentException"></exception>
        private string GetDataType(Enumerations.BoardPropertyNotComputed property)
        {
            return GetDataType(ConvertProperty(property));
        }

        /// <summary>
        /// Returns the underlying object value.
        /// </summary>
        /// <param name="property">The Board property to test.</param>
        /// <returns>The dynamic underlying property value.</returns>
        /// <exception cref="ArgumentException"></exception>
        public dynamic GetDBValue(Enumerations.BoardProperty property)
        {
            switch (property)
            {
                case Enumerations.BoardProperty.BoardId:
                    if (BoardId == null) return DBNull.Value;
                    return BoardId;
                case Enumerations.BoardProperty.BoardCode:
                    return BoardCode;
                case Enumerations.BoardProperty.RowDimension:
                    return RowDimension;
                case Enumerations.BoardProperty.ColDimension:
                    return ColDimension;
                case Enumerations.BoardProperty.DiscoveryDate:
                    return DiscoveryDate;
                case Enumerations.BoardProperty.Author:
                    if (Author == null) return DBNull.Value;
                    return Author;
                case Enumerations.BoardProperty.DiscoveryIterationCount:
                    return DiscoveryIterationCount;
                case Enumerations.BoardProperty.DiscoveryRandomness:
                    return DiscoveryRandomness;
                case Enumerations.BoardProperty.Path:
                    if (Path == null) return DBNull.Value;
                    return Path;
                case Enumerations.BoardProperty.SourceBoardId:
                    if (SourceBoardId == null) return DBNull.Value;
                    return SourceBoardId;
                default:
                    throw new ArgumentException($"Property {property.ToString()} unhandled.");
            }
        }

        /// <summary>
        /// Returns the underlying object data type for this language.
        /// </summary>
        /// <param name="property">The Board property to test.</param>
        /// <returns>The data type for this property.</returns>
        /// <exception cref="ArgumentException"></exception>
        private string GetDataType(Enumerations.BoardProperty property)
        {
            switch (property)
            {
                case Enumerations.BoardProperty.BoardId:
                    return "int?";
                case Enumerations.BoardProperty.BoardCode:
                    return "Guid";
                case Enumerations.BoardProperty.RowDimension:
                    return "int";
                case Enumerations.BoardProperty.ColDimension:
                    return "int";
                case Enumerations.BoardProperty.DiscoveryDate:
                    return "DateTime";
                case Enumerations.BoardProperty.Author:
                    return "string";
                case Enumerations.BoardProperty.DiscoveryIterationCount:
                    return "long";
                case Enumerations.BoardProperty.DiscoveryRandomness:
                    return "int";
                case Enumerations.BoardProperty.Path:
                    return "string";
                case Enumerations.BoardProperty.SourceBoardId:
                    return "int?";
                default:
                    throw new ArgumentException($"Property {property.ToString()} unhandled.");
            }
        }

        /// <summary>
        /// Sets the primary key.
        /// </summary>
        /// <param name="id">The Boards primary key value.</param>
        public void SetPrimaryKey(int? id)
        {
            BoardId = id;
            Id = id;
            SetOriginalProperties();
        }

        /// <summary>
        /// Updates the individual properties from the lite object.
        /// </summary>
        /// <param name="boardLite">The BoardLite source object.</param>
        public void UpdateFromLite(BoardLite boardLite)
        {
            // Do this first just to make sure.
            SetOriginalProperties();

            BoardId = boardLite.BoardId;
            BoardCode = boardLite.BoardCode;
            RowDimension = boardLite.RowDimension;
            ColDimension = boardLite.ColDimension;
            DiscoveryDate = boardLite.DiscoveryDate;
            Author = boardLite.Author;
            DiscoveryIterationCount = boardLite.DiscoveryIterationCount;
            DiscoveryRandomness = boardLite.DiscoveryRandomness;
            Path = boardLite.Path;
            SourceBoardId = boardLite.SourceBoardId;
        }

        /// <summary>
        /// Returns the stored procedure name (of a given type) or this class.
        /// </summary>
        /// <param name="type">The stored procedure type.</param>
        public string GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType type)
        {
            string storedProcedureName = string.Empty;

            // The Stored procedure prefix (as defined on the model) is optional, deal with that first.
            if (!string.IsNullOrEmpty(Schema.Model.StoredProcedurePrefix))
            {
                storedProcedureName += $"{Schema.Model.StoredProcedurePrefix}_";
            }

            // Model prefix (optional), entity name then finally the type.
            if (string.IsNullOrEmpty(TableSchema))
            {
                return $"{storedProcedureName}{TextAssistant.PascalCase(OnlyAlpha(TableName, true))}_{type}";
            }
            else
            {
                return $"{TableSchema}.{storedProcedureName}{TextAssistant.PascalCase(OnlyAlpha(TableName, true))}_{type}";
            }
        }
        #endregion Methods

    } // Class
} // Namespace
// Generated On: October 26, 2023 at 9:31:46 AM by DXterity Solutions.
// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/)
namespace KnightsTour.Enumerations
{
    #region Entity related
    /// <summary>
    /// A list of all available entities in the model.
    /// </summary>
    public enum EntityName
    {
        /// <summary>Used for unit testing.</summary>
        DummyTable,
        /// <summary>The board entity.</summary>
        Board,
        /// <summary>The difficulty level entity.</summary>
        DifficultyLevel,
        /// <summary>The event history entity.</summary>
        EventHistory,
        /// <summary>The event type entity.</summary>
        EventType,
        /// <summary>The member entity.</summary>
        Member,
        /// <summary>The puzzle entity.</summary>
        Puzzle,
        /// <summary>The solution entity.</summary>
        Solution,
    }
    #endregion Entity related

    #region Entity column
    /// <summary>
    /// A list of all available Board properties.
    /// </summary>
    public enum BoardProperty
    {
        /// <summary>A special identifer which references all the Board properties.</summary>
        All,
        /// <summary>The board id property (type: int?, Mandatory, Primary Key).</summary>
        BoardId,
        /// <summary>The board code property (type: Guid, Mandatory).</summary>
        BoardCode,
        /// <summary>The row dimension property (type: int, Mandatory).</summary>
        RowDimension,
        /// <summary>The col dimension property (type: int, Mandatory).</summary>
        ColDimension,
        /// <summary>The discovery date property (type: DateTime, Mandatory).</summary>
        DiscoveryDate,
        /// <summary>The author property (type: string, Mandatory).</summary>
        Author,
        /// <summary>The discovery iteration count property (type: long, Mandatory).</summary>
        DiscoveryIterationCount,
        /// <summary>The discovery randomness property (type: int, Mandatory).</summary>
        DiscoveryRandomness,
        /// <summary>The path property (type: string, Mandatory).</summary>
        Path,
        /// <summary>The source board id property (type: int?, Optional, Foreign Key).</summary>
        SourceBoardId,
    }
    /// <summary>
    /// A list of all available Board properties that are NOT computed.
    /// </summary>
    public enum BoardPropertyNotComputed
    {
        /// <summary>A special identifer which references all the Board properties.</summary>
        All,
        /// <summary>The board code property (type: Guid, Mandatory).</summary>
        BoardCode,
        /// <summary>The row dimension property (type: int, Mandatory).</summary>
        RowDimension,
        /// <summary>The col dimension property (type: int, Mandatory).</summary>
        ColDimension,
        /// <summary>The discovery date property (type: DateTime, Mandatory).</summary>
        DiscoveryDate,
        /// <summary>The author property (type: string, Mandatory).</summary>
        Author,
        /// <summary>The discovery iteration count property (type: long, Mandatory).</summary>
        DiscoveryIterationCount,
        /// <summary>The discovery randomness property (type: int, Mandatory).</summary>
        DiscoveryRandomness,
        /// <summary>The path property (type: string, Mandatory).</summary>
        Path,
        /// <summary>The source board id property (type: int?, Optional, Foreign Key).</summary>
        SourceBoardId,
    }
    /// <summary>
    /// A list of all available DifficultyLevel properties.
    /// </summary>
    public enum DifficultyLevelProperty
    {
        /// <summary>A special identifer which references all the DifficultyLevel properties.</summary>
        All,
        /// <summary>The difficulty level id property (type: int?, Mandatory, Primary Key).</summary>
        DifficultyLevelId,
        /// <summary>The name property (type: string, Mandatory).</summary>
        Name,
        /// <summary>The description property (type: string, Mandatory).</summary>
        Description,
        /// <summary>The maximum gap property (type: int, Mandatory).</summary>
        MaximumGap,
        /// <summary>The percent visibility property (type: decimal, Mandatory).</summary>
        PercentVisibility,
        /// <summary>The highlight closest enabled property (type: bool, Mandatory).</summary>
        HighlightClosestEnabled,
        /// <summary>The duplicate checking enabled property (type: bool, Mandatory).</summary>
        DuplicateCheckingEnabled,
        /// <summary>The guess filter enabled property (type: bool, Mandatory).</summary>
        GuessFilterEnabled,
        /// <summary>The bad link enabled property (type: bool, Mandatory).</summary>
        BadLinkEnabled,
        /// <summary>The maximum dimension property (type: int, Mandatory).</summary>
        MaximumDimension,
        /// <summary>The minimum dimension property (type: int, Mandatory).</summary>
        MinimumDimension,
    }
    /// <summary>
    /// A list of all available DifficultyLevel properties that are NOT computed.
    /// </summary>
    public enum DifficultyLevelPropertyNotComputed
    {
        /// <summary>A special identifer which references all the DifficultyLevel properties.</summary>
        All,
        /// <summary>The name property (type: string, Mandatory).</summary>
        Name,
        /// <summary>The description property (type: string, Mandatory).</summary>
        Description,
        /// <summary>The maximum gap property (type: int, Mandatory).</summary>
        MaximumGap,
        /// <summary>The percent visibility property (type: decimal, Mandatory).</summary>
        PercentVisibility,
        /// <summary>The highlight closest enabled property (type: bool, Mandatory).</summary>
        HighlightClosestEnabled,
        /// <summary>The duplicate checking enabled property (type: bool, Mandatory).</summary>
        DuplicateCheckingEnabled,
        /// <summary>The guess filter enabled property (type: bool, Mandatory).</summary>
        GuessFilterEnabled,
        /// <summary>The bad link enabled property (type: bool, Mandatory).</summary>
        BadLinkEnabled,
        /// <summary>The maximum dimension property (type: int, Mandatory).</summary>
        MaximumDimension,
        /// <summary>The minimum dimension property (type: int, Mandatory).</summary>
        MinimumDimension,
    }
    /// <summary>
    /// A list of all available EventHistory properties.
    /// </summary>
    public enum EventHistoryProperty
    {
        /// <summary>A special identifer which references all the EventHistory properties.</summary>
        All,
        /// <summary>The event history id property (type: int?, Mandatory, Primary Key).</summary>
        EventHistoryId,
        /// <summary>The event type id property (type: int?, Mandatory, Foreign Key).</summary>
        EventTypeId,
        /// <summary>The event date property (type: DateTime, Mandatory).</summary>
        EventDate,
        /// <summary>The source internet address property (type: string, Mandatory).</summary>
        SourceInternetAddress,
        /// <summary>The country property (type: string, Optional).</summary>
        Country,
        /// <summary>The region property (type: string, Optional).</summary>
        Region,
        /// <summary>The city property (type: string, Optional).</summary>
        City,
        /// <summary>The zip postal property (type: string, Optional).</summary>
        ZipPostal,
        /// <summary>The context property (type: string, Mandatory).</summary>
        Context,
        /// <summary>The member id property (type: int?, Optional, Foreign Key).</summary>
        MemberId,
    }
    /// <summary>
    /// A list of all available EventHistory properties that are NOT computed.
    /// </summary>
    public enum EventHistoryPropertyNotComputed
    {
        /// <summary>A special identifer which references all the EventHistory properties.</summary>
        All,
        /// <summary>The event type id property (type: int?, Mandatory, Foreign Key).</summary>
        EventTypeId,
        /// <summary>The event date property (type: DateTime, Mandatory).</summary>
        EventDate,
        /// <summary>The source internet address property (type: string, Mandatory).</summary>
        SourceInternetAddress,
        /// <summary>The country property (type: string, Optional).</summary>
        Country,
        /// <summary>The region property (type: string, Optional).</summary>
        Region,
        /// <summary>The city property (type: string, Optional).</summary>
        City,
        /// <summary>The zip postal property (type: string, Optional).</summary>
        ZipPostal,
        /// <summary>The context property (type: string, Mandatory).</summary>
        Context,
        /// <summary>The member id property (type: int?, Optional, Foreign Key).</summary>
        MemberId,
    }
    /// <summary>
    /// A list of all available EventType properties.
    /// </summary>
    public enum EventTypeProperty
    {
        /// <summary>A special identifer which references all the EventType properties.</summary>
        All,
        /// <summary>The event type id property (type: int?, Mandatory, Primary Key).</summary>
        EventTypeId,
        /// <summary>The name property (type: string, Mandatory).</summary>
        Name,
    }
    /// <summary>
    /// A list of all available EventType properties that are NOT computed.
    /// </summary>
    public enum EventTypePropertyNotComputed
    {
        /// <summary>A special identifer which references all the EventType properties.</summary>
        All,
        /// <summary>The event type id property (type: int?, Mandatory, Primary Key).</summary>
        EventTypeId,
        /// <summary>The name property (type: string, Mandatory).</summary>
        Name,
    }
    /// <summary>
    /// A list of all available Member properties.
    /// </summary>
    public enum MemberProperty
    {
        /// <summary>A special identifer which references all the Member properties.</summary>
        All,
        /// <summary>The member id property (type: int?, Mandatory, Primary Key).</summary>
        MemberId,
        /// <summary>The create date property (type: DateTime, Mandatory).</summary>
        CreateDate,
        /// <summary>The email address property (type: string, Mandatory).</summary>
        EmailAddress,
        /// <summary>The confirmation date property (type: DateTime?, Optional).</summary>
        ConfirmationDate,
        /// <summary>The display name property (type: string, Mandatory).</summary>
        DisplayName,
        /// <summary>The password property (type: string, Mandatory).</summary>
        Password,
        /// <summary>The user initials property (type: string, Mandatory).</summary>
        UserInitials,
        /// <summary>The code property (type: string, Mandatory).</summary>
        Code,
        /// <summary>The is administrator property (type: bool, Mandatory).</summary>
        IsAdministrator,
    }
    /// <summary>
    /// A list of all available Member properties that are NOT computed.
    /// </summary>
    public enum MemberPropertyNotComputed
    {
        /// <summary>A special identifer which references all the Member properties.</summary>
        All,
        /// <summary>The create date property (type: DateTime, Mandatory).</summary>
        CreateDate,
        /// <summary>The email address property (type: string, Mandatory).</summary>
        EmailAddress,
        /// <summary>The confirmation date property (type: DateTime?, Optional).</summary>
        ConfirmationDate,
        /// <summary>The display name property (type: string, Mandatory).</summary>
        DisplayName,
        /// <summary>The password property (type: string, Mandatory).</summary>
        Password,
        /// <summary>The user initials property (type: string, Mandatory).</summary>
        UserInitials,
        /// <summary>The code property (type: string, Mandatory).</summary>
        Code,
        /// <summary>The is administrator property (type: bool, Mandatory).</summary>
        IsAdministrator,
    }
    /// <summary>
    /// A list of all available Puzzle properties.
    /// </summary>
    public enum PuzzleProperty
    {
        /// <summary>A special identifer which references all the Puzzle properties.</summary>
        All,
        /// <summary>The puzzle id property (type: int?, Mandatory, Primary Key).</summary>
        PuzzleId,
        /// <summary>The puzzle code property (type: Guid, Mandatory).</summary>
        PuzzleCode,
        /// <summary>The board id property (type: int?, Mandatory, Foreign Key).</summary>
        BoardId,
        /// <summary>The difficulty level id property (type: int?, Mandatory, Foreign Key).</summary>
        DifficultyLevelId,
        /// <summary>The path property (type: string, Mandatory).</summary>
        Path,
        /// <summary>The puzzle of the day date property (type: DateTime?, Optional).</summary>
        PuzzleOfTheDayDate,
    }
    /// <summary>
    /// A list of all available Puzzle properties that are NOT computed.
    /// </summary>
    public enum PuzzlePropertyNotComputed
    {
        /// <summary>A special identifer which references all the Puzzle properties.</summary>
        All,
        /// <summary>The puzzle code property (type: Guid, Mandatory).</summary>
        PuzzleCode,
        /// <summary>The board id property (type: int?, Mandatory, Foreign Key).</summary>
        BoardId,
        /// <summary>The difficulty level id property (type: int?, Mandatory, Foreign Key).</summary>
        DifficultyLevelId,
        /// <summary>The path property (type: string, Mandatory).</summary>
        Path,
        /// <summary>The puzzle of the day date property (type: DateTime?, Optional).</summary>
        PuzzleOfTheDayDate,
    }
    /// <summary>
    /// A list of all available Solution properties.
    /// </summary>
    public enum SolutionProperty
    {
        /// <summary>A special identifer which references all the Solution properties.</summary>
        All,
        /// <summary>The solution id property (type: int?, Mandatory, Primary Key).</summary>
        SolutionId,
        /// <summary>The puzzle id property (type: int?, Mandatory, Foreign Key).</summary>
        PuzzleId,
        /// <summary>The member id property (type: int?, Optional, Foreign Key).</summary>
        MemberId,
        /// <summary>The solution start date property (type: DateTime, Mandatory).</summary>
        SolutionStartDate,
        /// <summary>The solution duration property (type: decimal?, Optional).</summary>
        SolutionDuration,
        /// <summary>The path property (type: string, Optional).</summary>
        Path,
        /// <summary>The note property (type: string, Optional).</summary>
        Note,
        /// <summary>The code property (type: string, Mandatory).</summary>
        Code,
        /// <summary>The non member name property (type: string, Optional).</summary>
        NonMemberName,
        /// <summary>The non member ip property (type: string, Optional).</summary>
        NonMemberIp,
    }
    /// <summary>
    /// A list of all available Solution properties that are NOT computed.
    /// </summary>
    public enum SolutionPropertyNotComputed
    {
        /// <summary>A special identifer which references all the Solution properties.</summary>
        All,
        /// <summary>The puzzle id property (type: int?, Mandatory, Foreign Key).</summary>
        PuzzleId,
        /// <summary>The member id property (type: int?, Optional, Foreign Key).</summary>
        MemberId,
        /// <summary>The solution start date property (type: DateTime, Mandatory).</summary>
        SolutionStartDate,
        /// <summary>The solution duration property (type: decimal?, Optional).</summary>
        SolutionDuration,
        /// <summary>The path property (type: string, Optional).</summary>
        Path,
        /// <summary>The note property (type: string, Optional).</summary>
        Note,
        /// <summary>The code property (type: string, Mandatory).</summary>
        Code,
        /// <summary>The non member name property (type: string, Optional).</summary>
        NonMemberName,
        /// <summary>The non member ip property (type: string, Optional).</summary>
        NonMemberIp,
    }
    #endregion Entity column

    #region Entity foreign keys
    /// <summary>
    /// A list of Board foreign keys.
    /// </summary>
    public enum BoardFK
    {
        /// <summary>Foreign key reference to table Board</summary>
        SourceBoardId,
    }
    /// <summary>
    /// A list of EventHistory foreign keys.
    /// </summary>
    public enum EventHistoryFK
    {
        /// <summary>Foreign key reference to table EventType</summary>
        EventTypeId,
        /// <summary>Foreign key reference to table Member</summary>
        MemberId,
    }
    /// <summary>
    /// A list of Puzzle foreign keys.
    /// </summary>
    public enum PuzzleFK
    {
        /// <summary>Foreign key reference to table Board</summary>
        BoardId,
        /// <summary>Foreign key reference to table DifficultyLevel</summary>
        DifficultyLevelId,
    }
    /// <summary>
    /// A list of Solution foreign keys.
    /// </summary>
    public enum SolutionFK
    {
        /// <summary>Foreign key reference to table Puzzle</summary>
        PuzzleId,
        /// <summary>Foreign key reference to table Member</summary>
        MemberId,
    }
    #endregion Entity foreign keys

    #region Stored Procedure related
    /// <summary>
    /// A list of all available stored procedures in the model.
    /// </summary>
    public enum StoredProcedure
    {
        /// <summary>Reference to the 'dbo.sp_alterdiagram' stored procedure.  For mapping use the storedProcedureTransformation dictionary.</summary>
        DbospAlterdiagram,
        /// <summary>Reference to the 'dbo.sp_creatediagram' stored procedure.  For mapping use the storedProcedureTransformation dictionary.</summary>
        DbospCreatediagram,
        /// <summary>Reference to the 'dbo.sp_dropdiagram' stored procedure.  For mapping use the storedProcedureTransformation dictionary.</summary>
        DbospDropdiagram,
        /// <summary>Reference to the 'dbo.sp_helpdiagramdefinition' stored procedure.  For mapping use the storedProcedureTransformation dictionary.</summary>
        DbospHelpdiagramdefinition,
        /// <summary>Reference to the 'dbo.sp_helpdiagrams' stored procedure.  For mapping use the storedProcedureTransformation dictionary.</summary>
        DbospHelpdiagrams,
        /// <summary>Reference to the 'dbo.sp_renamediagram' stored procedure.  For mapping use the storedProcedureTransformation dictionary.</summary>
        DbospRenamediagram,
        /// <summary>Reference to the 'dbo.sp_upgraddiagrams' stored procedure.  For mapping use the storedProcedureTransformation dictionary.</summary>
        DbospUpgraddiagrams,
    }
    #endregion Stored Procedure related

    #region Synonym related
    /// <summary>
    /// A list of all available synonyms in the model.
    /// </summary>
    public enum Synonym
    {
    }
    #endregion Synonym related

    #region View related
    /// <summary>
    /// A list of all available views in the model.
    /// </summary>
    public enum View
    {
        /// <summary>Reference to the 'dbo.V_DistinctBoardSizes' view.  For mapping use the viewTransformation dictionary.</summary>
        DboVDistinctBoardSizes = 0,
        /// <summary>Reference to the 'dbo.V_MemberSolution' view.  For mapping use the viewTransformation dictionary.</summary>
        DboVMemberSolution = 1,
        /// <summary>Reference to the 'dbo.V_MemberStatistics' view.  For mapping use the viewTransformation dictionary.</summary>
        DboVMemberStatistics = 2,
        /// <summary>Reference to the 'dbo.V_PuzzleOfTheDay' view.  For mapping use the viewTransformation dictionary.</summary>
        DboVPuzzleOfTheDay = 3,
        /// <summary>Reference to the 'dbo.V_PuzzleOfTheDaySolution' view.  For mapping use the viewTransformation dictionary.</summary>
        DboVPuzzleOfTheDaySolution = 4,
        /// <summary>Reference to the 'dbo.V_ShareSolution' view.  For mapping use the viewTransformation dictionary.</summary>
        DboVShareSolution = 5,
        /// <summary>Reference to the 'dbo.V_SolutionRanking' view.  For mapping use the viewTransformation dictionary.</summary>
        DboVSolutionRanking = 6,
    }
    #endregion View related

    #region Template related
    /// <summary>
    /// A list of all available templates assoicated with this project.
    /// </summary>
    public enum Template
    {
    }
    #endregion Template related

    #region Entity Data Values
    /// <summary>
    /// A list of difficulty level values.
    /// </summary>
    public enum DifficultyLevel
    {
        /// <summary>A puzzle for those learning how to play.</summary>
        Beginner = 9,
        /// <summary>Put on your thinking caps - prepare for a master challenge!</summary>
        Challenging = 7,
        /// <summary>A puzzle for those just looking to relax.</summary>
        Easy = 1,
        /// <summary>You are aware of most strategies and are willing to dig deep.</summary>
        Hard = 6,
        /// <summary>For those who know the basics and want to learn more.</summary>
        Medium = 5,
    }
    /// <summary>
    /// A list of event type values.
    /// </summary>
    public enum EventType
    {
        /// <summary>Change Password</summary>
        ChangePassword = 7,
        /// <summary>Email Address Validated</summary>
        EmailAddressValidated = 4,
        /// <summary>Exception</summary>
        Exception = 6,
        /// <summary>Member Signin Failure</summary>
        MemberSigninFailure = 3,
        /// <summary>Member Sign In Success</summary>
        MemberSignInSuccess = 2,
        /// <summary>Member Signup</summary>
        MemberSignup = 1,
        /// <summary>Puzzle Solved</summary>
        PuzzleSolved = 5,
    }
    #endregion Entity Data Values

} //Namespace
// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 14, 2023 11:18:11 AM
// File             : EventHistoryBase.cs
// ************************************************************************

using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

using KnightsTour.CoreLibrary;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace KnightsTour
{
    /// <summary>
    /// The EventHistoryBase class which tightly binds the model to the object.  Inherits <seealso cref="EventHistoryLiteBase" /> and implements <seealso cref="KnightsTour.CoreLibrary.IEntity{T}" />
    /// Generated On: October 14, 2023 at 11:18:11 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// This class should NOT be modified - any extensions or overrides should be completed in the extended class <seealso cref="EventHistory" />.
    /// </remarks>
    public abstract class EventHistoryBase : EventHistoryLiteBase, KnightsTour.CoreLibrary.IEntity<int?>
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="EventHistoryBase"/> class.
        /// Initializes a new instance of the <see cref="EventHistoryBase"/> class initialized with default properties.
        /// </summary>
        public EventHistoryBase() : base()
        {
            Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventHistoryBase"/> class.
        /// Initializes a new empty instance of the EventHistoryBase class with the given primary key.
        /// </summary>
        /// <param name="id">The primary key value.</param>
        public EventHistoryBase(int? id)
        {
            Initialize();
            SetPrimaryKey(id);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventHistoryBase"/> class.
        /// Initializes a new empty instance of the EventHistoryBase class from the record in a data reader populating only the EventHistory columns specified.
        /// </summary>
        /// <param name="record">A record returned from a database reader.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.EventHistoryProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public EventHistoryBase(IDataRecord record, List<Enumerations.EventHistoryProperty> columnsToInclude = null)
        {
            Initialize();

            // If not specified, default to all columns.
            if (columnsToInclude == null)
            {
                columnsToInclude = new List<Enumerations.EventHistoryProperty>() { Enumerations.EventHistoryProperty.All };
            }

            // Primary key must always be passed.
            EventHistoryId = record.ValueAs<int?>("EventHistoryId");
            if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.EventTypeId))
            {
                EventTypeId = record.ValueAs<int?>("EventTypeId");
            }
            if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.EventDate))
            {
                EventDate = record.ValueAs<DateTime>("EventDate");
            }
            if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.SourceInternetAddress))
            {
                SourceInternetAddress = record.ValueAs<string>("SourceInternetAddress");
            }
            if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.Country))
            {
                Country = record.ValueAs<string>("Country");
            }
            if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.Region))
            {
                Region = record.ValueAs<string>("Region");
            }
            if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.City))
            {
                City = record.ValueAs<string>("City");
            }
            if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.ZipPostal))
            {
                ZipPostal = record.ValueAs<string>("ZipPostal");
            }
            if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.Context))
            {
                Context = record.ValueAs<string>("Context");
            }
            if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.MemberId))
            {
                MemberId = record.ValueAs<int?>("MemberId");
            }

            // Link the primary key to the base Id field.
            SetPrimaryKey(EventHistoryId.Value);
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventHistoryBase"/> class.
        /// Initializes a new empty instance of the EventHistoryBase class from a DataRow with the EventHistory columns specified.
        /// </summary>
        /// <param name="record">A <see cref="DataRow"/>.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.EventHistoryProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public EventHistoryBase(DataRow record, List<Enumerations.EventHistoryProperty> columnsToInclude = null)
        {
            if (record != null)
            {
                Initialize();

                // If not specified, default to all columns.
                if (columnsToInclude == null)
                {
                    columnsToInclude = new List<Enumerations.EventHistoryProperty>() { Enumerations.EventHistoryProperty.All };
                }

                // Primary key must always be passed.
                EventHistoryId = record.ValueAs<int?>("EventHistoryId");
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.EventTypeId))
                {
                    EventTypeId = record.ValueAs<int?>("EventTypeId");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.EventDate))
                {
                    EventDate = record.ValueAs<DateTime>("EventDate");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.SourceInternetAddress))
                {
                    SourceInternetAddress = record.ValueAs<string>("SourceInternetAddress");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.Country))
                {
                    Country = record.ValueAs<string>("Country");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.Region))
                {
                    Region = record.ValueAs<string>("Region");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.City))
                {
                    City = record.ValueAs<string>("City");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.ZipPostal))
                {
                    ZipPostal = record.ValueAs<string>("ZipPostal");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.Context))
                {
                    Context = record.ValueAs<string>("Context");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.MemberId))
                {
                    MemberId = record.ValueAs<int?>("MemberId");
                }

                // Link the primary key to the base Id field.
                SetPrimaryKey(EventHistoryId.Value);
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventHistoryBase"/> class.
        /// Initializes a new empty instance of the EventHistoryBase class from a DataRow with the EventHistory columns specified.
        /// </summary>
        /// <param name="eventHistoryLite">A <see cref="EventHistoryLite"/>.</param>
        public EventHistoryBase(EventHistoryLite eventHistoryLite)
        {
            if (eventHistoryLite != null)
            {
                Initialize();

                // Base properties.
                EventHistoryId = eventHistoryLite.EventHistoryId.HasValue && eventHistoryLite.EventHistoryId.Value <= 0 ? null : eventHistoryLite.EventHistoryId;
                EventTypeId = eventHistoryLite.EventTypeId.HasValue && eventHistoryLite.EventTypeId.Value <= 0 ? null : eventHistoryLite.EventTypeId;
                EventDate = eventHistoryLite.EventDate;
                SourceInternetAddress = eventHistoryLite.SourceInternetAddress;
                Country = eventHistoryLite.Country;
                Region = eventHistoryLite.Region;
                City = eventHistoryLite.City;
                ZipPostal = eventHistoryLite.ZipPostal;
                Context = eventHistoryLite.Context;
                MemberId = eventHistoryLite.MemberId.HasValue && eventHistoryLite.MemberId.Value <= 0 ? null : eventHistoryLite.MemberId;

                // Also convert the lite FK reference objects.
                if (eventHistoryLite.EventType != null)
                {
                    this.EventType = new EventType(eventHistoryLite.EventType);
                }
                if (eventHistoryLite.Member != null)
                {
                    this.Member = new Member(eventHistoryLite.Member);
                }
                // Link the primary key to the base Id field.
                SetPrimaryKey(EventHistoryId);
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventHistoryBase"/> class.
        /// Initializes a new empty instance of the EventHistoryBase class from a DataRow with the EventHistory columns specified.
        /// </summary>
        /// <param name="record">A dynamic Expando Object.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.EventHistoryProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public EventHistoryBase(ExpandoObject record, List<Enumerations.EventHistoryProperty> columnsToInclude = null)
        {
            if (record != null)
            {
                IDictionary<string, object> recordAsDictionary = (IDictionary<string, object>)record;

                Initialize();

                // If not specified, default to all columns.
                if (columnsToInclude == null)
                {
                    columnsToInclude = new List<Enumerations.EventHistoryProperty>() { Enumerations.EventHistoryProperty.All };
                }
                else if (!columnsToInclude.Contains(Enumerations.EventHistoryProperty.All))
                {
                    // Primary key must always be passed.
                    EventHistoryId = recordAsDictionary.ValueAs<int?>("EventHistoryId");
                }

                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.EventTypeId))
                {
                    EventTypeId = recordAsDictionary.ValueAs<int?>("EventTypeId");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.EventDate))
                {
                    EventDate = recordAsDictionary.ValueAs<DateTime>("EventDate");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.SourceInternetAddress))
                {
                    SourceInternetAddress = recordAsDictionary.ValueAs<string>("SourceInternetAddress");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.Country))
                {
                    Country = recordAsDictionary.ValueAs<string>("Country");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.Region))
                {
                    Region = recordAsDictionary.ValueAs<string>("Region");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.City))
                {
                    City = recordAsDictionary.ValueAs<string>("City");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.ZipPostal))
                {
                    ZipPostal = recordAsDictionary.ValueAs<string>("ZipPostal");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.Context))
                {
                    Context = recordAsDictionary.ValueAs<string>("Context");
                }
                if (columnsToInclude.Contains(Enumerations.EventHistoryProperty.All) || columnsToInclude.Contains(Enumerations.EventHistoryProperty.MemberId))
                {
                    MemberId = recordAsDictionary.ValueAs<int?>("MemberId");
                }

                // Link the primary key to the base Id field.
                SetPrimaryKey(EventHistoryId.Value);
            }
        }
        #endregion Constructor(s)

        #region Declarations
        KnightsTour.CoreLibrary.IStorageHandler storageHandler = null; // Storage handler reference used for lazy loading.
        KnightsTour.EventType _eventType = null; // Private EventType (by EventTypeId) reference used for graph hydraion.  Lazy loaded if not initialized explicitly.
        KnightsTour.Member _member = null; // Private Member (by MemberId) reference used for graph hydraion.  Lazy loaded if not initialized explicitly.
        #endregion Declarations

        #region Properties

        /// <summary>
        /// The override implementation of the base Id interface property.
        /// </summary>
        /// <value>
        /// The id.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public new int? Id
        {
            get
            {
                return EventHistoryId;
            }
            set
            {
                EventHistoryId = value;
            }
        }

        /// <summary>
        /// Gets or sets the related EventType (by EventTypeId) entity reference.  Lazy loaded unless specified.
        /// </summary>
        /// <value>
        /// The event type.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public new KnightsTour.EventType EventType
        {
            get
            {
                if ((_eventType == null || _eventType.IsNew) && EventTypeId.HasValue)
                {
                    _eventType = EventTypeId.HasValue ? new EventTypeLogic(StorageHandler, UserName).GetById(EventTypeId.Value) : new EventType();
                }
                return _eventType;
            }
            set
            {
                _eventType = value;
            }
        }

        /// <summary>
        /// Gets or sets the related Member (by MemberId) entity reference.  Lazy loaded unless specified.
        /// </summary>
        /// <value>
        /// The member.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public new KnightsTour.Member Member
        {
            get
            {
                if ((_member == null || _member.IsNew) && MemberId.HasValue)
                {
                    _member = MemberId.HasValue ? new MemberLogic(StorageHandler, UserName).GetById(MemberId.Value) : new Member();
                }
                return _member;
            }
            set
            {
                _member = value;
            }
        }

        /// <summary>
        /// The primary key column for this entity.
        /// </summary>
        /// <value>
        /// The primary key.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public Enumerations.EventHistoryProperty PrimaryKey
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the field validations.
        /// </summary>
        /// <value>
        /// The field validations.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public List<FieldValidator> FieldValidations
        {
            get;
            set;
        }

        /// <summary>
        /// The insert header for bulk SQL operations.
        /// </summary>
        /// <value>
        /// The s q l insert bulk header.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string SQLInsertBulkHeader
        {
            get
            {
                if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.AutoIncrement)
                {
                    return $"INSERT INTO {StorageProvider.GetTableSQL(EntityMapper.EntityNameTransformation[EntityName], TableSchema)} ({StorageProvider.GetColumnSQL("EventTypeId")}, {StorageProvider.GetColumnSQL("EventDate")}, {StorageProvider.GetColumnSQL("SourceInternetAddress")}, {StorageProvider.GetColumnSQL("Country")}, {StorageProvider.GetColumnSQL("Region")}, {StorageProvider.GetColumnSQL("City")}, {StorageProvider.GetColumnSQL("ZipPostal")}, {StorageProvider.GetColumnSQL("Context")}, {StorageProvider.GetColumnSQL("MemberId")})";
                }
                else
                {
                    return $"INSERT INTO {StorageProvider.GetTableSQL(EntityMapper.EntityNameTransformation[EntityName], TableSchema)} ({StorageProvider.GetColumnSQL("EventTypeId")}, {StorageProvider.GetColumnSQL("EventDate")}, {StorageProvider.GetColumnSQL("SourceInternetAddress")}, {StorageProvider.GetColumnSQL("Country")}, {StorageProvider.GetColumnSQL("Region")}, {StorageProvider.GetColumnSQL("City")}, {StorageProvider.GetColumnSQL("ZipPostal")}, {StorageProvider.GetColumnSQL("Context")}, {StorageProvider.GetColumnSQL("MemberId")})";
                }
            }
        }

        /// <summary>
        /// The SQL safe insert row for bulk SQL operations.
        /// </summary>
        /// <value>
        /// The s q l insert bulk row.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string SQLInsertBulkRow
        {
            get
            {
                if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.AutoIncrement)
                {
                    return $"({EventTypeId.SafeSQL()}, {EventDate.SafeSQL()}, {SourceInternetAddress.SafeSQL()}, {Country.SafeSQL()}, {Region.SafeSQL()}, {City.SafeSQL()}, {ZipPostal.SafeSQL()}, {Context.SafeSQL()}, {MemberId.SafeSQL()})";
                }
                else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Manual)
                {
                    return $"({EventHistoryId.SafeSQL()}, {EventTypeId.SafeSQL()}, {EventDate.SafeSQL()}, {SourceInternetAddress.SafeSQL()}, {Country.SafeSQL()}, {Region.SafeSQL()}, {City.SafeSQL()}, {ZipPostal.SafeSQL()}, {Context.SafeSQL()}, {MemberId.SafeSQL()})";
                }
                else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Sequence)
                {
                    return $"({StorageProvider.GetTableSQL(EntityMapper.SequenceMapper[EntityName], TableSchema)}.NEXTVAL, {EventTypeId.SafeSQL()}, {EventDate.SafeSQL()}, {SourceInternetAddress.SafeSQL()}, {Country.SafeSQL()}, {Region.SafeSQL()}, {City.SafeSQL()}, {ZipPostal.SafeSQL()}, {Context.SafeSQL()}, {MemberId.SafeSQL()})";
                }
                else
                {
                    throw new Exception($"Unhandled PK Insert Configuration: {StorageHandler.PKInsertConfiguration.ToString()}");
                }
            }
        }

        /// <summary>
        /// The insert SQL statement for single records.
        /// </summary>
        /// <value>
        /// The s q l insert statement.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public KnightsTour.CoreLibrary.IStorageStatement SQLInsertStatement
        {
            get
            {
                KnightsTour.CoreLibrary.StorageStatement statement = new KnightsTour.CoreLibrary.StorageStatement();

                if (KnightsTour.Context.UseStoredProcedureIntegration)
                {
                    statement.CommandType = System.Data.CommandType.StoredProcedure;
                    statement.Statement = GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType.Insert);
                    statement.Parameters = new List<KnightsTour.CoreLibrary.IParameter>
                    {
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}EventTypeId", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.EventTypeId)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}SourceInternetAddress", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.SourceInternetAddress)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Country", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.Country)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Region", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.Region)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}City", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.City)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}ZipPostal", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.ZipPostal)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Context", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.Context)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}MemberId", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.MemberId)),
                    };
                }
                else
                {
                    StringBuilder sql = new StringBuilder(SQLInsertBulkHeader);

                    sql.Append(" VALUES(");
                    foreach (Enumerations.EventHistoryPropertyNotComputed property in Enum.GetValues(typeof(Enumerations.EventHistoryPropertyNotComputed)))
                    {
                        if (property != Enumerations.EventHistoryPropertyNotComputed.All)
                        {
                            if (ConvertProperty(property) != PrimaryKey)
                            {
                                sql.Append($"{StorageProvider.GetParameterPrefix()}{property.ToString()}, ");
                                statement.Parameters.Add(new KnightsTour.CoreLibrary.GenericParameter(StorageProvider.GetParameterPrefix() + property.ToString(), GetDBValue(property), GetDataType(property)));
                            }
                            else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Sequence)
                            {
                                sql.Append($"{EntityMapper.GetSequenceName(EntityName)}.NEXTVAL, ");
                            }
                            else if (PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Manual)
                            {
                                sql.Append($"{StorageProvider.GetParameterPrefix()}{property.ToString()}, ");
                                statement.Parameters.Add(new KnightsTour.CoreLibrary.GenericParameter(StorageProvider.GetParameterPrefix() + property.ToString(), GetDBValue(property), GetDataType(property)));
                            }
                        }
                    }

                    // Remove the trailing comma and space.
                    sql = sql.Remove(sql.Length - 2, 2);
                    sql.Append(")");

                    statement.Statement = sql.ToString();
                }

                return statement;
            }
        }

        /// <summary>
        /// The update SQL statement for single records.
        /// </summary>
        /// <value>
        /// The s q l update statement.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public KnightsTour.CoreLibrary.IStorageStatement SQLUpdateStatement
        {
            get
            {
                KnightsTour.CoreLibrary.StorageStatement statement = new KnightsTour.CoreLibrary.StorageStatement();

                if (KnightsTour.Context.UseStoredProcedureIntegration)
                {
                    statement.CommandType = System.Data.CommandType.StoredProcedure;
                    statement.Statement = GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType.Update);
                    statement.Parameters = new List<KnightsTour.CoreLibrary.IParameter>
                    {
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}EventHistoryId", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.EventHistoryId)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}EventTypeId", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.EventTypeId)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}EventDate", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.EventDate)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}SourceInternetAddress", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.SourceInternetAddress)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Country", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.Country)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Region", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.Region)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}City", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.City)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}ZipPostal", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.ZipPostal)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}Context", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.Context)),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}MemberId", GetDBValue(KnightsTour.Enumerations.EventHistoryProperty.MemberId)),
                    };
                }
                else
                {
                    StringBuilder sql = new StringBuilder($"UPDATE {StorageProvider.GetTableSQL(EntityMapper.EntityNameTransformation[EntityName], TableSchema)} SET ");

                    foreach (Enumerations.EventHistoryPropertyNotComputed property in Enum.GetValues(typeof(Enumerations.EventHistoryPropertyNotComputed)))
                    {
                        if (property != Enumerations.EventHistoryPropertyNotComputed.All)
                        {
                            if (IsModified(ConvertProperty(property)))
                            {
                                sql.Append($"{StorageProvider.GetColumnSQL(EntityMapper.GetPropertyName(ConvertProperty(property)))} = {StorageProvider.GetParameterPrefix()}{property.ToString()}, ");
                                statement.Parameters.Add(new KnightsTour.CoreLibrary.GenericParameter(StorageProvider.GetParameterPrefix() + property.ToString(), GetDBValue(property), GetDataType(property)));
                            }
                        }
                    }

                    sql = sql.Remove(sql.Length - 2, 2); //Remove the trailing comma and space
                    sql.Append($" WHERE {StorageProvider.GetColumnSQL(PrimaryKeyField)} = {EventHistoryId.SafeSQL()}");

                    statement.Statement = sql.ToString();
                }

                return statement;
            }
        }

        /// <summary>
        /// Gets or sets the initial state for this entity.
        /// </summary>
        /// <value>
        /// The initial state.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public EventHistoryLiteBase InitialState
        {
            get;
            set;
        }

        /// <summary>
        /// Gets a value indicating whether this EventHistory instance is new or not.
        /// </summary>
        /// <value>
        /// The is new.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public bool IsNew
        {
            get
            {
                return !EventHistoryId.HasValue;
            }
        }

        /// <summary>
        /// Gets the related name of the actual database table.
        /// </summary>
        /// <value>
        /// The table name.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string TableName
        {
            get
            {
                return EntityMapper.GetDbEntityName(EntityName);
            }
        }

        /// <summary>
        /// Gets the related name of the actual database schema.
        /// </summary>
        /// <value>
        /// The table schema.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string TableSchema
        {
            get
            {
                return "dbo";
            }
        }

        /// <summary>
        /// Gets the primary key default value.
        /// </summary>
        /// <value>
        /// The p k default value.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string PKDefaultValue
        {
            get
            {
                return "";
            }
        }

        /// <summary>
        /// Gets or sets the storage handler from the default configured source unless otherwise set.
        /// </summary>
        /// <value>
        /// The storage handler.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public KnightsTour.CoreLibrary.IStorageHandler StorageHandler
        {
            get
            {
                if (storageHandler == null)
                {
                    storageHandler = StorageProvider.GetHandler();
                }
                return storageHandler;
            }
            set
            {
                storageHandler = value;
            }
        }

        /// <summary>
        /// The configured label or label collection configured, or the PK number or (new) if a new record.
        /// </summary>
        /// <value>
        /// The instance label.
        /// </value>
        public string InstanceLabel
        {
            get
            {
                if (IsNew)
                {
                    return "(New)";
                }
                else
                {
                    return EventHistoryId.Value.ToString();
                }
            }
        }

        /// <summary>
        /// Returns the EventDate formatted with either the projects default date format or the custom property date format if defined.
        /// </summary>
        /// <value>
        /// The event date formatted.
        /// </value>
        public string EventDateFormatted
        {
            get
            {
                return EventDate.ToString("yyyy-MM-dd");
            }
        }
        #endregion Properties

        #region Methods

        /// <summary>
        /// Validates the object using the defined field validators.
        /// </summary>
        public KnightsTour.CoreLibrary.IActionResponse Validate()
        {
            return KnightsTour.Context.ValidationHandler.ValidateEntity<int?>(Enumerations.EntityName.EventHistory.ToString(), TableSchema, this, IsNew);
        }

        /// <summary>
        /// Sets the original properties (required for object state checking).
        /// </summary>
        public void SetOriginalProperties()
        {
            InitialState = new EventHistoryLite(this);
        }

        /// <summary>
        /// Serializes the object based on the defined serialization strategy defined in the <seealso cref="AuditHandler" />.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public string SerializeObject()
        {
            string objectSerialization = string.Empty;
            switch (KnightsTour.Context.AuditHandler.SerializationStrategy)
            {
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.XML:
                    objectSerialization = KnightsTour.CoreLibrary.XMLAssistant.Serialize(ToDynamic());
                    break;
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.JSON:
                    objectSerialization = ToDynamic().ToString();
                    break;
                default:
                    throw new NotImplementedException($"{KnightsTour.Context.AuditHandler.SerializationStrategy.ToString()} serialization strategy not implemented.");
            }
            return objectSerialization;
        }

        /// <summary>
        /// Serializes the object differential based on the defined serialization strategy defined in the <seealso cref="AuditHandler" />.
        /// </summary>
        /// <returns>System.String.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public string SerializeDifferential()
        {
            string objectSerialization = string.Empty;
            switch (KnightsTour.Context.AuditHandler.SerializationStrategy)
            {
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.XML:
                    objectSerialization = KnightsTour.CoreLibrary.XMLAssistant.Serialize(ToDynamic(KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.ModifiedPropertiesOnly));
                    break;
                case KnightsTour.CoreLibrary.Enumerations.SerializationStrategy.JSON:
                    objectSerialization = ToDynamic(KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.ModifiedPropertiesOnly).ToString();
                    break;
                default:
                    throw new NotImplementedException($"{KnightsTour.Context.AuditHandler.SerializationStrategy.ToString()} serialization strategy not implemented.");
            }
            return objectSerialization;
        }

        /// <summary>
        /// Creates a dynamic object based on the passed <seealso cref="KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy" />.
        /// </summary>
        /// <param name="strategy">The strategy.</param>
        /// <returns>dynamic.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public dynamic ToDynamic(KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy strategy = KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.AllProperties)
        {
            dynamic dynamicEventHistory = new JObject();
            switch (strategy)
            {
                case KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.AllProperties:
                    dynamicEventHistory.EventHistoryId = EventHistoryId;
                    dynamicEventHistory.EventTypeId = EventTypeId;
                    dynamicEventHistory.EventDate = EventDate;
                    dynamicEventHistory.SourceInternetAddress = SourceInternetAddress;
                    dynamicEventHistory.Country = Country;
                    dynamicEventHistory.Region = Region;
                    dynamicEventHistory.City = City;
                    dynamicEventHistory.ZipPostal = ZipPostal;
                    dynamicEventHistory.Context = Context;
                    dynamicEventHistory.MemberId = MemberId;
                    break;
                case KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.AllPropertiesWithOriginals:
                    dynamicEventHistory.EventHistoryId = EventHistoryId;
                    dynamicEventHistory.EventHistoryId_Original = InitialState.EventHistoryId;
                    dynamicEventHistory.EventTypeId = EventTypeId;
                    dynamicEventHistory.EventTypeId_Original = InitialState.EventTypeId;
                    dynamicEventHistory.EventDate = EventDate;
                    dynamicEventHistory.EventDate_Original = InitialState.EventDate;
                    dynamicEventHistory.SourceInternetAddress = SourceInternetAddress;
                    dynamicEventHistory.SourceInternetAddress_Original = InitialState.SourceInternetAddress;
                    dynamicEventHistory.Country = Country;
                    dynamicEventHistory.Country_Original = InitialState.Country;
                    dynamicEventHistory.Region = Region;
                    dynamicEventHistory.Region_Original = InitialState.Region;
                    dynamicEventHistory.City = City;
                    dynamicEventHistory.City_Original = InitialState.City;
                    dynamicEventHistory.ZipPostal = ZipPostal;
                    dynamicEventHistory.ZipPostal_Original = InitialState.ZipPostal;
                    dynamicEventHistory.Context = Context;
                    dynamicEventHistory.Context_Original = InitialState.Context;
                    dynamicEventHistory.MemberId = MemberId;
                    dynamicEventHistory.MemberId_Original = InitialState.MemberId;
                    break;
                case KnightsTour.CoreLibrary.Enumerations.DynamicObjectStrategy.ModifiedPropertiesOnly:
                    if (IsModified(Enumerations.EventHistoryProperty.EventHistoryId))
                    {
                        dynamicEventHistory.EventHistoryId = EventHistoryId;
                        dynamicEventHistory.EventHistoryId_Original = InitialState.EventHistoryId;
                    }
                    if (IsModified(Enumerations.EventHistoryProperty.EventTypeId))
                    {
                        dynamicEventHistory.EventTypeId = EventTypeId;
                        dynamicEventHistory.EventTypeId_Original = InitialState.EventTypeId;
                    }
                    if (IsModified(Enumerations.EventHistoryProperty.EventDate))
                    {
                        dynamicEventHistory.EventDate = EventDate;
                        dynamicEventHistory.EventDate_Original = InitialState.EventDate;
                    }
                    if (IsModified(Enumerations.EventHistoryProperty.SourceInternetAddress))
                    {
                        dynamicEventHistory.SourceInternetAddress = SourceInternetAddress;
                        dynamicEventHistory.SourceInternetAddress_Original = InitialState.SourceInternetAddress;
                    }
                    if (IsModified(Enumerations.EventHistoryProperty.Country))
                    {
                        dynamicEventHistory.Country = Country;
                        dynamicEventHistory.Country_Original = InitialState.Country;
                    }
                    if (IsModified(Enumerations.EventHistoryProperty.Region))
                    {
                        dynamicEventHistory.Region = Region;
                        dynamicEventHistory.Region_Original = InitialState.Region;
                    }
                    if (IsModified(Enumerations.EventHistoryProperty.City))
                    {
                        dynamicEventHistory.City = City;
                        dynamicEventHistory.City_Original = InitialState.City;
                    }
                    if (IsModified(Enumerations.EventHistoryProperty.ZipPostal))
                    {
                        dynamicEventHistory.ZipPostal = ZipPostal;
                        dynamicEventHistory.ZipPostal_Original = InitialState.ZipPostal;
                    }
                    if (IsModified(Enumerations.EventHistoryProperty.Context))
                    {
                        dynamicEventHistory.Context = Context;
                        dynamicEventHistory.Context_Original = InitialState.Context;
                    }
                    if (IsModified(Enumerations.EventHistoryProperty.MemberId))
                    {
                        dynamicEventHistory.MemberId = MemberId;
                        dynamicEventHistory.MemberId_Original = InitialState.MemberId;
                    }
                    break;
                default:
                    throw new NotImplementedException($"{strategy.ToString()} strategy not implemented.");
            }
            return dynamicEventHistory;
        }

        /// <summary>
        /// Determines whether this instance is modified.
        /// </summary>
        /// <returns><c>true</c> if this instance is modified; otherwise, <c>false</c>.</returns>
        public bool IsModified()
        {
            foreach (Enumerations.EventHistoryProperty property in Enum.GetValues(typeof(Enumerations.EventHistoryProperty)))
            {
                if (property != Enumerations.EventHistoryProperty.All)
                {
                    if (IsModified(property))
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Determines whether the specified property is modified.
        /// </summary>
        /// <param name="property">The EventHistory property to test.</param>
        /// <returns><c>true</c> if the specified property is modified; otherwise, <c>false</c>.</returns>
        /// <exception cref="NotImplementedException"></exception>
        public bool IsModified(Enumerations.EventHistoryProperty property)
        {
            switch (property)
            {
                case Enumerations.EventHistoryProperty.EventHistoryId:
                    return EventHistoryId != InitialState.EventHistoryId;
                case Enumerations.EventHistoryProperty.EventTypeId:
                    return EventTypeId != InitialState.EventTypeId;
                case Enumerations.EventHistoryProperty.EventDate:
                    return EventDate != InitialState.EventDate;
                case Enumerations.EventHistoryProperty.SourceInternetAddress:
                    return SourceInternetAddress != InitialState.SourceInternetAddress;
                case Enumerations.EventHistoryProperty.Country:
                    return Country != InitialState.Country;
                case Enumerations.EventHistoryProperty.Region:
                    return Region != InitialState.Region;
                case Enumerations.EventHistoryProperty.City:
                    return City != InitialState.City;
                case Enumerations.EventHistoryProperty.ZipPostal:
                    return ZipPostal != InitialState.ZipPostal;
                case Enumerations.EventHistoryProperty.Context:
                    return Context != InitialState.Context;
                case Enumerations.EventHistoryProperty.MemberId:
                    return MemberId != InitialState.MemberId;
                case Enumerations.EventHistoryProperty.All:
                    return IsModified();
                default:
                    throw new NotImplementedException($"{property.ToString()} property not implemented.");
            }
        }

        /// <summary>
        /// Initializes the properties of this class.
        /// </summary>
        public void Initialize()
        {
            MethodWrappers.CommonWrapper(baseInitialize, KnightsTour.CoreLibrary.Enumerations.ApplicationTier.Business, new object[] { });
        }

        /// <summary>
        /// The privately wrapped implementation of the Initialize method.
        /// </summary>
        /// <param name="arguments">The generic arguments sent to this method from the public wrapped call.</param>
        private void baseInitialize(object[] arguments)
        {
            InitialState = new EventHistoryLite();

            // Base Entity properties.
            EntityName = Enumerations.EntityName.EventHistory.ToString();
            PrimaryKey = Enumerations.EventHistoryProperty.EventHistoryId;
            PrimaryKeyField = EntityMapper.GetPropertyName(PrimaryKey);
            PrimaryKeyFieldFormatted = "EventHistoryId";
            PKInsertConfiguration = KnightsTour.CoreLibrary.Enumerations.InsertPKRule.AutoIncrement;

            // Table properties.
            EventHistoryId = null;
            EventTypeId = null;
            EventDate = DateTime.Now;
            SourceInternetAddress = string.Empty;
            Country = string.Empty;
            Region = string.Empty;
            City = string.Empty;
            ZipPostal = string.Empty;
            Context = string.Empty;
            MemberId = null;
        }

        /// <summary>
        /// Clones this instance.
        /// </summary>
        /// <returns>A cloned EventHistory.</returns>
        public EventHistory Clone()
        {
            EventHistory eventHistory = new EventHistory();

            eventHistory.EventHistoryId = EventHistoryId;
            eventHistory.EventTypeId = EventTypeId;
            eventHistory.EventDate = EventDate;
            eventHistory.SourceInternetAddress = SourceInternetAddress;
            eventHistory.Country = Country;
            eventHistory.Region = Region;
            eventHistory.City = City;
            eventHistory.ZipPostal = ZipPostal;
            eventHistory.Context = Context;
            eventHistory.MemberId = MemberId;

            return eventHistory;
        }

        /// <summary>
        /// Returns a readable summary of this object.
        /// </summary>
        /// <returns>System.String.</returns>
        public override string ToString()
        {
            return SerializeObject();
        }

        /// <summary>
        /// Converts a non computed property to a regular property.
        /// </summary>
        /// <param name="property">The non computed EventHistory property to convert.</param>
        /// <returns>The regular related property value.</returns>
        /// <exception cref="ArgumentException"></exception>
        private Enumerations.EventHistoryProperty ConvertProperty(Enumerations.EventHistoryPropertyNotComputed property)
        {
            foreach (Enumerations.EventHistoryProperty regularProperty in Enum.GetValues(typeof(Enumerations.EventHistoryProperty)))
            {
                if (regularProperty.ToString() == property.ToString())
                {
                    return regularProperty;
                }
            }

            throw new Exception($"Unable to convert non computed property '{property.ToString()}' of type 'EventHistoryPropertyNotComputed' to a 'EventHistoryProperty'.");
        }

        /// <summary>
        /// Returns the underlying object value.
        /// </summary>
        /// <param name="property">The not computed EventHistory property to test.</param>
        /// <returns>The dynamic underlying property value.</returns>
        /// <exception cref="ArgumentException"></exception>
        public dynamic GetDBValue(Enumerations.EventHistoryPropertyNotComputed property)
        {
            return GetDBValue(ConvertProperty(property));
        }

        /// <summary>
        /// Returns the underlying object data type for this language.
        /// </summary>
        /// <param name="property">The non computed EventHistory property to test.</param>
        /// <returns>The data type for this property.</returns>
        /// <exception cref="ArgumentException"></exception>
        private string GetDataType(Enumerations.EventHistoryPropertyNotComputed property)
        {
            return GetDataType(ConvertProperty(property));
        }

        /// <summary>
        /// Returns the underlying object value.
        /// </summary>
        /// <param name="property">The EventHistory property to test.</param>
        /// <returns>The dynamic underlying property value.</returns>
        /// <exception cref="ArgumentException"></exception>
        public dynamic GetDBValue(Enumerations.EventHistoryProperty property)
        {
            switch (property)
            {
                case Enumerations.EventHistoryProperty.EventHistoryId:
                    if (EventHistoryId == null) return DBNull.Value;
                    return EventHistoryId;
                case Enumerations.EventHistoryProperty.EventTypeId:
                    if (EventTypeId == null) return DBNull.Value;
                    return EventTypeId;
                case Enumerations.EventHistoryProperty.EventDate:
                    return EventDate;
                case Enumerations.EventHistoryProperty.SourceInternetAddress:
                    if (SourceInternetAddress == null) return DBNull.Value;
                    return SourceInternetAddress;
                case Enumerations.EventHistoryProperty.Country:
                    if (Country == null) return DBNull.Value;
                    return Country;
                case Enumerations.EventHistoryProperty.Region:
                    if (Region == null) return DBNull.Value;
                    return Region;
                case Enumerations.EventHistoryProperty.City:
                    if (City == null) return DBNull.Value;
                    return City;
                case Enumerations.EventHistoryProperty.ZipPostal:
                    if (ZipPostal == null) return DBNull.Value;
                    return ZipPostal;
                case Enumerations.EventHistoryProperty.Context:
                    if (Context == null) return DBNull.Value;
                    return Context;
                case Enumerations.EventHistoryProperty.MemberId:
                    if (MemberId == null) return DBNull.Value;
                    return MemberId;
                default:
                    throw new ArgumentException($"Property {property.ToString()} unhandled.");
            }
        }

        /// <summary>
        /// Returns the underlying object data type for this language.
        /// </summary>
        /// <param name="property">The EventHistory property to test.</param>
        /// <returns>The data type for this property.</returns>
        /// <exception cref="ArgumentException"></exception>
        private string GetDataType(Enumerations.EventHistoryProperty property)
        {
            switch (property)
            {
                case Enumerations.EventHistoryProperty.EventHistoryId:
                    return "int?";
                case Enumerations.EventHistoryProperty.EventTypeId:
                    return "int?";
                case Enumerations.EventHistoryProperty.EventDate:
                    return "DateTime";
                case Enumerations.EventHistoryProperty.SourceInternetAddress:
                    return "string";
                case Enumerations.EventHistoryProperty.Country:
                    return "string";
                case Enumerations.EventHistoryProperty.Region:
                    return "string";
                case Enumerations.EventHistoryProperty.City:
                    return "string";
                case Enumerations.EventHistoryProperty.ZipPostal:
                    return "string";
                case Enumerations.EventHistoryProperty.Context:
                    return "string";
                case Enumerations.EventHistoryProperty.MemberId:
                    return "int?";
                default:
                    throw new ArgumentException($"Property {property.ToString()} unhandled.");
            }
        }

        /// <summary>
        /// Sets the primary key.
        /// </summary>
        /// <param name="id">The EventHistories primary key value.</param>
        public void SetPrimaryKey(int? id)
        {
            EventHistoryId = id;
            Id = id;
            SetOriginalProperties();
        }

        /// <summary>
        /// Updates the individual properties from the lite object.
        /// </summary>
        /// <param name="eventHistoryLite">The EventHistoryLite source object.</param>
        public void UpdateFromLite(EventHistoryLite eventHistoryLite)
        {
            // Do this first just to make sure.
            SetOriginalProperties();

            EventHistoryId = eventHistoryLite.EventHistoryId;
            EventTypeId = eventHistoryLite.EventTypeId;
            EventDate = eventHistoryLite.EventDate;
            SourceInternetAddress = eventHistoryLite.SourceInternetAddress;
            Country = eventHistoryLite.Country;
            Region = eventHistoryLite.Region;
            City = eventHistoryLite.City;
            ZipPostal = eventHistoryLite.ZipPostal;
            Context = eventHistoryLite.Context;
            MemberId = eventHistoryLite.MemberId;
        }

        /// <summary>
        /// Returns the stored procedure name (of a given type) or this class.
        /// </summary>
        /// <param name="type">The stored procedure type.</param>
        public string GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType type)
        {
            string storedProcedureName = string.Empty;

            // The Stored procedure prefix (as defined on the model) is optional, deal with that first.
            if (!string.IsNullOrEmpty(Schema.Model.StoredProcedurePrefix))
            {
                storedProcedureName += $"{Schema.Model.StoredProcedurePrefix}_";
            }

            // Model prefix (optional), entity name then finally the type.
            if (string.IsNullOrEmpty(TableSchema))
            {
                return $"{storedProcedureName}{TextAssistant.PascalCase(OnlyAlpha(TableName, true))}_{type}";
            }
            else
            {
                return $"{TableSchema}.{storedProcedureName}{TextAssistant.PascalCase(OnlyAlpha(TableName, true))}_{type}";
            }
        }
        #endregion Methods

    } // Class
} // Namespace
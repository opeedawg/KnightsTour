// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 14, 2023 11:18:11 AM
// File             : PuzzleLiteBase.cs
// ************************************************************************

using System;
using System.Xml;

namespace KnightsTour
{
    /// <summary>
    /// The PuzzleLiteBase class which is the single place which defines the properties.  Inherits <seealso cref="KnightsTour.CoreLibrary.EntityBase{T}" />
    /// Generated On: October 14, 2023 at 11:18:11 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// This class should NOT be modified - any extensions or overrides should be completed in the extended class <seealso cref="PuzzleLite" />.
    /// </remarks>
    public abstract class PuzzleLiteBase : KnightsTour.CoreLibrary.EntityBase<int?>
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="PuzzleLiteBase"/> class.
        /// Initializes a new instance of the <see cref="PuzzleLiteBase"/> class.
        /// </summary>
        public PuzzleLiteBase()
        {
            OnIdSet += PuzzleLiteBase_OnIdSet;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PuzzleLiteBase"/> class.
        /// Initializes a new instance of the <see cref="PuzzleLite"/> class from its full class representation.
        /// </summary>
        /// <param name="puzzleBase">The <see cref="PuzzleBase"/>.</param>
        public PuzzleLiteBase(PuzzleBase puzzleBase)
        {
            // Only do this if the object exists.
            if (puzzleBase != null)
            {
                OnIdSet += PuzzleLiteBase_OnIdSet;
                PuzzleId = puzzleBase.PuzzleId;
                PuzzleCode = puzzleBase.PuzzleCode;
                BoardId = puzzleBase.BoardId;
                DifficultyLevelId = puzzleBase.DifficultyLevelId;
                Path = puzzleBase.Path;
                PuzzleOfTheDayDate = puzzleBase.PuzzleOfTheDayDate;

                // Also set the Id field.
                Id = this.PuzzleId;
            }
        }
        #endregion Constructor(s)

        #region Declarations
        KnightsTour.BoardLite _boardLite = null; // Private Board (by BoardId) reference used for lite graph hydraion.  NOT lazy loaded.
        KnightsTour.DifficultyLevelLite _difficultyLevelLite = null; // Private DifficultyLevel (by DifficultyLevelId) reference used for lite graph hydraion.  NOT lazy loaded.
        #endregion Declarations

        #region Properties

        /// <summary>
        /// Gets or sets the related BoardLite (by BoardId) entity reference.  Never lazy loaded.
        /// </summary>
        /// <value>
        /// The board.
        /// </value>
        public KnightsTour.BoardLite Board
        {
            get
            {
                return _boardLite;
            }
            set
            {
                _boardLite = value;
            }
        }

        /// <summary>
        /// Gets or sets the related DifficultyLevelLite (by DifficultyLevelId) entity reference.  Never lazy loaded.
        /// </summary>
        /// <value>
        /// The difficulty level.
        /// </value>
        public KnightsTour.DifficultyLevelLite DifficultyLevel
        {
            get
            {
                return _difficultyLevelLite;
            }
            set
            {
                _difficultyLevelLite = value;
            }
        }

        /// <summary>
        /// Gets or sets the primary key field puzzle id.
        /// </summary>
        /// <value>
        /// The puzzle id.
        /// </value>
        public int? PuzzleId
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the puzzle code.
        /// </summary>
        /// <value>
        /// The puzzle code.
        /// </value>
        public Guid PuzzleCode
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the board id.
        /// </summary>
        /// <value>
        /// The board id.
        /// </value>
        public int? BoardId
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the difficulty level id.
        /// </summary>
        /// <value>
        /// The difficulty level id.
        /// </value>
        public int? DifficultyLevelId
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the path.
        /// </summary>
        /// <value>
        /// The path.
        /// </value>
        public string Path
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the puzzle of the day date.
        /// </summary>
        /// <value>
        /// The puzzle of the day date.
        /// </value>
        public DateTime? PuzzleOfTheDayDate
        {
            get;
            set;
        }
        #endregion Properties

        #region Methods

        /// <summary>
        /// Invoked when the generic Id field of this class is modified (set).
        /// </summary>
        private void PuzzleLiteBase_OnIdSet()
        {
            PuzzleId = Id;
        }
        #endregion Methods

    } // Class
} // Namespace
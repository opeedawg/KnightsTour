// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 26, 2023 9:31:46 AM
// File             : PuzzleValidationBase.cs
// ************************************************************************

using System;
using System.Collections.Generic;
using System.Xml;

namespace KnightsTour
{
    /// <summary>
    /// Manages and performs base validation for the Puzzle entity.
    /// Generated On: October 26, 2023 at 9:31:46 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// </remarks>
    public class PuzzleValidationBase : KnightsTour.CoreLibrary.IEntityValidator
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="PuzzleValidationBase"/> class.
        /// Initializes a new instance of the <see cref="PuzzleValidation"/> class initialized with default properties.
        /// </summary>
        /// <remarks>
        /// Derived field validations are created here but can be extended, removed or updated from the exended class.
        /// </remarks>
        public PuzzleValidationBase()
        {
            #region Field Validations
            FieldValidations = new List<KnightsTour.CoreLibrary.IFieldValidator>();

            // Puzzle Id.
            FieldValidations.Add(new FieldValidator
            {
                    Table = Enumerations.EntityName.Puzzle.ToString(),
                    FieldName = Enumerations.PuzzleProperty.PuzzleId.ToString(),
                    ObjectType = typeof(int?),
                    MandatoryOnInsert = false,
                    MandatoryOnUpdate = true,
            });

            // Puzzle Code.
            FieldValidations.Add(new FieldValidator
            {
                    Table = Enumerations.EntityName.Puzzle.ToString(),
                    FieldName = Enumerations.PuzzleProperty.PuzzleCode.ToString(),
                    ObjectType = typeof(Guid),
                    MandatoryOnInsert = true,
                    MandatoryOnUpdate = true,
            });

            // Board Id.
            FieldValidations.Add(new FieldValidator
            {
                    Table = Enumerations.EntityName.Puzzle.ToString(),
                    FieldName = Enumerations.PuzzleProperty.BoardId.ToString(),
                    ObjectType = typeof(int?),
                    MandatoryOnInsert = true,
                    MandatoryOnUpdate = true,
            });

            // Difficulty Level Id.
            FieldValidations.Add(new FieldValidator
            {
                    Table = Enumerations.EntityName.Puzzle.ToString(),
                    FieldName = Enumerations.PuzzleProperty.DifficultyLevelId.ToString(),
                    ObjectType = typeof(int?),
                    MandatoryOnInsert = true,
                    MandatoryOnUpdate = true,
            });

            // Path.
            FieldValidations.Add(new FieldValidator
            {
                    Table = Enumerations.EntityName.Puzzle.ToString(),
                    FieldName = Enumerations.PuzzleProperty.Path.ToString(),
                    ObjectType = typeof(string),
                    MandatoryOnInsert = true,
                    MandatoryOnUpdate = true,
            });

            // Puzzle Of The Day Date.
            FieldValidations.Add(new FieldValidator
            {
                    Table = Enumerations.EntityName.Puzzle.ToString(),
                    FieldName = Enumerations.PuzzleProperty.PuzzleOfTheDayDate.ToString(),
                    ObjectType = typeof(DateTime?),
                    MandatoryOnInsert = false,
                    MandatoryOnUpdate = false,
            });
            #endregion //Field Validations

            #region Rule Validations
            RuleValidations = new List<KnightsTour.CoreLibrary.IRuleValidator>();
            #endregion //Rule Validations

            #region Custom Validations
            CustomValidations = new List<KnightsTour.CoreLibrary.ICustomValidator>();
            #endregion //Custom Validations
        }
        #endregion Constructor(s)

        #region Properties

        /// <summary>
        /// Gets or sets the field validations.
        /// </summary>
        /// <value>
        /// The field validations.
        /// </value>
        public List<KnightsTour.CoreLibrary.IFieldValidator> FieldValidations
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the rule validations.
        /// </summary>
        /// <value>
        /// The rule validations.
        /// </value>
        public List<KnightsTour.CoreLibrary.IRuleValidator> RuleValidations
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the custom validations.
        /// </summary>
        /// <value>
        /// The custom validations.
        /// </value>
        public List<KnightsTour.CoreLibrary.ICustomValidator> CustomValidations
        {
            get;
            set;
        }
        #endregion Properties

    } // Class
} // Namespace
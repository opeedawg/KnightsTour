// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 21, 2023 9:55:34 AM
// File             : EntityMetaData.cs
// ************************************************************************

using System;
using System.Collections.Generic;
using System.Xml.Serialization;

using Newtonsoft.Json;

namespace KnightsTour
{
    /// <summary>
    /// Provides meta data on entities.
    /// Generated On: October 21, 2023 at 9:55:34 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// </remarks>
    public class EntityMetaData
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMetaData"/> class.
        /// Creates a meta data instance from the enumerated entity name.
        /// </summary>
        /// <param name="entityName">The enumerated entity name.</param>
        /// <param name="userName">The users name operating on this class.</param>
        public EntityMetaData(Enumerations.EntityName entityName, string userName)
        {
            EntityName = entityName;
            UserName = userName;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMetaData"/> class.
        /// Creates a meta data instance from the entity name.
        /// </summary>
        /// <param name="entityName">The entity name.</param>
        /// <param name="userName">The users name operating on this class.</param>
        public EntityMetaData(string entityName, string userName)
        {
            UserName = userName;
            switch (entityName)
            {
                case "Board":
                    EntityName = Enumerations.EntityName.Board;
                    break;
                case "DifficultyLevel":
                    EntityName = Enumerations.EntityName.DifficultyLevel;
                    break;
                case "EventHistory":
                    EntityName = Enumerations.EntityName.EventHistory;
                    break;
                case "EventType":
                    EntityName = Enumerations.EntityName.EventType;
                    break;
                case "Member":
                    EntityName = Enumerations.EntityName.Member;
                    break;
                case "Puzzle":
                    EntityName = Enumerations.EntityName.Puzzle;
                    break;
                case "Solution":
                    EntityName = Enumerations.EntityName.Solution;
                    break;
            }
        }
        #endregion Constructor(s)

        #region Properties

        /// <summary>
        /// The entity type.
        /// </summary>
        /// <value>
        /// The entity name.
        /// </value>
        public Enumerations.EntityName EntityName
        {
            get;
            set;
        }

        /// <summary>
        /// Returns an instance of the entities Logic class.
        /// </summary>
        /// <value>
        /// The logic.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public dynamic Logic
        {
            get
            {
                switch (EntityName)
                {
                    case Enumerations.EntityName.Board:
                        return new BoardLogic(UserName);
                    case Enumerations.EntityName.DifficultyLevel:
                        return new DifficultyLevelLogic(UserName);
                    case Enumerations.EntityName.EventHistory:
                        return new EventHistoryLogic(UserName);
                    case Enumerations.EntityName.EventType:
                        return new EventTypeLogic(UserName);
                    case Enumerations.EntityName.Member:
                        return new MemberLogic(UserName);
                    case Enumerations.EntityName.Puzzle:
                        return new PuzzleLogic(UserName);
                    case Enumerations.EntityName.Solution:
                        return new SolutionLogic(UserName);
                }

                return null;
            }
        }

        /// <summary>
        /// Returns an instance of the entities class.
        /// </summary>
        /// <value>
        /// The instance.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public dynamic Instance
        {
            get
            {
                switch (EntityName)
                {
                    case Enumerations.EntityName.Board:
                        return new Board();
                    case Enumerations.EntityName.DifficultyLevel:
                        return new DifficultyLevel();
                    case Enumerations.EntityName.EventHistory:
                        return new EventHistory();
                    case Enumerations.EntityName.EventType:
                        return new EventType();
                    case Enumerations.EntityName.Member:
                        return new Member();
                    case Enumerations.EntityName.Puzzle:
                        return new Puzzle();
                    case Enumerations.EntityName.Solution:
                        return new Solution();
                }

                return null;
            }
        }

        /// <summary>
        /// Returns an instance of the entities class.
        /// </summary>
        /// <value>
        /// The instance lite.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public dynamic InstanceLite
        {
            get
            {
                switch (EntityName)
                {
                    case Enumerations.EntityName.Board:
                        return new BoardLite();
                    case Enumerations.EntityName.DifficultyLevel:
                        return new DifficultyLevelLite();
                    case Enumerations.EntityName.EventHistory:
                        return new EventHistoryLite();
                    case Enumerations.EntityName.EventType:
                        return new EventTypeLite();
                    case Enumerations.EntityName.Member:
                        return new MemberLite();
                    case Enumerations.EntityName.Puzzle:
                        return new PuzzleLite();
                    case Enumerations.EntityName.Solution:
                        return new SolutionLite();
                }

                return null;
            }
        }

        /// <summary>
        /// Returns a list of entity specific enumerated columns that are foreign keys.
        /// </summary>
        /// <value>
        /// The foreign key enum.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public List<dynamic> ForeignKeyEnum
        {
            get
            {
                List<dynamic> fks = new List<dynamic>();
                switch (EntityName)
                {
                    case Enumerations.EntityName.Board:
                        foreach(Enumerations.BoardFK val in Enum.GetValues(typeof(Enumerations.BoardFK)))
                        {
                            fks.Add(val);
                        }
                        break;
                    case Enumerations.EntityName.DifficultyLevel:
                        break;
                    case Enumerations.EntityName.EventHistory:
                        foreach(Enumerations.EventHistoryFK val in Enum.GetValues(typeof(Enumerations.EventHistoryFK)))
                        {
                            fks.Add(val);
                        }
                        break;
                    case Enumerations.EntityName.EventType:
                        break;
                    case Enumerations.EntityName.Member:
                        break;
                    case Enumerations.EntityName.Puzzle:
                        foreach(Enumerations.PuzzleFK val in Enum.GetValues(typeof(Enumerations.PuzzleFK)))
                        {
                            fks.Add(val);
                        }
                        break;
                    case Enumerations.EntityName.Solution:
                        foreach(Enumerations.SolutionFK val in Enum.GetValues(typeof(Enumerations.SolutionFK)))
                        {
                            fks.Add(val);
                        }
                        break;
                }

                return fks;
            }
        }

        /// <summary>
        /// Returns a list of dependent related meta data classes.
        /// </summary>
        /// <value>
        /// The dependencies.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public List<KnightsTour.RelatedEntityMetaData> Dependencies
        {
            get
            {
                List<KnightsTour.RelatedEntityMetaData> dependencies = new List<KnightsTour.RelatedEntityMetaData>();
                switch (EntityName)
                {
                    case Enumerations.EntityName.Board:
                        dependencies.Add(new KnightsTour.RelatedEntityMetaData(Enumerations.EntityName.Board, EntityMapper.GetPropertyName(Enumerations.BoardProperty.SourceBoardId), UserName));
                        dependencies.Add(new KnightsTour.RelatedEntityMetaData(Enumerations.EntityName.Puzzle, EntityMapper.GetPropertyName(Enumerations.PuzzleProperty.BoardId), UserName));
                        break;
                    case Enumerations.EntityName.DifficultyLevel:
                        dependencies.Add(new KnightsTour.RelatedEntityMetaData(Enumerations.EntityName.Puzzle, EntityMapper.GetPropertyName(Enumerations.PuzzleProperty.DifficultyLevelId), UserName));
                        break;
                    case Enumerations.EntityName.EventHistory:
                        break;
                    case Enumerations.EntityName.EventType:
                        dependencies.Add(new KnightsTour.RelatedEntityMetaData(Enumerations.EntityName.EventHistory, EntityMapper.GetPropertyName(Enumerations.EventHistoryProperty.EventTypeId), UserName));
                        break;
                    case Enumerations.EntityName.Member:
                        dependencies.Add(new KnightsTour.RelatedEntityMetaData(Enumerations.EntityName.Solution, EntityMapper.GetPropertyName(Enumerations.SolutionProperty.MemberId), UserName));
                        dependencies.Add(new KnightsTour.RelatedEntityMetaData(Enumerations.EntityName.EventHistory, EntityMapper.GetPropertyName(Enumerations.EventHistoryProperty.MemberId), UserName));
                        break;
                    case Enumerations.EntityName.Puzzle:
                        dependencies.Add(new KnightsTour.RelatedEntityMetaData(Enumerations.EntityName.Solution, EntityMapper.GetPropertyName(Enumerations.SolutionProperty.PuzzleId), UserName));
                        break;
                    case Enumerations.EntityName.Solution:
                        break;
                }

                return dependencies;
            }
        }

        /// <summary>
        /// Returns a list of foreign key related meta data classes.
        /// </summary>
        /// <value>
        /// The foreign keys.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public List<KnightsTour.RelatedEntityMetaData> ForeignKeys
        {
            get
            {
                List<KnightsTour.RelatedEntityMetaData> foreignKeys = new List<KnightsTour.RelatedEntityMetaData>();
                switch (EntityName)
                {
                    case Enumerations.EntityName.Board:
                        foreignKeys.Add(new KnightsTour.RelatedEntityMetaData(Enumerations.EntityName.Board, EntityMapper.GetPropertyName(Enumerations.BoardProperty.SourceBoardId), UserName));
                        break;
                    case Enumerations.EntityName.DifficultyLevel:
                        break;
                    case Enumerations.EntityName.EventHistory:
                        foreignKeys.Add(new KnightsTour.RelatedEntityMetaData(Enumerations.EntityName.EventType, EntityMapper.GetPropertyName(Enumerations.EventHistoryProperty.EventTypeId), UserName));
                        foreignKeys.Add(new KnightsTour.RelatedEntityMetaData(Enumerations.EntityName.Member, EntityMapper.GetPropertyName(Enumerations.EventHistoryProperty.MemberId), UserName));
                        break;
                    case Enumerations.EntityName.EventType:
                        break;
                    case Enumerations.EntityName.Member:
                        break;
                    case Enumerations.EntityName.Puzzle:
                        foreignKeys.Add(new KnightsTour.RelatedEntityMetaData(Enumerations.EntityName.Board, EntityMapper.GetPropertyName(Enumerations.PuzzleProperty.BoardId), UserName));
                        foreignKeys.Add(new KnightsTour.RelatedEntityMetaData(Enumerations.EntityName.DifficultyLevel, EntityMapper.GetPropertyName(Enumerations.PuzzleProperty.DifficultyLevelId), UserName));
                        break;
                    case Enumerations.EntityName.Solution:
                        foreignKeys.Add(new KnightsTour.RelatedEntityMetaData(Enumerations.EntityName.Puzzle, EntityMapper.GetPropertyName(Enumerations.SolutionProperty.PuzzleId), UserName));
                        foreignKeys.Add(new KnightsTour.RelatedEntityMetaData(Enumerations.EntityName.Member, EntityMapper.GetPropertyName(Enumerations.SolutionProperty.MemberId), UserName));
                        break;
                }

                return foreignKeys;
            }
        }

        /// <summary>
        /// The user utilizing this class.
        /// </summary>
        /// <value>
        /// The user name.
        /// </value>
        [JsonIgnore]
        [XmlIgnore]
        public string UserName
        {
            get;
            set;
        }
        #endregion Properties

    } // Class
} // Namespace
// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 26, 2023 9:31:46 AM
// File             : EventTypeLiteBase.cs
// ************************************************************************

using System;
using System.Xml;

namespace KnightsTour
{
    /// <summary>
    /// The EventTypeLiteBase class which is the single place which defines the properties.  Inherits <seealso cref="KnightsTour.CoreLibrary.EntityBase{T}" />
    /// Generated On: October 26, 2023 at 9:31:46 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// This class should NOT be modified - any extensions or overrides should be completed in the extended class <seealso cref="EventTypeLite" />.
    /// </remarks>
    public abstract class EventTypeLiteBase : KnightsTour.CoreLibrary.EntityBase<int?>
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="EventTypeLiteBase"/> class.
        /// Initializes a new instance of the <see cref="EventTypeLiteBase"/> class.
        /// </summary>
        public EventTypeLiteBase()
        {
            OnIdSet += EventTypeLiteBase_OnIdSet;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventTypeLiteBase"/> class.
        /// Initializes a new instance of the <see cref="EventTypeLite"/> class from its full class representation.
        /// </summary>
        /// <param name="eventTypeBase">The <see cref="EventTypeBase"/>.</param>
        public EventTypeLiteBase(EventTypeBase eventTypeBase)
        {
            // Only do this if the object exists.
            if (eventTypeBase != null)
            {
                OnIdSet += EventTypeLiteBase_OnIdSet;
                EventTypeId = eventTypeBase.EventTypeId;
                Name = eventTypeBase.Name;

                // Also set the Id field.
                Id = this.EventTypeId;
            }
        }
        #endregion Constructor(s)

        #region Properties

        /// <summary>
        /// Gets or sets the primary key field event type id.
        /// </summary>
        /// <value>
        /// The event type id.
        /// </value>
        public int? EventTypeId
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>
        /// The name.
        /// </value>
        public string Name
        {
            get;
            set;
        }
        #endregion Properties

        #region Methods

        /// <summary>
        /// Invoked when the generic Id field of this class is modified (set).
        /// </summary>
        private void EventTypeLiteBase_OnIdSet()
        {
            EventTypeId = Id;
        }
        #endregion Methods

    } // Class
} // Namespace
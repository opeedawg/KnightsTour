// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 14, 2023 11:18:11 AM
// File             : ViewLogicBase.cs
// ************************************************************************

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

using KnightsTour.CoreLibrary;

namespace KnightsTour
{
    /// <summary>
    /// A Class to help with the retrieval of all defined views in the model.
    /// Generated On: October 14, 2023 at 11:18:11 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class stays in sync with the model, if an expected view is missing - add it to the mode and reauthor.
    /// This file should NOT be modified unless is rare circumstances, it will be regenerated on each logic artifact authoring.
    /// Extended properties or methods or overrides should be made in the non-abstract extended class ViewLogic.cs.
    /// </remarks>
    public abstract class ViewLogicBase
    {
        #region Declarations
        int timeoutSeconds = 60; // The default timeout for queries.
        #endregion Declarations

        #region Properties

        /// <summary>
        /// The default timeout for queries.
        /// </summary>
        /// <value>
        /// The timeout seconds.
        /// </value>
        public int TimeoutSeconds
        {
            get
            {
                return timeoutSeconds;
            }
            set
            {
                timeoutSeconds = value;
            }
        }
        #endregion Properties

        #region Methods

        /// <summary>
        /// Validates the object using the defined field validators.
        /// </summary>
        /// <param name="view">The view type to retrieve optionally filtered data for.</param>
        /// <param name="filter">The filter collection to apply to the query.</param>
        /// <param name="includeCount">Should the countproperty of the response object be populated?.</param>
        public KnightsTour.CoreLibrary.IActionResponse Get(Enumerations.View view, EntityFilter filter = null, bool includeCount = false)
        {
            IActionResponse response = new ActionResponse($"View {view} retrieval");

            try
            {
                string viewName = EntityMapper.ViewTransformation[view.ToString()];

                IStorageHandler handler = StorageProvider.GetHandler();

                #region Where clause construction
                string whereClause = "WHERE 1 = 1 ";
                if (filter != null && filter.Filters != null)
                {
                    foreach (SqlFilter whereCondition in filter.Filters)
                    {
                        whereClause += $" AND {whereCondition.GetSql}";
                    }
                }
                List<IParameter> parameters = handler.GetParameters(filter);
                #endregion

                #region Count population if requested
                if (includeCount)
                {
                    string countSql = $"SELECT COUNT(0) FROM {StorageProvider.GetTableSQL(viewName)} {whereClause}";

                    StorageStatement countStatement = new StorageStatement
                    {
                        Statement = countSql,
                        TimeoutSeconds = TimeoutSeconds,
                        Parameters = parameters
                    };

                    response.Count = int.Parse(handler.GetValue<long>(countStatement).ToString());
                }
                #endregion

                #region Select execution
                string dataSql = $"SELECT * FROM {StorageProvider.GetTableSQL(viewName)} {whereClause}";
                dataSql += " " + handler.GetOrderBySql(filter, true);
                dataSql += " " + handler.GetPaginationSql(filter);

                StorageStatement dataStatement = new StorageStatement
                {
                    Statement = dataSql,
                    TimeoutSeconds = TimeoutSeconds,
                    Parameters = parameters
                };

                IEnumerable<dynamic> records = handler.GetRecords(dataStatement);

                switch (view)
                {
                    case Enumerations.View.DboVPuzzleOfTheDaySolution:
                        List<DboVpuzzleOfTheDaySolution> dboVpuzzleOfTheDaySolutionResults = new List<DboVpuzzleOfTheDaySolution>();
                        foreach (IDataRecord row in records)
                        {
                            dboVpuzzleOfTheDaySolutionResults.Add(new DboVpuzzleOfTheDaySolution(row));
                        }

                        response.DataObject = dboVpuzzleOfTheDaySolutionResults;
                        break;
                    case Enumerations.View.DboVPuzzleOfTheDay:
                        List<DboVpuzzleOfTheDay> dboVpuzzleOfTheDayResults = new List<DboVpuzzleOfTheDay>();
                        foreach (IDataRecord row in records)
                        {
                            dboVpuzzleOfTheDayResults.Add(new DboVpuzzleOfTheDay(row));
                        }

                        response.DataObject = dboVpuzzleOfTheDayResults;
                        break;
                    case Enumerations.View.DboVMemberSolution:
                        List<DboVmemberSolution> dboVmemberSolutionResults = new List<DboVmemberSolution>();
                        foreach (IDataRecord row in records)
                        {
                            dboVmemberSolutionResults.Add(new DboVmemberSolution(row));
                        }

                        response.DataObject = dboVmemberSolutionResults;
                        break;
                    case Enumerations.View.DboVSolutionRanking:
                        List<DboVsolutionRanking> dboVsolutionRankingResults = new List<DboVsolutionRanking>();
                        foreach (IDataRecord row in records)
                        {
                            dboVsolutionRankingResults.Add(new DboVsolutionRanking(row));
                        }

                        response.DataObject = dboVsolutionRankingResults;
                        break;
                    case Enumerations.View.DboVDistinctBoardSizes:
                        List<DboVdistinctBoardSize> dboVdistinctBoardSizeResults = new List<DboVdistinctBoardSize>();
                        foreach (IDataRecord row in records)
                        {
                            dboVdistinctBoardSizeResults.Add(new DboVdistinctBoardSize(row));
                        }

                        response.DataObject = dboVdistinctBoardSizeResults;
                        break;
                    case Enumerations.View.DboVMemberStatistics:
                        List<DboVmemberStatistic> dboVmemberStatisticResults = new List<DboVmemberStatistic>();
                        foreach (IDataRecord row in records)
                        {
                            dboVmemberStatisticResults.Add(new DboVmemberStatistic(row));
                        }

                        response.DataObject = dboVmemberStatisticResults;
                        break;
                    default:
                        throw new Exception($"Unkonwn view '{view}'");
                }
                #endregion
            }
            catch (Exception exception)
            {
                response.Append(exception);
            }

            return response;
        }

    }
    #endregion Methods

} // Class
// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 21, 2023 9:55:34 AM
// File             : DboVPuzzleOfTheDayLiteBase.cs
// ************************************************************************

using System;
using System.Data;

namespace KnightsTour
{
    /// <summary>
    /// The DboVPuzzleOfTheDayBase class which is the single place which defines the view properties. />
    /// Generated On: October 21, 2023 at 9:55:34 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// This class should NOT be modified - any extensions or overrides should be completed in the extended class <seealso cref="DboVPuzzleOfTheDay" />.
    /// </remarks>
    public abstract class DboVPuzzleOfTheDayBase
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="DboVPuzzleOfTheDayBase"/> class.
        /// Initializes a new instance of the <see cref="DboVPuzzleOfTheDayBase"/> class initialized with default properties.
        /// </summary>
        public DboVPuzzleOfTheDayBase() : base()
        {
            // View properties.
            PuzzleId = 0;
            PuzzleOfTheDayDate = DateTime.Now;
            DifficultyLevel = string.Empty;
            Rows = 0;
            Cols = 0;
            PuzzlePath = string.Empty;
            BoardPath = string.Empty;
            DiscoveryDate = string.Empty;
            Author = string.Empty;
            DiscoveryIterationCount = 0;
            PuzzleCode = Guid.NewGuid();
            DifficultyLevelId = 0;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DboVPuzzleOfTheDayBase"/> class.
        /// Initializes a new empty instance of the DboVPuzzleOfTheDayBase class from a DataRow with the DboVPuzzleOfTheDay view columns specified.
        /// </summary>
        /// <param name="record">A <see cref="DataRow"/>.</param>
        public DboVPuzzleOfTheDayBase(DataRow record)
        {
            if (record != null)
            {
                PuzzleId = record.ValueAs<int>("PuzzleId");
                PuzzleOfTheDayDate = record.ValueAs<DateTime>("PuzzleOfTheDayDate");
                DifficultyLevel = record.ValueAs<string>("DifficultyLevel");
                Rows = record.ValueAs<int>("Rows");
                Cols = record.ValueAs<int>("Cols");
                PuzzlePath = record.ValueAs<string>("PuzzlePath");
                BoardPath = record.ValueAs<string>("BoardPath");
                DiscoveryDate = record.ValueAs<string>("DiscoveryDate");
                Author = record.ValueAs<string>("Author");
                DiscoveryIterationCount = record.ValueAs<long>("DiscoveryIterationCount");
                PuzzleCode = record.ValueAs<Guid>("PuzzleCode");
                DifficultyLevelId = record.ValueAs<int>("DifficultyLevelId");
            }
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DboVPuzzleOfTheDayBase"/> class.
        /// Initializes a new empty instance of the DboVPuzzleOfTheDayBase class from the record in a data reader populating only the DboVPuzzleOfTheDay columns specified.
        /// </summary>
        /// <param name="record">A record returned from a database reader.</param>
        public DboVPuzzleOfTheDayBase(IDataRecord record)
        {
            if (record != null)
            {
                PuzzleId = record.ValueAs<int>("PuzzleId");
                PuzzleOfTheDayDate = record.ValueAs<DateTime>("PuzzleOfTheDayDate");
                DifficultyLevel = record.ValueAs<string>("DifficultyLevel");
                Rows = record.ValueAs<int>("Rows");
                Cols = record.ValueAs<int>("Cols");
                PuzzlePath = record.ValueAs<string>("PuzzlePath");
                BoardPath = record.ValueAs<string>("BoardPath");
                DiscoveryDate = record.ValueAs<string>("DiscoveryDate");
                Author = record.ValueAs<string>("Author");
                DiscoveryIterationCount = record.ValueAs<long>("DiscoveryIterationCount");
                PuzzleCode = record.ValueAs<Guid>("PuzzleCode");
                DifficultyLevelId = record.ValueAs<int>("DifficultyLevelId");
            }
        }
        #endregion Constructor(s)

        #region Properties

        /// <summary>
        /// Gets or sets the puzzle id.
        /// </summary>
        /// <value>
        /// The puzzle id.
        /// </value>
        public int PuzzleId
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the puzzle of the day date.
        /// </summary>
        /// <value>
        /// The puzzle of the day date.
        /// </value>
        public DateTime PuzzleOfTheDayDate
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the difficulty level.
        /// </summary>
        /// <value>
        /// The difficulty level.
        /// </value>
        public string DifficultyLevel
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the rows.
        /// </summary>
        /// <value>
        /// The rows.
        /// </value>
        public int Rows
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the cols.
        /// </summary>
        /// <value>
        /// The cols.
        /// </value>
        public int Cols
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the puzzle path.
        /// </summary>
        /// <value>
        /// The puzzle path.
        /// </value>
        public string PuzzlePath
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the board path.
        /// </summary>
        /// <value>
        /// The board path.
        /// </value>
        public string BoardPath
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the discovery date.
        /// </summary>
        /// <value>
        /// The discovery date.
        /// </value>
        public string DiscoveryDate
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the author.
        /// </summary>
        /// <value>
        /// The author.
        /// </value>
        public string Author
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the discovery iteration count.
        /// </summary>
        /// <value>
        /// The discovery iteration count.
        /// </value>
        public long DiscoveryIterationCount
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the puzzle code.
        /// </summary>
        /// <value>
        /// The puzzle code.
        /// </value>
        public Guid PuzzleCode
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the difficulty level id.
        /// </summary>
        /// <value>
        /// The difficulty level id.
        /// </value>
        public int DifficultyLevelId
        {
            get;
            set;
        }
        #endregion Properties

    } // Class
} // Namespace
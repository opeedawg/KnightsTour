// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : January 13, 2023 7:25:01 AM
// File             : PuzzleLogic.cs
// ************************************************************************

using KnightsTour.CoreLibrary;
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace KnightsTour
{
    /// <summary>
    /// Auto generated from DB table Puzzle
    /// Generated On: January 13, 2023 at 7:25:01 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// Use this class to manage and extend the generated logic related to the <see cref="Puzzle"/> class.
    /// This class is only regenerated if it is detected that it has never been modified.
    /// </remarks>
    public class PuzzleLogic : PuzzleLogicBase
    {
        #region Extended Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="PuzzleLogic"/> class.
        /// Instantiates a new generic LogicBase class using the configured repository.
        /// </summary>
        /// <param name="userName">The user using this class.</param>
        /// <example>
        /// <code>
        /// PuzzleLogicBase PuzzleLogic = new PuzzleLogic(userName);
        /// </code>
        /// </example>
        public PuzzleLogic(string userName) : base(userName)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PuzzleLogic"/> class.
        /// Instantiates a new generic LogicBase class using the passed handler.
        /// </summary>
        /// <param name="handler">A storage handler.</param>
        /// <param name="userName">The user using this class.</param>
        public PuzzleLogic(KnightsTour.CoreLibrary.IStorageHandler handler, string userName) : base(handler, userName)
        {
        }
        #endregion Extended Constructor(s)

        #region Extended Declarations
        #endregion Extended Declarations

        #region Extended Properties
        #endregion Extended Properties

        #region Extended Methods
        public bool PathExists(string path)
        {
            StorageStatement statement = new StorageStatement()
            {
                Statement = $"SELECT COUNT(0) FROM [Puzzle] WHERE Path = {StorageProvider.GetParameterPrefix()}path",
                Parameter = new GenericParameter($"{StorageProvider.GetParameterPrefix()}path", path),
            };

            IStorageHandler handler = StorageProvider.GetHandler();

            return handler.GetValue<int>(statement) > 0;
        }
        /// <summary>
        /// Executes a custom action against the Puzzle given the passed ids.
        /// </summary>
        /// <param name="actionName">The name of the custom operation to execute.</param>
        /// <param name="ids">The comma delimited list of id(s) of the objects on which to execute the custom operation.</param>
        /// <returns><see cref="KnightsTour.CoreLibrary.IActionResponse"/>: A populated rich response object.</returns>
        public KnightsTour.CoreLibrary.IActionResponse DoCustomAction(string actionName, string ids)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.CoreLibrary.ActionResponse($"Do custom action: '{actionName}'");

            // Some parameter validations.
            if (string.IsNullOrEmpty(actionName))
            {
                  response.Append(new Exception("Missing mandatory parameter 'actionName' in PuzzleLogic.DoCustomAction"));
            }
            if (string.IsNullOrEmpty(ids))
            {
                  response.Append(new Exception("Missing mandatory parameter 'ids' in PuzzleLogic.DoCustomAction"));
            }

            if (response.IsValid)
            {
                // Get a distinct list of non-empty ids.
                List<string> idList = ids.Split(',').ToList().Where(s => !string.IsNullOrWhiteSpace(s)).Distinct().ToList();

                if (idList.Count > 0)
                {
                    // Validate that this action exists.
                    switch (actionName)
                    {
                        // As this is extended code, as you configure new custom actions or remove them, you will need to maintain the case statement manually.

                        default:
                            response.Append(new Exception($"Unknown or unhandled action type '{actionName}'"));
                            break;

                    }
                }
            }

            // Return the response.
            return response;
        }
        public IActionResponse GetPuzzleByCode(string solutionCode, HttpRequest request)
        {
            IActionResponse response = new ActionResponse($"Getting puzzle for solution {solutionCode}.");
            try
            {
                IStorageStatement statement = new StorageStatement()
                {
                    Statement = "SELECT * FROM V_PuzzleOfTheDay WHERE PuzzleId = (SELECT PuzzleId FROM Solution WHERE Code = @solutionCode)",
                    Parameter = new GenericParameter("@solutionCode", solutionCode)
                };

                DataRow result = StorageHandler.GetRecord(statement);
                if (result != null)
                {
                    DboVPuzzleOfTheDay existingPuzzle = new DboVPuzzleOfTheDay(result);
                    response.Append(new Message($"Daily puzzle {existingPuzzle.PuzzleId} retrieved."));
                    response.DataObject = existingPuzzle;
                }
                else
                {
                    response.Append(new Message($"Oh no!  We are unable to retrieve this solution!  Non-member solutions are only kept for 7 days."));
                }
            }
            catch (Exception exception)
            {
                response.Append(exception);
                EventHistoryLogic.Add(Enumerations.EventType.Exception, $"{{function: \"PuzzleLogic.GetPuzzleByCode\", exception: \"{exception.Message}\"}}", request);
            }

            return response;
        }
        public IActionResponse GetDailyPuzzle(int memberId, HttpRequest request)
        {
            IActionResponse response = new ActionResponse("Getting daily puzzle.");
            try
            {
                IStorageStatement statement = new StorageStatement()
                {
                    Statement = "SELECT * FROM V_PuzzleOfTheDay WHERE PuzzleOfTheDayDate = @today",
                    Parameter = new GenericParameter("@today", new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day))
                };

                DataRow result = StorageHandler.GetRecord(statement);
                if (result != null)
                {
                    DboVPuzzleOfTheDay existingPuzzle = new DboVPuzzleOfTheDay(result);
                    response.Append(new Message($"Daily puzzle {existingPuzzle.PuzzleId} retrieved."));
                    existingPuzzle.MemberSolution = new SolutionLogic(UserName).GetByMemberAndPuzzle(memberId, existingPuzzle.PuzzleId);
                    response.DataObject = existingPuzzle;
                }
                else
                {
                    Puzzle newDailyPuzzle = CreateDailyPuzzle();
                    response.Append(GetDailyPuzzle(memberId, request));
                }
            }
            catch (Exception exception)
            {
                response.Append(exception);
                EventHistoryLogic.Add(Enumerations.EventType.Exception, $"{{function: \"MemberLogic.GetDailyPuzzle\", exception: \"{exception.Message}\"}}", request);
            }

            return response;
        }
        public Puzzle CreateDailyPuzzle()
        {
            IStorageStatement statement = new StorageStatement()
            {
                Statement = "SELECT TOP 1 p.* FROM Puzzle p INNER JOIN Board b ON p.BoardId = b.BoardId WHERE b.SourceBoardId IS NULL AND p.PuzzleOfTheDayDate IS NULL ORDER BY newid()"
            };

            DataRow result = StorageHandler.GetRecord(statement);
            if (result != null)
            {
                Puzzle unassignedPuzzle = new Puzzle(result);
                unassignedPuzzle.PuzzleOfTheDayDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
                IActionResponse updateResponse = Update(unassignedPuzzle);
                if (updateResponse.IsValid)
                    return unassignedPuzzle;
                else
                    throw new Exception($"Unable to update puzzle: {updateResponse.Messages[0].Content}");
            }
            else
            {
                throw new Exception("Unable to discover an unassigned puzzle to make the daily!");
            }
        }
        public IActionResponse GetRankings(int puzzleId, int memberId, HttpRequest request)
        {
            IActionResponse response = new ActionResponse("GetRankings");
            int topRecordCount = 10;

            List<DboVSolutionRanking> allRankings = new List<DboVSolutionRanking>();
            int rank = 1;
            foreach (IDataRecord row in StorageHandler.GetRecords(new StorageStatement()
            {
                Statement = "SELECT * FROM [V_SolutionRanking] WHERE PuzzleId = @puzzleId ORDER BY SolutionDuration ASC",
                Parameter = new GenericParameter("@puzzleId", puzzleId)
            }))
            {
                DboVSolutionRanking rankingRow = new DboVSolutionRanking(row);
                rankingRow.Rank = rank;
                allRankings.Add(rankingRow);
                rank++;
            }

            List<DboVSolutionRanking> rankingsToReturn = new List<DboVSolutionRanking>();
            // Return the top <topRecordCount>
            rankingsToReturn.AddRange(allRankings.Where(r => r.Rank <= topRecordCount).OrderBy(r => r.Rank));

            // Optional filter for the member
            if(memberId > 0)
            {
                // Do they exist at all in the list?
                DboVSolutionRanking memberRanking = allRankings.FirstOrDefault(r => r.MemberId == memberId);

                if (memberRanking != null)
                {
                    response.Append(new Message($"You rank {PrettifyNumber(memberRanking.Rank)} out of {allRankings.Count}"));
                    // If this user already ranks in the top 10, then just return that list.
                    if (memberRanking.Rank > topRecordCount)
                    {
                        // Try and add 3 records prior, and 3 records after
                        rankingsToReturn.AddRange(allRankings.Where(r => r.Rank > topRecordCount && r.Rank > memberRanking.Rank - 4 && r.Rank < memberRanking.Rank + 4).OrderBy(r => r.Rank));
                    }
                }
                else
                    response.Append(new Message($"You have not completed this puzzle yet.  Here are the current top {rankingsToReturn.Count} member times from the {allRankings.Count} total solutions found"));
            }
            else
                response.Append(new Message($"Here are the current top {rankingsToReturn.Count} solution times from the {allRankings.Count}"));


            response.DataObject = rankingsToReturn;
            return response;
        }
        public IActionResponse GetRandomPuzzle(PuzzleSearch search, HttpRequest request)
        {
            IActionResponse response = new ActionResponse("Getting random puzzle.");
            try
            {
                #region Custom query depending on the search criteria
                IStorageStatement statement = new StorageStatement();
                if (!string.IsNullOrEmpty(search.PuzzleCode))
                {
                    Guid guidOutput = new Guid();
                    if (Guid.TryParse(search.PuzzleCode, out guidOutput))
                    {
                        statement = new StorageStatement()
                        {
                            Statement = "SELECT TOP 1 * FROM [Puzzle] WHERE PuzzleCode = @puzzleCode",
                            Parameter = new GenericParameter("@puzzleCode", search.PuzzleCode)
                        };
                    }
                    else
                        response.Append(new Exception($"Invalid puzzle code.  Expecting something in the format like '{Guid.NewGuid()}' which can be found at the bottom of every puzzle detail."));
                }
                else if (search.DifficultyLevelId > 0 && !string.IsNullOrEmpty(search.Size))
                {
                    if (search.MemberId > 0 && search.NewPuzzlesOnly)
                    {
                        statement = new StorageStatement()
                        {
                            Statement = "SELECT TOP 1 p.PuzzleId FROM [Puzzle] p INNER JOIN [Board] b ON p.BoardId = b.BoardId WHERE p.DifficultyLevelId = @difficultyLevelId AND b.RowDimension = @rowDimension AND b.ColDimension = @colDimension AND (SELECT COUNT(0) FROM Solution WHERE MemberId = @memberId AND PuzzleId = p.PuzzleId) = 0 ORDER BY newid()",
                            Parameters = new List<IParameter>()
                            {
                                new GenericParameter("@difficultyLevelId", search.DifficultyLevelId),
                                new GenericParameter("@rowDimension", search.ColDimension),
                                new GenericParameter("@colDimension", search.RowDimension),
                                new GenericParameter("@memberId", search.MemberId)
                            }
                        };
                    }
                    else
                    {
                        statement = new StorageStatement()
                        {
                            Statement = "SELECT TOP 1 p.PuzzleId FROM [Puzzle] p INNER JOIN [Board] b ON p.BoardId = b.BoardId WHERE p.DifficultyLevelId = @difficultyLevelId AND b.RowDimension = @rowDimension and b.ColDimension = @colDimension ORDER BY newid()",
                            Parameters = new List<IParameter>()
                            {
                                new GenericParameter("@difficultyLevelId", search.DifficultyLevelId),
                                new GenericParameter("@rowDimension", search.RowDimension),
                                new GenericParameter("@colDimension", search.ColDimension)
                            }
                        };
                    }
                }
                else if (search.DifficultyLevelId == 0 && !string.IsNullOrEmpty(search.Size))
                {
                    if (search.MemberId > 0 && search.NewPuzzlesOnly)
                    {
                        statement = new StorageStatement()
                        {
                            Statement = "SELECT TOP 1 p.PuzzleId FROM [Puzzle] p INNER JOIN [Board] b ON p.BoardId = b.BoardId WHERE b.RowDimension = @rowDimension AND b.ColDimension = @colDimension AND (SELECT COUNT(0) FROM Solution WHERE MemberId = @memberId AND PuzzleId = p.PuzzleId) = 0 ORDER BY newid()",
                            Parameters = new List<IParameter>()
                            {
                                new GenericParameter("@rowDimension", search.RowDimension),
                                new GenericParameter("@colDimension", search.ColDimension),
                                new GenericParameter("@memberId", search.MemberId)
                            }
                        };
                    }
                    else
                    {
                        statement = new StorageStatement()
                        {
                            Statement = "SELECT TOP 1 p.PuzzleId FROM [Puzzle] p INNER JOIN [Board] b ON p.BoardId = b.BoardId WHERE b.RowDimension = @rowDimension and b.ColDimension = @colDimension ORDER BY newid()",
                            Parameters = new List<IParameter>()
                            {
                                new GenericParameter("@rowDimension", search.RowDimension),
                                new GenericParameter("@colDimension", search.ColDimension)
                            }
                        };
                    }
                }
                else if (search.DifficultyLevelId > 0 && string.IsNullOrEmpty(search.Size))
                {
                    if (search.MemberId > 0 && search.NewPuzzlesOnly)
                    {
                        statement = new StorageStatement()
                        {
                            Statement = "SELECT TOP 1 p.PuzzleId FROM [Puzzle] p WHERE p.DifficultyLevelId = @difficultyLevelId AND (SELECT COUNT(0) FROM Solution WHERE MemberId = @memberId AND PuzzleId = p.PuzzleId) = 0 ORDER BY newid()",
                            Parameters = new List<IParameter>()
                            {
                                new GenericParameter("@difficultyLevelId", search.DifficultyLevelId),
                                new GenericParameter("@memberId", search.MemberId)
                            }
                        };
                    }
                    else
                    {
                        statement = new StorageStatement()
                        {
                            Statement = "SELECT TOP 1 PuzzleId FROM [Puzzle] p WHERE p.DifficultyLevelId = @difficultyLevelId ORDER BY newid()",
                            Parameters = new List<IParameter>()
                            {
                                new GenericParameter("@difficultyLevelId", search.DifficultyLevelId),
                            }
                        };
                    }
                }
                else if (search.DifficultyLevelId == 0 && string.IsNullOrEmpty(search.Size))
                {
                    if (search.MemberId > 0 && search.NewPuzzlesOnly)
                    {
                        statement = new StorageStatement()
                        {
                            Statement = "SELECT TOP 1 p.PuzzleId FROM [Puzzle] p WHERE (SELECT COUNT(0) FROM Solution WHERE MemberId = @memberId AND PuzzleId = p.PuzzleId) = 0 ORDER BY newid()",
                            Parameters = new List<IParameter>()
                            {
                                new GenericParameter("@memberId", search.MemberId)
                            }
                        };
                    }
                    else
                    {
                        statement = new StorageStatement()
                        {
                            Statement = "SELECT TOP 1 PuzzleId FROM [Puzzle] ORDER BY newid()"
                        };
                    }
                }
                else
                {
                    response.Append(new Exception("Invalid puzzle search critera"));
                }
                #endregion

                if (!string.IsNullOrEmpty(statement.Statement))
                {
                    DataRow result = StorageHandler.GetRecord(statement);

                    if (result != null)
                    {
                        int puzzleId = result.ValueAs<int>("PuzzleId");

                        statement = new StorageStatement()
                        {
                            Statement = "SELECT * FROM V_PuzzleOfTheDay WHERE PuzzleId = @puzzleId",
                            Parameter = new GenericParameter("@puzzleId", puzzleId)
                        };

                        result = StorageHandler.GetRecord(statement);
                        if (result != null)
                        {
                            DboVPuzzleOfTheDay puzzle = new DboVPuzzleOfTheDay(result);
                            response.Append(new Message($"Puzzle {puzzle.PuzzleId} retrieved."));
                            if (search.MemberId > 0)
                                puzzle.MemberSolution = new SolutionLogic(UserName).GetByMemberAndPuzzle(search.MemberId, puzzle.PuzzleId);
                            response.DataObject = puzzle;
                        }
                        else
                        {
                            response.Append(new Exception("Unable to retrieve valid puzzle record view."));
                        }
                    }
                    else
                    {
                        response.Append(new Exception("Unable to find a puzzle that meets your search criteria."));
                    }
                }
            }
            catch (Exception exception)
            {
                response.Append(exception);
                EventHistoryLogic.Add(Enumerations.EventType.Exception, $"{{function: \"MemberLogic.GetDailyPuzzle\", exception: \"{exception.Message}\"}}", request);
            }

            return response;
        }
        string PrettifyNumber(int number)
        {
            if (number == 0) return "0";
            else
            {
                if (number % 10 == 1)
                    return $"{number}st";
                else if (number % 10 == 2)
                    return $"{number}nd";
                else if (number % 10 == 3)
                    return $"{number}rd";
                else 
                    return $"{number}th";
            }
        }

        #endregion Extended Methods

    } // Class
} // Namespace
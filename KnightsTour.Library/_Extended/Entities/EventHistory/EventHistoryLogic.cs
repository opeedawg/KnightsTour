// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : January 21, 2023 4:50:50 AM
// File             : EventHistoryLogic.cs
// ************************************************************************

using Microsoft.AspNetCore.Http;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Runtime.CompilerServices;

namespace KnightsTour
{
    /// <summary>
    /// Auto generated from DB table EventHistory
    /// Generated On: January 21, 2023 at 4:50:50 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// Use this class to manage and extend the generated logic related to the <see cref="EventHistory"/> class.
    /// This class is only regenerated if it is detected that it has never been modified.
    /// </remarks>
    public class EventHistoryLogic : EventHistoryLogicBase
    {
        #region Extended Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="EventHistoryLogic"/> class.
        /// Instantiates a new generic LogicBase class using the configured repository.
        /// </summary>
        /// <param name="userName">The user using this class.</param>
        /// <example>
        /// <code>
        /// EventHistoryLogicBase EventHistoryLogic = new EventHistoryLogic(userName);
        /// </code>
        /// </example>
        public EventHistoryLogic(string userName) : base(userName)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventHistoryLogic"/> class.
        /// Instantiates a new generic LogicBase class using the passed handler.
        /// </summary>
        /// <param name="handler">A storage handler.</param>
        /// <param name="userName">The user using this class.</param>
        public EventHistoryLogic(KnightsTour.CoreLibrary.IStorageHandler handler, string userName) : base(handler, userName)
        {
        }
        #endregion Extended Constructor(s)

        #region Extended Declarations
        #endregion Extended Declarations

        #region Extended Properties
        #endregion Extended Properties

        #region Extended Methods
        public static void Add(Enumerations.EventType type, string context, HttpRequest request, int? memberId = null)
        {
            string ipAddress = GetIpAddress(request);
            LocationDetail locationDetail = GetLocationDetails(ipAddress);

            try
            {
                new EventHistoryLogic("Logging").Insert(new EventHistory()
                {
                    EventTypeId = (int)type,
                    SourceInternetAddress = ipAddress,
                    Country = locationDetail.country_name,
                    Region = locationDetail.region_name,
                    City = locationDetail.city,
                    ZipPostal = locationDetail.zip,
                    Context= context,
                    EventDate= DateTime.Now,
                    MemberId = memberId
                });
            }
            catch
            { 
                // Do nothing, this is for logging purposes only.
            }
        }
        static string GetIpAddress(HttpRequest request)
        {
            string ipAddress = "undetermined";
            if (request != null)
            {
                ipAddress = request.HttpContext.Connection.RemoteIpAddress.ToString();
            }

            if (ipAddress == "undertermined" || ipAddress.Length <= 5 || ipAddress == "127.0.0.1")
            {
                ipAddress = new WebClient().DownloadString("http://icanhazip.com").Replace("\\r\\n", "").Replace("\\n", "").Trim();
            }

            return ipAddress;
        }
        static LocationDetail GetLocationDetails(string ipAddress)
        {
            string sendGridApiKey = "549348f9a6228306331cc5f770e38af6";
            if (!string.IsNullOrEmpty(ipAddress) && ipAddress.Length > 5 && ipAddress != "undetermined")
            {
                HttpClient client = new HttpClient();
                HttpResponseMessage response = client.GetAsync($"http://api.ipstack.com/{ipAddress}?access_key={sendGridApiKey}").Result;
                if (response.IsSuccessStatusCode)
                {
                    return JsonConvert.DeserializeObject<LocationDetail>(response.Content.ReadAsStringAsync().Result);
                }
            }

            return new LocationDetail() {
                country_name = "",
                region_name = "",
                city = "",
                zip = "",
            };
        }


        /// <summary>
        /// Executes a custom action against the EventHistory given the passed ids.
        /// </summary>
        /// <param name="actionName">The name of the custom operation to execute.</param>
        /// <param name="ids">The comma delimited list of id(s) of the objects on which to execute the custom operation.</param>
        /// <returns><see cref="KnightsTour.CoreLibrary.IActionResponse"/>: A populated rich response object.</returns>
        public KnightsTour.CoreLibrary.IActionResponse DoCustomAction(string actionName, string ids)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.CoreLibrary.ActionResponse($"Do custom action: '{actionName}'");

            // Some parameter validations.
            if (string.IsNullOrEmpty(actionName))
            {
                  response.Append(new Exception("Missing mandatory parameter 'actionName' in EventHistoryLogic.DoCustomAction"));
            }
            if (string.IsNullOrEmpty(ids))
            {
                  response.Append(new Exception("Missing mandatory parameter 'ids' in EventHistoryLogic.DoCustomAction"));
            }

            if (response.IsValid)
            {
                // Get a distinct list of non-empty ids.
                List<string> idList = ids.Split(',').ToList().Where(s => !string.IsNullOrWhiteSpace(s)).Distinct().ToList();

                if (idList.Count > 0)
                {
                    // Validate that this action exists.
                    switch (actionName)
                    {
                        // As this is extended code, as you configure new custom actions or remove them, you will need to maintain the case statement manually.

                        default:
                            response.Append(new Exception($"Unknown or unhandled action type '{actionName}'"));
                            break;

                    }
                }
            }

            // Return the response.
            return response;
        }
        #endregion Extended Methods

        #region Private Support Classes
        class IPLanguage
        {
            public string code { get; set; }
            public string name { get; set; }
            public string native { get; set; }
        }

        class IPLocation
        {
            public int? geoname_id { get; set; }
            public string capital { get; set; }
            public List<IPLanguage> languages { get; set; }
            public string country_flag { get; set; }
            public string country_flag_emoji { get; set; }
            public string country_flag_emoji_unicode { get; set; }
            public string calling_code { get; set; }
            public bool is_eu { get; set; }
        }

        class LocationDetail
        {
            public string ip { get; set; }
            public string type { get; set; }
            public string continent_code { get; set; }
            public string continent_name { get; set; }
            public string country_code { get; set; }
            public string country_name { get; set; }
            public string region_code { get; set; }
            public string region_name { get; set; }
            public string city { get; set; }
            public string zip { get; set; }
            public double latitude { get; set; }
            public double longitude { get; set; }
            public IPLocation location { get; set; }
        }
        #endregion


    } // Class
} // Namespace
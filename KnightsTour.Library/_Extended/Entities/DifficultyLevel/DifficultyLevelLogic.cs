// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : January 13, 2023 7:25:01 AM
// File             : DifficultyLevelLogic.cs
// ************************************************************************

using System;
using System.Collections.Generic;
using System.Linq;

namespace KnightsTour
{
    /// <summary>
    /// Auto generated from DB table DifficultyLevel
    /// Generated On: January 13, 2023 at 7:25:01 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// Use this class to manage and extend the generated logic related to the <see cref="DifficultyLevel"/> class.
    /// This class is only regenerated if it is detected that it has never been modified.
    /// </remarks>
    public class DifficultyLevelLogic : DifficultyLevelLogicBase
    {
        #region Extended Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="DifficultyLevelLogic"/> class.
        /// Instantiates a new generic LogicBase class using the configured repository.
        /// </summary>
        /// <param name="userName">The user using this class.</param>
        /// <example>
        /// <code>
        /// DifficultyLevelLogicBase DifficultyLevelLogic = new DifficultyLevelLogic(userName);
        /// </code>
        /// </example>
        public DifficultyLevelLogic(string userName) : base(userName)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DifficultyLevelLogic"/> class.
        /// Instantiates a new generic LogicBase class using the passed handler.
        /// </summary>
        /// <param name="handler">A storage handler.</param>
        /// <param name="userName">The user using this class.</param>
        public DifficultyLevelLogic(KnightsTour.CoreLibrary.IStorageHandler handler, string userName) : base(handler, userName)
        {
        }
        #endregion Extended Constructor(s)

        #region Extended Declarations
        #endregion Extended Declarations

        #region Extended Properties
        #endregion Extended Properties

        #region Extended Methods

        /// <summary>
        /// Executes a custom action against the DifficultyLevel given the passed ids.
        /// </summary>
        /// <param name="actionName">The name of the custom operation to execute.</param>
        /// <param name="ids">The comma delimited list of id(s) of the objects on which to execute the custom operation.</param>
        /// <returns><see cref="KnightsTour.CoreLibrary.IActionResponse"/>: A populated rich response object.</returns>
        public KnightsTour.CoreLibrary.IActionResponse DoCustomAction(string actionName, string ids)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.CoreLibrary.ActionResponse($"Do custom action: '{actionName}'");

            // Some parameter validations.
            if (string.IsNullOrEmpty(actionName))
            {
                  response.Append(new Exception("Missing mandatory parameter 'actionName' in DifficultyLevelLogic.DoCustomAction"));
            }
            if (string.IsNullOrEmpty(ids))
            {
                  response.Append(new Exception("Missing mandatory parameter 'ids' in DifficultyLevelLogic.DoCustomAction"));
            }

            if (response.IsValid)
            {
                // Get a distinct list of non-empty ids.
                List<string> idList = ids.Split(',').ToList().Where(s => !string.IsNullOrWhiteSpace(s)).Distinct().ToList();

                if (idList.Count > 0)
                {
                    // Validate that this action exists.
                    switch (actionName)
                    {
                        // As this is extended code, as you configure new custom actions or remove them, you will need to maintain the case statement manually.

                        default:
                            response.Append(new Exception($"Unknown or unhandled action type '{actionName}'"));
                            break;

                    }
                }
            }

            // Return the response.
            return response;
        }
        #endregion Extended Methods

    } // Class
} // Namespace
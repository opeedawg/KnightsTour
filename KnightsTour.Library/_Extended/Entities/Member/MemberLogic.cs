// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : January 21, 2023 4:50:50 AM
// File             : MemberLogic.cs
// ************************************************************************

using KnightsTour.CoreLibrary;
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Numerics;
using System.Text.RegularExpressions;
using static Dropbox.Api.Sharing.ListFileMembersIndividualResult;
using static Dropbox.Api.Team.GroupAccessType;

namespace KnightsTour
{
    /// <summary>
    /// Auto generated from DB table Member
    /// Generated On: January 21, 2023 at 4:50:50 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// Use this class to manage and extend the generated logic related to the <see cref="Member"/> class.
    /// This class is only regenerated if it is detected that it has never been modified.
    /// </remarks>
    public class MemberLogic : MemberLogicBase
    {
        #region Extended Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="MemberLogic"/> class.
        /// Instantiates a new generic LogicBase class using the configured repository.
        /// </summary>
        /// <param name="userName">The user using this class.</param>
        /// <example>
        /// <code>
        /// MemberLogicBase MemberLogic = new MemberLogic(userName);
        /// </code>
        /// </example>
        public MemberLogic(string userName) : base(userName)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberLogic"/> class.
        /// Instantiates a new generic LogicBase class using the passed handler.
        /// </summary>
        /// <param name="handler">A storage handler.</param>
        /// <param name="userName">The user using this class.</param>
        public MemberLogic(KnightsTour.CoreLibrary.IStorageHandler handler, string userName) : base(handler, userName)
        {
        }
        #endregion Extended Constructor(s)

        #region Extended Declarations
        #endregion Extended Declarations

        #region Extended Properties
        #endregion Extended Properties

        #region Extended Methods

        /// <summary>
        /// Executes a custom action against the Member given the passed ids.
        /// </summary>
        /// <param name="actionName">The name of the custom operation to execute.</param>
        /// <param name="ids">The comma delimited list of id(s) of the objects on which to execute the custom operation.</param>
        /// <returns><see cref="KnightsTour.CoreLibrary.IActionResponse"/>: A populated rich response object.</returns>
        public KnightsTour.CoreLibrary.IActionResponse DoCustomAction(string actionName, string ids)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.CoreLibrary.ActionResponse($"Do custom action: '{actionName}'");

            // Some parameter validations.
            if (string.IsNullOrEmpty(actionName))
            {
                response.Append(new Exception("Missing mandatory parameter 'actionName' in MemberLogic.DoCustomAction"));
            }
            if (string.IsNullOrEmpty(ids))
            {
                response.Append(new Exception("Missing mandatory parameter 'ids' in MemberLogic.DoCustomAction"));
            }

            if (response.IsValid)
            {
                // Get a distinct list of non-empty ids.
                List<string> idList = ids.Split(',').ToList().Where(s => !string.IsNullOrWhiteSpace(s)).Distinct().ToList();

                if (idList.Count > 0)
                {
                    // Validate that this action exists.
                    switch (actionName)
                    {
                        // As this is extended code, as you configure new custom actions or remove them, you will need to maintain the case statement manually.

                        default:
                            response.Append(new Exception($"Unknown or unhandled action type '{actionName}'"));
                            break;

                    }
                }
            }

            // Return the response.
            return response;
        }
        public IActionResponse SignUp(string emailAddress, string displayName, string initials, string password, HttpRequest request)
        {
            IActionResponse response = new ActionResponse("Signup");
            try
            {
                if (!IsValidEmail(emailAddress))
                    response.Append(new Exception("Enter a valid email address."));
                if (string.IsNullOrEmpty(displayName))
                    response.Append(new Exception("Enter a display name."));
                if (string.IsNullOrEmpty(password) || password.Trim().Length < 5)
                    response.Append(new Exception("A password of at least 5 characters is requied."));
                if (string.IsNullOrEmpty(initials) || initials.Trim().Length < 2 || initials.Trim().Length > 3)
                    response.Append(new Exception("Initials of at least 2 characters and maximum of 3 characters is requied."));

                if (response.IsValid)
                {
                    Member duplicateMemember = GetAll().FirstOrDefault(m => m.EmailAddress.ToUpper() == emailAddress.ToUpper());
                    if (duplicateMemember == null)
                    {
                        Member newMember = new Member()
                        {
                            Code = Guid.NewGuid().ToString(),
                            EmailAddress = emailAddress,
                            DisplayName = displayName,
                            ConfirmationDate = null,
                            CreateDate = DateTime.Now,
                            Password = password,
                            UserInitials = initials.Trim().ToUpper()
                        };

                        response.Append(Insert(newMember, request));

                        if (response.IsValid)
                        {
                            EventHistoryLogic.Add(Enumerations.EventType.MemberSignup, $"{{memberId: \"{newMember.MemberId}\"}}", request, newMember.MemberId);
                            response.DataObject = newMember.ToLite();
                        }
                    }
                    else
                    {
                        response.Append(new Exception("A member already exists with this email address."));
                    }
                }
            }
            catch (Exception exception)
            {
                response.Append(exception);
                EventHistoryLogic.Add(Enumerations.EventType.Exception, $"{{function: \"MemberLogic.SignUp\", exception: \"{GetCompleteExceptionMessage(exception)}\"}}", request);
            }

            return response;
        }
        public IActionResponse SignIn(string emailAddress, string password, HttpRequest request)
        {
            IActionResponse response = new ActionResponse("SignIn");
            try
            {
                if (!IsValidEmail(emailAddress))
                    response.Append(new Exception("Enter a valid email address."));
                if (string.IsNullOrEmpty(password) || password.Trim().Length < 5)
                    response.Append(new Exception("A password of at least 5 characters is requied."));

                if (response.IsValid)
                {
                    Member existingMemember = GetByEmailAddress(emailAddress);
                    if (existingMemember != null)
                    {
                        if (existingMemember.Password == password)
                        {
                            response.Append(new Message("Authentication successful."));
                            response.DataObject = existingMemember.ToLite();
                            EventHistoryLogic.Add(Enumerations.EventType.MemberSignInSuccess, $"{{memberId: \"{existingMemember.MemberId}\"}}", request, existingMemember.MemberId);
                        }
                        else
                        {
                            response.Append(new Exception("Incorrect password."));
                            EventHistoryLogic.Add(Enumerations.EventType.MemberSigninFailure, $"{{memberId: \"{existingMemember.MemberId}\"}}", request, existingMemember.MemberId);
                        }
                    }
                    else
                    {
                        response.Append(new Exception("Incorrect email address or password."));
                        EventHistoryLogic.Add(Enumerations.EventType.MemberSigninFailure, $"{{}}", request);
                    }
                }
            }
            catch (Exception exception)
            {
                response.Append(exception);
                EventHistoryLogic.Add(Enumerations.EventType.Exception, $"{{function: \"MemberLogic.SignIn\", exception: \"{GetCompleteExceptionMessage(exception)}\"}}", request);
            }

            return response;
        }
        public IActionResponse RecoverPassword(string emailAddress, HttpRequest request)
        {
            IActionResponse response = new ActionResponse("RecoverPassword");
            try
            {
                Member existingMemember = GetByEmailAddress(emailAddress);
                if (existingMemember != null)
                {
                    existingMemember.Password = GeneratePassword();
                    response.Append(Update(existingMemember));
                    if (response.IsValid)
                    {
                        string body = "<p>Your password at <strong> <a href='http://knightstourdaily.com'>Knights Tour Daily</a></strong> has been reset to:</p>";
                        body += $"<p>{existingMemember.Password}</p>";
                        body += $"<p>It is highly recommended that you change it when you next visit the site to something you can remember easilly.</p>";
                        response.Append(Context.EmailHandler.Send("donotreply@knightstourdaily.com", existingMemember.EmailAddress, "Knights Tour Daily password reset", body));
                    }
                }
                else
                {
                    response.Append(new Message($"No account with that email address found."));
                }
            }
            catch (Exception exception)
            {
                response.Append(exception);
                EventHistoryLogic.Add(Enumerations.EventType.Exception, $"{{function: \"MemberLogic.ChangePassword\", exception: \"{GetCompleteExceptionMessage(exception)}\"}}", request);
            }

            return response;
        }
        public IActionResponse ChangePassword(int memberId, string oldPassword, string newPassword1, string newPassword2, HttpRequest request)
        {
            IActionResponse response = new ActionResponse("ChangePassword");

            try
            {
                if (string.IsNullOrEmpty(oldPassword)) response.Append(new Exception("Enter your current password"));
                if (string.IsNullOrEmpty(newPassword1)) response.Append(new Exception("Enter your new password"));
                else if (newPassword1.Length < 5) response.Append(new Exception("Your new password must be at elast 5 characters in length"));
                if (string.IsNullOrEmpty(newPassword2)) response.Append(new Exception("Enter your new password (repeated)"));
                if (newPassword1 != newPassword2) response.Append(new Exception("Your new passwords must match"));
                if (response.IsValid)
                {
                    Member existingMemember = GetById(memberId);
                    if (existingMemember != null)
                    {
                        if (existingMemember.Password == oldPassword)
                        {
                            existingMemember.Password = newPassword1;
                            response.Append(Update(existingMemember));
                            if (response.IsValid)
                            {
                                response.Messages.Clear();
                                response.Append(new Message("Password change successful."));
                                EventHistoryLogic.Add(Enumerations.EventType.ChangePassword, $"{{memberId: \"{existingMemember.MemberId}\"}}", request, existingMemember.MemberId);
                                response.DataObject = existingMemember.ToLite();
                            }
                        }
                        else
                        {
                            response.Append(new Exception("Incorrect current password."));
                            EventHistoryLogic.Add(Enumerations.EventType.MemberSigninFailure, $"{{memberId: \"{existingMemember.MemberId}\"}}", request, existingMemember.MemberId);
                        }
                    }
                    else
                    {
                        response.Append(new Exception($"Invalid member id {memberId}."));
                    }
                }
            }
            catch (Exception exception)
            {
                response.Append(exception);
                EventHistoryLogic.Add(Enumerations.EventType.Exception, $"{{function: \"MemberLogic.ChangePassword\", exception: \"{GetCompleteExceptionMessage(exception)}\"}}", request);
            }

            return response;
        }
        public IActionResponse ConfirmEmail(string memberCode, HttpRequest request)
        {
            IActionResponse response = new ActionResponse("ValidateEmail");
            try
            {
                if (string.IsNullOrEmpty(memberCode))
                    response.Append(new Exception("Missing member code."));

                if (response.IsValid)
                {
                    Member member = GetByCode(memberCode);
                    if (member != null)
                    {
                        if (!member.ConfirmationDate.HasValue)
                        {
                            member.ConfirmationDate = DateTime.Now;
                            response.Append(Update(member));
                            response.DataObject = member.ToLite();
                            if (response.IsValid)
                                EventHistoryLogic.Add(Enumerations.EventType.EmailAddressValidated, $"{{memberId: \"{member.MemberId}\"}}", request, member.MemberId);
                        }
                        else
                        {
                            response.Append(new Message("This account was previously confirmed.", CoreLibrary.Enumerations.MessageType.Information));
                        }
                    }
                    else
                    {
                        response.Append(new Exception("Unable to determine member with this code."));
                    }
                }
            }
            catch (Exception exception)
            {
                response.Append(exception);
                EventHistoryLogic.Add(Enumerations.EventType.Exception, $"{{function: \"MemberLogic.ChangePassword\", exception: \"{GetCompleteExceptionMessage(exception)}\"}}", request);
            }

            return response;
        }
        public IActionResponse Insert(Member member, HttpRequest request)
        {
            IActionResponse response = base.Insert(member);

            try
            {
                if (response.IsValid)
                {
                    string rootApiPath = "http://knightstourdaily.com";
#if DEBUG
                    rootApiPath = "http://localhost:3131";
#endif
                    string body = "<p><strong>Thanks for signing up for an enhanced experience at <a href='http://knightstourdaily.com'>Knights Tour Daily</a></strong>.</p>";
                    body += "<p>Before you begin, please take a moment to confirm your account by clicking the link below:</p>";
                    body += $"<p><a href='{rootApiPath}/rest/knightsTour/confirmEmail?code={member.Code}'>Confirm Email Address</a></p>";
                    body += $"<p>You will never receive any spam from us - this is only for your security and in the event of a forgotten password the ability to reset your owm password.</p>";
                    response.Append(Context.EmailHandler.Send("donotreply@knightstourdaily.com", member.EmailAddress, "Welcome to Knights Tour Daily!", body));
                }
            }
            catch (Exception exception)
            {
                EventHistoryLogic.Add(Enumerations.EventType.Exception, $"{{function: \"MemberLogic.Insert\", exception: \"{GetCompleteExceptionMessage(exception)}\"}}", request);
            }

            return response;
        }
        public IActionResponse GetStatistics(int memberId, HttpRequest request)
        {
            IActionResponse response = new ActionResponse();

            try
            {
                List<SelectOption> options = new List<SelectOption>();
                DataRow result = StorageHandler.GetRecord(new StorageStatement()
                {
                    Statement = "SELECT * FROM [V_MemberStatistics] WHERE MemberId = @memberId",
                    Parameter = new GenericParameter("@memberId", memberId)
                });

                if (result != null)
                {
                    List<string> levelNames = new List<string>() { "Beginner", "Easy", "Medium", "Hard", "Challenging" };
                    DboVMemberStatistic statistic = new DboVMemberStatistic(result);

                    options.Add(new SelectOption("Sign up date", result.ValueAs<DateTime>("CreateDate").ToLongDateString()));
                    options.Add(new SelectOption("Public initials", result.ValueAs<string>("UserInitials")));

                    options.Add(new SelectOption("Total logins", result.ValueAs<string>("TotalLogins")));
                    options.Add(new SelectOption("Total tours attempted", result.ValueAs<string>("TotalAttempted")));
                    options.Add(new SelectOption("Total tours completed", result.ValueAs<string>("TotalCompleted")));
                    options.Add(new SelectOption("Total daily tours attempted", result.ValueAs<string>("TotalDailyAttempted")));
                    options.Add(new SelectOption("Total daily tours completed", result.ValueAs<string>("TotalDailyCompleted")));

                    foreach (string levelName in levelNames)
                    {
                        decimal fastestTime = result.ValueAs<decimal>($"Fastest{levelName}Time");
                        if (fastestTime > 0)
                            options.Add(new SelectOption($"Fastest {levelName.ToLower()} time", TextAssistant.FormatHumanTimeSpan(fastestTime)));
                        else
                            options.Add(new SelectOption($"Fastest {levelName.ToLower()} time", "N/A"));

                        decimal longestTime = result.ValueAs<decimal>($"Longest{levelName}Time");
                        if (longestTime > 0)
                            options.Add(new SelectOption($"Longest {levelName.ToLower()} time", TextAssistant.FormatHumanTimeSpan(longestTime)));
                        else
                            options.Add(new SelectOption($"Longest {levelName.ToLower()} time", "N/A"));

                        decimal averageTime = result.ValueAs<decimal>($"Average{levelName}Time");
                        if (averageTime > 0)
                            options.Add(new SelectOption($"Average {levelName.ToLower()} time", TextAssistant.FormatHumanTimeSpan(averageTime)));
                        else
                            options.Add(new SelectOption($"Average {levelName.ToLower()} time", "N/A"));

                        options.Add(new SelectOption($"Total {levelName.ToLower()} tours attempted", result.ValueAs<string>($"Total{levelName}Attempted")));
                        options.Add(new SelectOption($"Total {levelName.ToLower()} tours completed", result.ValueAs<string>($"Total{levelName}Completed")));
                    }
                }

                response.Append(new Message($"{options.Count} member statistics retrieved."));
                response.DataObject = options;
            }
            catch (Exception exception)
            {
                response.Append(exception);
            }

            return response;
        }
        public IActionResponse Communicate(MemberCommunication communication, HttpRequest request)
        {
            ActionResponse response = new ActionResponse("MemberCommunication");
            try
            {
                if (string.IsNullOrEmpty(communication.Subject) && string.IsNullOrEmpty(communication.Body))
                    response.Append(new Exception("Please provide at least a subject or a body of text in your communication."));

                if (response.IsValid)
                {
                    string body = $"<p><strong>From:</strong>{communication.UserName}</p>";
                    body += $"<p><strong>Email Address:</strong>{communication.EmailAddress}</p>";
                    body += $"<p><strong>Subject:</strong>{communication.Subject}</p>";
                    body += $"<p><strong>Purpose:</strong>{communication.Purpose}</p>";
                    body += $"<p><strong>Body:</strong>{communication.Body}</p>";
                    response.Append(Context.EmailHandler.Send("donotreply@knightstourdaily.com", "cchartrand@gmail.com", "Knights Tour Communication", body));
                }
            }
            catch (Exception exception)
            {
                EventHistoryLogic.Add(Enumerations.EventType.Exception, $"{{function: \"MemberLogic.Insert\", exception: \"{GetCompleteExceptionMessage(exception)}\"}}", request);
            }

            return response;
        }
        #endregion Extended Methods

        #region Private support methods
        static bool IsValidEmail(string email)
        {
            if (string.IsNullOrWhiteSpace(email))
                return false;

            try
            {
                // Normalize the domain
                email = Regex.Replace(email, @"(@)(.+)$", DomainMapper, RegexOptions.None, TimeSpan.FromMilliseconds(200));

                // Examines the domain part of the email and normalizes it.
                string DomainMapper(Match match)
                {
                    // Use IdnMapping class to convert Unicode domain names.
                    var idn = new IdnMapping();

                    // Pull out and process domain name (throws ArgumentException on invalid)
                    var domainName = idn.GetAscii(match.Groups[2].Value);

                    return match.Groups[1].Value + domainName;
                }
            }
            catch (RegexMatchTimeoutException e)
            {
                return false;
            }
            catch (ArgumentException e)
            {
                return false;
            }

            try
            {
                return Regex.IsMatch(email,
                    @"^(?("")("".+?(?<!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))" +
                    @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-0-9a-z]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0,22}[a-z0-9]))$",
                    RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250));
            }
            catch (RegexMatchTimeoutException)
            {
                return false;
            }
        }
        Member GetByEmailAddress(string emailAddress)
        {
            if (!string.IsNullOrEmpty(emailAddress))
            {
                var result = StorageHandler.GetRecord(new StorageStatement() { Statement = "SELECT * FROM [Member] WHERE UPPER([EmailAddress]) = @emailAddress", Parameter = new GenericParameter("@emailAddress", emailAddress.ToUpper()) });
                if (result != null)
                    return new Member(result);
            }

            return null;
        }
        Member GetByCode(string code)
        {
            if (!string.IsNullOrEmpty(code))
            {
                var result = StorageHandler.GetRecord(new StorageStatement() { Statement = "SELECT * FROM [Member] WHERE UPPER([Code]) = @code", Parameter = new GenericParameter("@code", code.ToUpper()) });
                if (result != null)
                    return new Member(result);
            }

            return null;
        }
        string GeneratePassword()
        {
            var password = string.Empty;
            var length = 7;

            //Valid characaters
            var characters = "abcdefghjkmnpqrstwxyz123456789";

            var randomCharacter = new Random();
            var randomCase = new Random();

            while (password.Length <= length)
            {
                var character = characters[randomCharacter.Next(0, characters.Length)].ToString();
                if (randomCase.Next(0, 2) == 1)
                    character = character.ToUpper();

                password += character;
            }

            return password;
        }
        #endregion

    } // Class
} // Namespace
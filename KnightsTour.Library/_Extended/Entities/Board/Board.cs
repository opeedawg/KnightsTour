// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : January 13, 2023 7:25:01 AM
// File             : Board.cs
// ************************************************************************

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Data;

namespace KnightsTour
{
    /// <summary>
    /// The extended Board object.
    /// Generated On: January 13, 2023 at 7:25:01 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// Feel free to add properties as you see fit here.
    /// In general operations against or for Boards should be placed in the BoardLogic class.
    /// The exception to this suggestion is overriding base methods (Initialize is a common example)
    /// e.g. public new void Initialize(){ base.Initialize(); }
    /// </remarks>
    public class Board : BoardBase
    {
        #region Extended Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="Board"/> class.
        /// Initializes a new empty instance of the Board class.
        /// </summary>
        /// <example>
        /// <code>
        /// Board board = new Board();
        /// </code>
        /// </example>
        public Board() : base()
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Board"/> class.
        /// Initializes a new empty instance of the Board class with the given primary key.
        /// </summary>
        /// <param name="id">The primary key value.</param>
        /// <example>
        /// <code>
        /// Board board = new Board(1);
        /// </code>
        /// </example>
        public Board(int? id) : base(id)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Board"/> class.
        /// Initializes a new empty instance of the Board class from the record in a data reader.
        /// </summary>
        /// <param name="record">A record returned from a database reader.</param>
        public Board(IDataRecord record) : base(record, null)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Board"/> class.
        /// Initializes a new empty instance of the Board class from the record in a data reader populating only the Board columns specified.
        /// </summary>
        /// <param name="record">A record returned from a database reader.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.BoardProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public Board(IDataRecord record, List<Enumerations.BoardProperty> columnsToInclude = null) : base(record, columnsToInclude)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Board"/> class.
        /// Initializes a new empty instance of the Board class from a DataRow (via a <see cref="DataTable" /> usually part of a larger <see cref="DataSet" />).
        /// </summary>
        /// <param name="record">The <see cref="DataRow" />.</param>
        public Board(DataRow record) : base(record, null)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Board"/> class.
        /// Initializes a new empty instance of the Board class from a DataRow (via a <see cref="DataTable" /> usually part of a larger <see cref="DataSet" />) populating only the Board columns specified.
        /// </summary>
        /// <param name="record">The <see cref="DataRow" />.</param>
        /// <param name="columnsToInclude">A list of <see cref="Enumerations.BoardProperty"/> if you want a sub set of properties populated.  Defaulted to null which will be translated to mean no filter and return all properties.</param>
        public Board(DataRow record, List<Enumerations.BoardProperty> columnsToInclude = null) : base(record, columnsToInclude)
        {
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Board"/> class.
        /// Initializes a new empty instance of the Board class from the lite version of the Board entity.
        /// </summary>
        /// <param name="boardLite">An object representing the lite version of the Board.</param>
        public Board(BoardLite boardLite) : base(boardLite)
        {
        }
        #endregion Extended Constructor(s)

        #region Extended Declarations
        #endregion Extended Declarations

        #region Extended Properties
        public string ShortDescription 
        {
            get 
            {
                if(BoardId.HasValue)
                    return $"{RowDimension} x {ColDimension} board ({BoardId})";
                else
                    return $"{RowDimension} x {ColDimension} new board";
            }
        }
        public string LongDescription 
        {
            get 
            {
                return $"{ShortDescription} created by {Author} on {DiscoveryDateFormatted}";
            }
        }
        List<List<int>> deserializedPath = null;
        public List<List<int>> DeserializedPath 
        {
            get 
            {
                if (deserializedPath == null)
                {
                    deserializedPath = new List<List<int>>();
                    if (!string.IsNullOrEmpty(Path))
                    {
                        RawPath convertedPath = JsonConvert.DeserializeObject<RawPath>(Path);
                        deserializedPath = convertedPath.Path;
                    }
                }

                return deserializedPath;
            }
        }
        public bool IsSquare {
            get 
            {
                return RowDimension == ColDimension;
            }
        }
        public string SerializedPath
        {
            get
            {
                string path = "{}";
                if (!string.IsNullOrEmpty(Path))
                {
                    path = SerializePath(DeserializedPath);
                }

                return path;
            }
        }
        public int TotalSquares
        {
            get
            {
                return RowDimension * ColDimension;
            }
        }
        #endregion Extended Properties

        #region Extended Methods
        public string SerializePath(List<List<int>> rawPath)
        {
            string pathText = "{}";
            if (rawPath.Count > 0)
            {
                pathText = $"{{\"Path\":{JsonConvert.SerializeObject(rawPath)}}}";
                deserializedPath = null;
            }

            return pathText;
        }
        public void RotateBoard(int sourceBoardId)
        {
            try
            {
                List<List<int>> rotatedPath = new List<List<int>>();

                for (int oldColCounter = ColDimension - 1; oldColCounter >= 0; oldColCounter--)
                {
                    List<int> newRow = new List<int>();
                    for (int oldRowCounter = 0; oldRowCounter < RowDimension; oldRowCounter++)
                    {
                        newRow.Add(DeserializedPath[oldRowCounter][oldColCounter]);
                    }

                    rotatedPath.Add(newRow);
                }

                BoardId = null;
                BoardCode = Guid.NewGuid();
                DiscoveryDate = DateTime.Now;
                Path = SerializePath(rotatedPath);
                SourceBoardId = sourceBoardId;
                if (!IsSquare)
                {
                    int originalColCount = ColDimension;
                    int originalRowCount = RowDimension;
                    ColDimension = originalRowCount;
                    RowDimension = originalColCount;
                }
            }
            catch (Exception exception)
            {
                throw new Exception($"Rotating board {sourceBoardId}", exception);
            }
        }
        #endregion Extended Methods

        public class RawPath
        {
            public int Rows { get; set; }
            public int Cols { get; set; }
            public List<List<int>> Path { get; set; }
        }

    } // Class
} // Namespace
// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : March 19, 2023 7:56:06 AM
// File             : DataTestBase.cs
// ************************************************************************

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Transactions;

using KnightsTour;
using KnightsTour.CoreLibrary;
using KnightsTour.CoreLibrary.Enumerations;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace KnightsTourUnitTests
{
    /// <summary>
    /// Base class for all data tests.
    /// Generated On: March 19, 2023 at 7:56:06 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    public class DataTestBase<TPk> : DummyClass
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="DataTestBase<TPk>"/> class.
        /// The base data class constructor.
        /// </summary>
        public DataTestBase()
        {
            EntityAttributesCache = new Dictionary<string, KnightsTour.CoreLibrary.EntityAttribute<TPk>>();
            BulkTestQuantity = 10;
            MaxFKQuantity = 5;
        }
        #endregion Constructor(s)

        #region Declarations
        Random rand = new Random(); // Random number required for class functionality.
        static string projectSchema = null; // The project schema name (if it exists).
        #endregion Declarations

        #region Properties

        /// <summary>
        /// Random number access.
        /// </summary>
        /// <value>
        /// The rand generator.
        /// </value>
        protected Random RandGenerator
        {
            get
            {
                if (rand == null)
                {
                    rand = new Random();
                }
                return rand;
            }
        }

        /// <summary>
        /// User name for logic access.
        /// </summary>
        /// <value>
        /// The user name.
        /// </value>
        public new string UserName
        {
            get
            {
                return "Unit Test";
            }
        }

        /// <summary>
        /// Cache for entity attributes.
        /// </summary>
        /// <value>
        /// The entity attributes cache.
        /// </value>
        protected static Dictionary<string, KnightsTour.CoreLibrary.EntityAttribute<TPk>> EntityAttributesCache
        {
            get;
            set;
        }

        /// <summary>
        /// Default bulk test quantity.
        /// </summary>
        /// <value>
        /// The bulk test quantity.
        /// </value>
        public int BulkTestQuantity
        {
            get;
            set;
        }

        /// <summary>
        /// Default maximum foreign key quantity to retrieve (lower is faster).
        /// </summary>
        /// <value>
        /// The max f k quantity.
        /// </value>
        public int MaxFKQuantity
        {
            get;
            set;
        }

        /// <summary>
        /// The projects configured schema name.
        /// </summary>
        /// <value>
        /// The project schema.
        /// </value>
        protected static string ProjectSchema
        {
            get
            {
                if (projectSchema == null)
                {
                    projectSchema = ConfigurationAssistant.GetString("Schema", string.Empty);
                }
                return projectSchema;
            }
        }
        #endregion Properties

        #region Methods

        /// <summary>
        /// Description for Get New Entity< T>.
        /// </summary>
        protected T GetNewEntity<T>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new()
        {
            dynamic entity = new T();
            switch (new T().EntityName)
            {
                case "DummyClass":
                    #region Create dynamic DummyClass object
                    entity.Description = $"Dummy Class Description - {RandGenerator.Next(100)}";
                    entity.FK1 = RandGenerator.Next(100);
                    entity.FK2 = RandGenerator.Next(100);
                    entity.CreateDate = DateTime.Now.AddDays(-(RandGenerator.Next(365)));
                    entity.Amount = 123.45M;
                    entity.SomeFlag = RandGenerator.Next(100) % 2 == 0;
                    return (T)entity;
                #endregion
                case "Board":
                    #region Create dynamic Board object
                    if (StorageProvider.GetEntityAttribute<KnightsTour.Board, KnightsTour.BoardLite, int?>().RecordCount == 0)
                    {
                        Assert.Inconclusive("Unable to insert an entity of type 'board' due to lack of data.");
                    }

                    entity.BoardCode = Guid.NewGuid();
                    entity.RowDimension = RandGenerator.Next(0, 1000);
                    entity.ColDimension = RandGenerator.Next(0, 1000);
                    entity.DiscoveryDate = DateTime.Now.AddDays(-(RandGenerator.Next(365)));
                    entity.Author = "aaaaaaaaaa";
                    entity.DiscoveryIterationCount = long.Parse(RandGenerator.Next(0, 100).ToString());
                    entity.DiscoveryRandomness = RandGenerator.Next(0, 1000);
                    entity.Path = $"Board {RandGenerator.Next(10000)}";
                    entity.SourceBoardId = StorageProvider.GetFKValues<KnightsTour.Board, KnightsTour.BoardLite, int?>("SourceBoardId", 1)[0];
                    return (T)entity;
                #endregion
                case "DifficultyLevel":
                    #region Create dynamic DifficultyLevel object
                    entity.Name = "aaaaaaaaaa";
                    entity.Description = $"DifficultyLevel {RandGenerator.Next(10000)}";
                    entity.MaximumGap = RandGenerator.Next(0, 1000);
                    entity.PercentVisibility = 123.123M;
                    entity.HighlightClosestEnabled = true;
                    entity.DuplicateCheckingEnabled = true;
                    entity.GuessFilterEnabled = true;
                    entity.BadLinkEnabled = true;
                    entity.MaximumDimension = RandGenerator.Next(0, 1000);
                    entity.MinimumDimension = RandGenerator.Next(0, 1000);
                    return (T)entity;
                #endregion
                case "EventHistory":
                    #region Create dynamic EventHistory object
                    if (StorageProvider.GetEntityAttribute<KnightsTour.EventHistory, KnightsTour.EventHistoryLite, int?>().RecordCount == 0)
                    {
                        Assert.Inconclusive("Unable to insert an entity of type 'event history' due to lack of data.");
                    }

                    entity.EventTypeId = StorageProvider.GetFKValues<KnightsTour.EventHistory, KnightsTour.EventHistoryLite, int?>("EventTypeId", 1)[0];
                    entity.EventDate = DateTime.Now.AddDays(-(RandGenerator.Next(365)));
                    entity.SourceInternetAddress = "aaaaaaaaaa";
                    entity.Country = "aaaaaaaaaa";
                    entity.Region = "aaaaaaaaaa";
                    entity.City = "aaaaaaaaaa";
                    entity.ZipPostal = "aaaaaaaaaa";
                    entity.Context = $"EventHistory {RandGenerator.Next(10000)}";
                    entity.MemberId = StorageProvider.GetFKValues<KnightsTour.EventHistory, KnightsTour.EventHistoryLite, int?>("MemberId", 1)[0];
                    return (T)entity;
                #endregion
                case "EventType":
                    #region Create dynamic EventType object
                    entity.Name = "aaaaaaaaaa";
                    return (T)entity;
                #endregion
                case "Member":
                    #region Create dynamic Member object
                    entity.CreateDate = DateTime.Now.AddDays(-(RandGenerator.Next(365)));
                    entity.EmailAddress = "aaaaaaaaaa";
                    entity.ConfirmationDate = null;
                    entity.DisplayName = "aaaaaaaaaa";
                    entity.Password = "aaaaaaaaaa";
                    entity.UserInitials = "aaa";
                    entity.Code = "aaaaaaaaaa";
                    entity.IsAdministrator = true;
                    return (T)entity;
                #endregion
                case "Puzzle":
                    #region Create dynamic Puzzle object
                    if (StorageProvider.GetEntityAttribute<KnightsTour.Puzzle, KnightsTour.PuzzleLite, int?>().RecordCount == 0)
                    {
                        Assert.Inconclusive("Unable to insert an entity of type 'puzzle' due to lack of data.");
                    }

                    entity.PuzzleCode = Guid.NewGuid();
                    entity.BoardId = StorageProvider.GetFKValues<KnightsTour.Puzzle, KnightsTour.PuzzleLite, int?>("BoardId", 1)[0];
                    entity.DifficultyLevelId = StorageProvider.GetFKValues<KnightsTour.Puzzle, KnightsTour.PuzzleLite, int?>("DifficultyLevelId", 1)[0];
                    entity.Path = $"Puzzle {RandGenerator.Next(10000)}";
                    entity.PuzzleOfTheDayDate = null;
                    return (T)entity;
                #endregion
                case "Solution":
                    #region Create dynamic Solution object
                    if (StorageProvider.GetEntityAttribute<KnightsTour.Solution, KnightsTour.SolutionLite, int?>().RecordCount == 0)
                    {
                        Assert.Inconclusive("Unable to insert an entity of type 'solution' due to lack of data.");
                    }

                    entity.PuzzleId = StorageProvider.GetFKValues<KnightsTour.Solution, KnightsTour.SolutionLite, int?>("PuzzleId", 1)[0];
                    entity.MemberId = StorageProvider.GetFKValues<KnightsTour.Solution, KnightsTour.SolutionLite, int?>("MemberId", 1)[0];
                    entity.SolutionStartDate = DateTime.Now.AddDays(-(RandGenerator.Next(365)));
                    entity.SolutionDuration = null;
                    entity.Path = $"Solution {RandGenerator.Next(10000)}";
                    entity.Note = $"Solution {RandGenerator.Next(10000)}";
                    return (T)entity;
                #endregion
                default:
                    throw new Exception($"Unhandled entity creation of type {new T().EntityName}");
            }
        }
        #endregion Methods

        #region Static code methods.
                #region Protected method methods.
        protected string GetTypeValue<T>()
        {
            if (typeof(T).Name.StartsWith("Nullable"))
            {
                if (typeof(T).FullName.Contains("System.DateTime"))
                    return "DateTime?";
                else if (typeof(T).FullName.Contains("System.Int64"))
                    return "Int64?";
                else if (typeof(T).FullName.Contains("System.Int16"))
                    return "Int16?";
                else if (typeof(T).FullName.Contains("System.Guid"))
                    return "Guid?";
                else if (typeof(T).FullName.Contains("System.Decimal"))
                    return "Decimal?";
                else if (typeof(T).FullName.Contains("System.Double"))
                    return "Double?";
                else if (typeof(T).FullName.Contains("System.TimeSpan"))
                    return "TimeSpan?";
                else if (typeof(T).FullName.Contains("System.Boolean"))
                    return "Boolean?";
                else
                    return "Int32?";
            }
            else
            {
                return $"{typeof(T).Name}";
            }
        }

        protected dynamic GetInitialValue<T>()
        {
            string typeName = GetTypeValue<T>();

            if (typeName.StartsWith("DateTime"))
                return DateTime.Now;
            else if (typeName.StartsWith("Guid"))
                return Guid.NewGuid();
            else if (typeName.StartsWith("String"))
                return "Bob";
            else if (typeName.StartsWith("Decimal"))
                return 1.0;
            else if (typeName.StartsWith("Int16"))
                return (short)1;
            else
                return 1;
        }

        protected dynamic GetRandomValue<T>(int maxLength = 15)
        {
            string typeName = GetTypeValue<T>();

            if (typeName.StartsWith("DateTime"))
                return new DateTime(rand.Next(2000,2022), rand.Next(1, 12), rand.Next(1, 28));
            else if (typeName.StartsWith("Guid"))
                return Guid.NewGuid();
            else if (typeName.StartsWith("String"))
            {
                int stringLength = rand.Next(1, maxLength);
                const string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
                return new string(Enumerable.Repeat(chars, stringLength).Select(s => s[rand.Next(s.Length)]).ToArray());
            }
            else if (typeName.StartsWith("Decimal"))
                return Math.Round(rand.NextDouble()*100,1);
            else if (typeName.StartsWith("Int16"))
                return (short)rand.Next(2, 255);
            else
                return rand.Next(2,10000);
        }

        protected List<T> CreateEntities<T>(int total) where T : KnightsTour.CoreLibrary.IEntity<TPk>, new()
        {
            List<T> entities = new List<T>();

            for (int i = 0; i < total; i++)
            {
                entities.Add(GetNewEntity<T>());
            }

            return entities;
        }
        protected string GetHTMLPage()
        {
            string html = "<html>";
            html += " <head>";
            html += "  <title>Test Document</title>";
            html += " </head>";
            html += " <body>";
            html += "  <div>This is a div</div>";
            html += "  <p>p1</p>";
            html += "  <p>p2</p>";
            html += "  <p>p3</p>";
            html += "  <p>p4</p>";
            html += "  <p>p5</p>";
            html += "  <span>";
            html += "	<a href=\"#\">Span 1 Anchor 1</a>";
            html += "	<a href=\"#\">Span 1 Anchor 2</a>";
            html += "	<a href=\"#\">Span 1 Anchor 3</a>";
            html += "  </span>";
            html += "  <span>";
            html += "	<a href=\"#\">Span 2 Anchor 1</a>";
            html += "	<a href=\"#\">Span 2 Anchor 2</a>";
            html += "	<a href=\"#\">Span 2 Anchor 3</a>";
            html += "  </span>";
            html += " </body>";
            html += "</html>";

            return html;
        }
        protected static dynamic GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty property) where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            string key = new T().EntityName;
            if (!EntityAttributesCache.ContainsKey(key))
            {
                EntityAttributesCache.Add(key, StorageProvider.GetEntityAttribute<T, TLite, TPk>());
            }
            switch (property)
            {
                case KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount:
                    return EntityAttributesCache[key].RecordCount;
                case KnightsTour.CoreLibrary.Enumerations.EntityProperty.FirstId:
                    return EntityAttributesCache[key].FirstId;
                case KnightsTour.CoreLibrary.Enumerations.EntityProperty.LastId:
                    return EntityAttributesCache[key].LastId;
                case KnightsTour.CoreLibrary.Enumerations.EntityProperty.HasStringField:
                    return EntityAttributesCache[key].HasStringField;
                case KnightsTour.CoreLibrary.Enumerations.EntityProperty.StringField:
                    return EntityAttributesCache[key].StringField;
                case KnightsTour.CoreLibrary.Enumerations.EntityProperty.HasIntField:
                    return EntityAttributesCache[key].HasIntField;
                case KnightsTour.CoreLibrary.Enumerations.EntityProperty.IntField:
                    return EntityAttributesCache[key].IntField;
                default:
                    throw new Exception($"Unhandled entity prperty request: {property.ToString()}");
            }
        }
        #endregion Protected method methods.

        #region Protected Generic Entity related test methods.
        protected void Entity_Constructor<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            //Default empty constructor
            T entity = new T();
            Assert.IsFalse(string.IsNullOrEmpty(entity.EntityName));
            Assert.IsFalse(string.IsNullOrEmpty(entity.PrimaryKeyField));
            Assert.IsTrue(entity.IsNew);
        }
        protected void Entity_Constructor_Id<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            // Constructor with id.
            TPk id = GetRandomValue<TPk>();
            T entity = (T)Activator.CreateInstance(typeof(T), id);
            Assert.IsFalse(string.IsNullOrEmpty(entity.EntityName));
            Assert.IsFalse(string.IsNullOrEmpty(entity.PrimaryKeyField));
            Assert.IsFalse(entity.IsNew);
            Assert.AreEqual(entity.Id, id);
        }
        protected void Entity_Constructor_IDataRecord<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            // Constructor by an IDataRecord.
            KnightsTour.CoreLibrary.IStorageHandler handler = StorageProvider.GetHandler();
            Assert.IsNotNull(handler);
            if (!handler.ReturnsDynamicObjects)
            {
                if (GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount) > 0)
                {
                    long firstId = GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.FirstId);
                    foreach (IDataRecord row in handler.GetRecords(new KnightsTour.CoreLibrary.StorageStatement
                    {
                        Statement = $"SELECT * FROM {StorageProvider.GetTableSQL(new T().TableName, new T().TableSchema)} WHERE {StorageProvider.GetColumnSQL(new T().PrimaryKeyField)} < {firstId++}"
                    }))
                    {
                        T entity = (T)Activator.CreateInstance(typeof(T), row);
                        Assert.IsFalse(string.IsNullOrEmpty(entity.EntityName));
                        Assert.IsFalse(string.IsNullOrEmpty(entity.PrimaryKeyField));
                        Assert.IsFalse(entity.IsNew);
                        Assert.AreEqual(entity.Id, int.Parse(firstId.ToString()));
                    }
                }
                else
                    Assert.Inconclusive($"No {new T().EntityName} records to test IDataRecord constructor against.");
            }
            else
                Assert.Inconclusive($"Current Storage Configuration does not return SQL rows.");
        }
        protected void Entity_Constructor_DataRow<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            //Constructor by an DataRow
            KnightsTour.CoreLibrary.IStorageHandler handler = StorageProvider.GetHandler();
            Assert.IsNotNull(handler);
            if (!handler.ReturnsDynamicObjects)
            {
                if (GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount) > 0)
                {
                    long firstId = GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.FirstId);
                    DataRow row = handler.GetRecord(new KnightsTour.CoreLibrary.StorageStatement
                    {
                        Statement = $"SELECT * FROM {StorageProvider.GetTableSQL(new T().TableName, new T().TableSchema)} WHERE {StorageProvider.GetColumnSQL(new T().PrimaryKeyField)} = {firstId}"
                    });
                    T entity = (T)Activator.CreateInstance(typeof(T), row);
                    Assert.IsFalse(string.IsNullOrEmpty(entity.EntityName));
                    Assert.IsFalse(string.IsNullOrEmpty(entity.PrimaryKeyField));
                    Assert.IsFalse(entity.IsNew);
                    Assert.AreEqual(entity.Id, int.Parse(firstId.ToString()));
                }
                else
                    Assert.Inconclusive($"No {new T().EntityName} records to test DataRow constructor against.");
            }
            else
                Assert.Inconclusive($"Current Storage Configuration does not return SQL rows.");
        }
        protected void Entity_Constructor_Lite<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            // Constructor with id.
            TPk id = GetRandomValue<TPk>();
            T entity = (T)Activator.CreateInstance(typeof(T), id);
            TLite liteEntity = (TLite)Activator.CreateInstance(typeof(TLite), entity);

            T entityFromLite = (T)Activator.CreateInstance(typeof(T), liteEntity);
            Assert.IsFalse(string.IsNullOrEmpty(entity.EntityName));
            Assert.IsFalse(string.IsNullOrEmpty(entity.PrimaryKeyField));
            Assert.IsFalse(entity.IsNew);
            Assert.AreEqual(entityFromLite.Id, id);
        }
        protected void Entity_Constructor_Dynamic<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            // Constructor by an ExpandoObject.
            KnightsTour.CoreLibrary.IStorageHandler handler = StorageProvider.GetHandler();
            Assert.IsNotNull(handler);
            if (handler.ReturnsDynamicObjects)
            {
                if (GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount) > 0)
                {
                    long firstId = GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.FirstId);
                    dynamic row = handler.GetRecord(new KnightsTour.CoreLibrary.StorageStatement
                    {
                        Condition = new KnightsTour.CoreLibrary.RetrievalCondition {
                            NonSQLWhere = new KnightsTour.CoreLibrary.WhereSet(new KnightsTour.CoreLibrary.WhereClause(new T().PrimaryKeyField, firstId))
                        }
                    });
                    T entity = (T)Activator.CreateInstance(typeof(T), row);
                    Assert.IsFalse(string.IsNullOrEmpty(entity.EntityName));
                    Assert.IsFalse(string.IsNullOrEmpty(entity.PrimaryKeyField));
                    Assert.IsFalse(entity.IsNew);
                    Assert.AreEqual(entity.Id, int.Parse(firstId.ToString()));
                }
                else
                    Assert.Inconclusive($"No {new T().EntityName} records to test DataRow constructor against.");
            }
            else
                Assert.Inconclusive($"Current Storage Configuration does not return Dynamic Objects.");
        }
        protected void Entity_Lite_Constructor<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            // Constructor with id.
            TPk id = GetRandomValue<TPk>();
            T entity = (T)Activator.CreateInstance(typeof(T), id);
            Assert.IsNotNull(entity);
            TLite liteEntity = (TLite)Activator.CreateInstance(typeof(TLite), entity);
            Assert.IsNotNull(liteEntity);
            Assert.AreEqual(liteEntity.Id, entity.Id);
        }
        protected void Entity_Clone<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            // Default empty constructor.
            T entity = new T();
            Assert.IsNotNull(entity);

            MethodInfo method = typeof(T).GetMethod("Clone");
            T clone = (T)method.Invoke(entity, null);
            Assert.IsNotNull(entity);
            Assert.AreNotSame(clone, entity);
            Assert.AreSame(entity.Id, clone.Id);
        }
        protected void Entity_ToString<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            // Default empty constructor.
            T entity = GetNewEntity<T>();
            Assert.IsNotNull(entity);
            string entityString = entity.ToString();
            Assert.IsNotNull(entityString);
        }
        protected void Entity_IsModified<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            // Default empty constructor.
            T entity = GetNewEntity<T>();
            MethodInfo method = typeof(T).GetMethod("SetOriginalProperties");
            method.Invoke(entity, null);
            Assert.IsNotNull(entity);
            Assert.IsFalse(entity.IsModified());
            entity.Id = GetInitialValue<TPk>();
            Assert.IsTrue(entity.IsModified());
        }
        protected void Entity_IsModifiedProperty<T, TLite>(Type type, object[] parameters) where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            // Default empty constructor.
            T entity = GetNewEntity<T>();
            MethodInfo method = typeof(T).GetMethod("SetOriginalProperties");
            method.Invoke(entity, null);
            Assert.IsNotNull(entity);
            Assert.IsFalse(entity.IsModified());
            entity.Id = GetInitialValue<TPk>();
            method = typeof(T).GetMethod("IsModified", new[] { type });
            Assert.IsTrue((bool)method.Invoke(entity, new object[] { parameters[0] }));
            Assert.IsFalse((bool)method.Invoke(entity, new object[] { parameters[1] }));
        }

        #endregion Protected Generic Entity related test methods.

        #region Protected Generic Repository related test methods.
        protected void EntityRepository_HasStorageHandler<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);
            KnightsTour.CoreLibrary.IStorageHandler handler = repository.StorageHandler;
            Assert.IsNotNull(handler);
        }
        protected void EntityRepository_GetById<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);

            TPk id = GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.FirstId);
            if (id != null)
            {
                T entity = repository.GetById(id);
                Assert.IsNotNull(entity);
                Assert.AreEqual(id, entity.Id);
            }
        }
        protected void EntityRepository_GetAll<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);

            long totalRecords = GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount);
            if (totalRecords > 0)
            {
                List<T> entities = repository.GetAll().ToList();
                Assert.IsTrue(entities.Count > 0);
                Assert.AreEqual(entities.Count, totalRecords);
            }
        }
        protected void EntityRepository_GetAll_ByPredicate<T, TLite>(Func<T, bool> predicate) where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);

            string pk = new T().PrimaryKeyField;

            long totalRecords = GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount);
            if (totalRecords > 1)
            {
                List<T> entities = repository.GetAll(predicate).ToList();
                Assert.IsTrue(entities.Count > 0);
                Assert.IsTrue(entities.Count < totalRecords);
            }
        }
        protected void EntityRepository_GetAll_ByCondition<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);

            string pk = new T().PrimaryKeyField;

            long totalRecords = GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount);
            if (totalRecords > 1)
            {
                long maxId = GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.LastId);
                List<T> entities = repository.GetAll(new KnightsTour.CoreLibrary.RetrievalCondition { SQLWhere = $"{StorageProvider.GetColumnSQL(pk)} < {maxId}" }).ToList();
                Assert.IsTrue(entities.Count > 0);
                Assert.IsTrue(entities.Count < totalRecords);
            }
        }
        protected void EntityRepository_GetByFK<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);
            foreach (string property in EntityMapper.FKNames(new T().EntityName))
            {
                // Get some valid FK Values.
                foreach (dynamic fkValue in StorageProvider.GetFKValues<T, TLite, TPk>(property))
                {
                    List<T> entities = repository.GetByFK(property, fkValue, new KnightsTour.CoreLibrary.RetrievalCondition { SQLOrderBy = property, Skip = 0, Take = MaxFKQuantity }).ToList();
                    Assert.IsTrue(entities.Count > 0);
                    Assert.IsTrue(entities.Count <= MaxFKQuantity);
                }
            }
        }
        protected void EntityRepository_GetByFKs<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            if (GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount) > 1)
            {
                KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);
                foreach (string property in EntityMapper.FKNames(new T().EntityName))
                {
                    //Get some valid FK Values
                    List<T> entities = repository.GetByFKs(property, StorageProvider.GetFKValues<T, TLite, TPk>(property), new KnightsTour.CoreLibrary.RetrievalCondition { SQLOrderBy = property, Skip = 0, Take = MaxFKQuantity }).ToList();
                    Assert.IsTrue(entities.Count > 0);
                    Assert.IsTrue(entities.Count <= MaxFKQuantity);
                }
            }
            else
            {
                Assert.Inconclusive("No records to execute tewst against.");
            }
        }
        protected void EntityRepository_GetByIds<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            if (GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount) > 1)
            {
                KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);

                TPk firstId = GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.FirstId);
                TPk lastId = GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.LastId);
                List<TPk> ids = new List<TPk>() { firstId, lastId };

                List<T> entities = repository.GetByIds(ids).ToList();
                Assert.IsNotNull(entities);
                Assert.AreEqual(entities.Count, 2);
                entities = entities.OrderBy(e => e.Id).ToList();
                Assert.AreEqual(entities[0].Id, firstId);
                Assert.AreEqual(entities[1].Id, lastId);
            }
            else
            {
                Assert.Inconclusive("No records to execute tewst against.");
            }
        }
        protected void EntityRepository_Insert_Single<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            using (var transaction = new TransactionScope())
            {
                T entity = InsertEntity<T, TLite>();
                // DO NOT COMMIT TRANSACTION.
            }
        }
        protected T InsertEntity<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            T entity = GetNewEntity<T>();

            Assert.IsNotNull(entity);
            Assert.IsTrue(entity.IsNew);

            KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);

            // If a manual configuration is found, then set a value for the primary key now.
            if (entity.PKInsertConfiguration == InsertPKRule.Manual)
            {
                entity.Id = GetRandomValue<TPk>();
            }

            KnightsTour.CoreLibrary.IActionResponse response = repository.Insert(entity);
            Assert.IsTrue(response.IsValid);
            Assert.IsFalse(entity.IsNew);
            Assert.IsNotNull(entity.Id);
            return entity;
        }
        protected void EntityRepository_Insert_Multiple<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            // Block size larger than the number of entities.
            using (var transaction = new TransactionScope())
            {
                List<T> entities = CreateEntities<T>(BulkTestQuantity);

                Assert.IsNotNull(entities);
                Assert.IsTrue(entities.Count == BulkTestQuantity);
                foreach (T entity in entities)
                {
                    Assert.IsTrue(entity.IsNew);

                    // If a manual configuration is found, then set a value for the primary key now.
                    if (entity.PKInsertConfiguration == InsertPKRule.Manual)
                    {
                        entity.Id = GetRandomValue<TPk>();
                    }
                }

                KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);

                KnightsTour.CoreLibrary.IActionResponse response = repository.Insert(entities, 500);
                Assert.IsTrue(response.IsValid);

                // DO NOT COMMIT TRANSACTION.
            }

            // Block size less than the number of entities.
            using (var transaction = new TransactionScope())
            {
                List<T> entities = CreateEntities<T>(BulkTestQuantity);

                Assert.IsNotNull(entities);
                Assert.IsTrue(entities.Count == BulkTestQuantity);
                foreach (T entity in entities)
                {
                    Assert.IsTrue(entity.IsNew);

                    // If a manual configuration is found, then set a value for the primary key now.
                    if (entity.PKInsertConfiguration == InsertPKRule.Manual)
                    {
                        entity.Id = GetRandomValue<TPk>();
                    }
                }

                KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);

                KnightsTour.CoreLibrary.IActionResponse response = repository.Insert(entities, BulkTestQuantity - 1);
                Assert.IsTrue(response.IsValid);

                // DO NOT COMMIT TRANSACTION.
            }
        }
        protected void EntityRepository_Update_Single<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            using (var transaction = new TransactionScope())
            {
                #region Create and insert a new entity
                T entity = InsertEntity<T, TLite>();
                KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);
                #endregion

                #region Now let's update that newly created entity
                if (GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.HasStringField))
                {
                    string stringField = GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.StringField);// DO NOT COMMIT TRANSACTION.
                    string currentValue = KnightsTour.CoreLibrary.ReflectionAssistant.GetValue<T, string>(entity, stringField);
                    string newValue = (currentValue.Length > 0 ? currentValue.Substring(0, currentValue.Length - 2) : currentValue) + "x"; //Modify but don't change the overall length
                    KnightsTour.CoreLibrary.ReflectionAssistant.SetValue<T>(entity, stringField, newValue);
                    KnightsTour.CoreLibrary.IActionResponse updateResponse = repository.Update(entity);
                    Assert.IsTrue(updateResponse.IsValid);
                }
                else if (GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.HasIntField))
                {
                    string intField = GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.IntField);
                    int currentValue = KnightsTour.CoreLibrary.ReflectionAssistant.GetValue<T, int>(entity, intField);
                    int newValue = currentValue + 1;
                    KnightsTour.CoreLibrary.ReflectionAssistant.SetValue<T>(entity, intField, newValue);
                    KnightsTour.CoreLibrary.IActionResponse updateResponse = repository.Update(entity);
                    Assert.IsTrue(updateResponse.IsValid);
                }
                else
                {
                    Assert.Inconclusive("No properties available for update.");
                }
                #endregion

                // DO NOT COMMIT TRANSACTION.
            }
        }
        protected void EntityRepository_Update_Multiple<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            using (var transaction = new TransactionScope())
            {
                KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);
                string pk = new T().PrimaryKeyField;

                if (GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount) > 0)
                {
                    List<T> entities = repository.GetAll(new KnightsTour.CoreLibrary.RetrievalCondition
                    {
                        SQLOrderBy = StorageProvider.GetColumnSQL(pk),
                        Skip = 0,
                        Take = BulkTestQuantity
                    }).ToList();

                    Assert.IsTrue(entities.Count > 0);

                    // Modify each entity.
                    bool modified = false;
                    foreach (T entity in entities)
                    {
                        if (GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.HasStringField))
                        {
                            string stringField = GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.StringField);
                            string currentValue = KnightsTour.CoreLibrary.ReflectionAssistant.GetValue<T, string>(entity, stringField);
                            string newValue = (currentValue.Length > 0 ? currentValue.Substring(0, currentValue.Length - 2) : currentValue) + "x"; //Modify but don't change the overall length
                            KnightsTour.CoreLibrary.ReflectionAssistant.SetValue<T>(entity, stringField, newValue);
                            modified = true;
                        }
                        else if (GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.HasIntField))
                        {
                            string intField = GetEntityProperty<T, TLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.IntField);
                            int currentValue = KnightsTour.CoreLibrary.ReflectionAssistant.GetValue<T, int>(entity, intField);
                            int newValue = currentValue + 1;
                            KnightsTour.CoreLibrary.ReflectionAssistant.SetValue<T>(entity, intField, newValue);
                            modified = true;
                        }
                    }
                    if (modified)
                    {
                        KnightsTour.CoreLibrary.IActionResponse updateResponse = repository.Update(entities);
                        Assert.IsTrue(updateResponse.IsValid);
                    }
                    else
                    {
                        Assert.Inconclusive("No properties available for update.");
                    }
                }

                // DO NOT COMMIT TRANSACTION.
            }
        }
        protected void EntityRepository_Delete_ById<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            using (var transaction = new TransactionScope())
            {
                #region Create and insert a new entity
                T entity = InsertEntity<T, TLite>();
                KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);
                #endregion

                #region Now let's delete that newly cretaed entity by it's id
                KnightsTour.CoreLibrary.IActionResponse deleteResponse = repository.Delete(entity.Id);
                Assert.IsTrue(deleteResponse.IsValid);
                #endregion
            }
        }
        protected void EntityRepository_Delete_ByIds<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            using (var transaction = new TransactionScope())
            {
                #region Create and insert some new entities
                List<TPk> newIds = new List<TPk>();
                for (int i = 0; i < BulkTestQuantity; i++)
                {
                    T entity = InsertEntity<T, TLite>();
                    newIds.Add(entity.Id);
                }
                Assert.IsTrue(newIds.Count == BulkTestQuantity);
                #endregion

                #region Now let's delete that newly cretaed entity by it's id
                KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);
                KnightsTour.CoreLibrary.IActionResponse deleteResponse = repository.Delete(newIds);
                Assert.IsTrue(deleteResponse.IsValid);
                #endregion
            }
        }
        protected void EntityRepository_Delete_ByEntity<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            using (var transaction = new TransactionScope())
            {
                #region Create and insert a new entity
                T entity = InsertEntity<T, TLite>();
                KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);
                #endregion

                #region Now let's delete that newly cretaed entity by it's id
                KnightsTour.CoreLibrary.IActionResponse deleteResponse = repository.Delete(entity);
                Assert.IsTrue(deleteResponse.IsValid);
                #endregion
            }
        }
        protected void EntityRepository_Delete_ByEntities<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {
            using (var transaction = new TransactionScope())
            {
                #region Create and insert some new entities
                List<T> newEntities = new List<T>();
                for (int i = 0; i < BulkTestQuantity; i++)
                {
                    T entity = InsertEntity<T, TLite>();
                    newEntities.Add(entity);
                }
                Assert.IsTrue(newEntities.Count == BulkTestQuantity);
                #endregion

                #region Now let's delete that newly cretaed entity by it's id
                KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);
                KnightsTour.CoreLibrary.IActionResponse deleteResponse = repository.Delete(newEntities);
                Assert.IsTrue(deleteResponse.IsValid);
                #endregion
            }
        }

        #endregion Protected Generic Repository related test methods.

        #region Protected Generic Logic related test methods.
        protected void EntityLogic_HasStorageHandler<T, TLite>() where T : KnightsTour.CoreLibrary.IEntity<TPk>, new() where TLite : KnightsTour.CoreLibrary.IEntityLite<TPk>
        {

            KnightsTour.CoreLibrary.IRepository<T, TLite, TPk> repository = StorageProvider.GetRepository<T, TLite, TPk>(UserName);
            KnightsTour.CoreLibrary.IStorageHandler handler = repository.StorageHandler;
            Assert.IsNotNull(handler);
        }

        /// <summary>
        /// Determines if the exception is related to a key constraint, executed recursively.
        /// </summary>
        /// <param name="exception"></param>
        /// <returns></returns>
        protected bool IsKeyConstraintException(Exception exception)
        {
            if (exception == null)
                return false;
            else if (exception.Message.Contains("KEY constraint") || exception.Message.Contains("Invalid object name") || exception.Message.Contains("CHECK constraint"))
                return true;
            else if (exception.InnerException != null)
                return IsKeyConstraintException(exception.InnerException);
            else
                return false;
        }
        #endregion Protected Generic Logic related test methods.

        #region Other static helper property methods.
                public static DataTable CreateDataTable<T>(IEnumerable<T> list)
        {
            Type type = typeof(T);
            var properties = type.GetProperties();

            DataTable dataTable = new DataTable();
            foreach (PropertyInfo info in properties)
            {
                dataTable.Columns.Add(new DataColumn(info.Name, Nullable.GetUnderlyingType(info.PropertyType) ?? info.PropertyType));
            }

            foreach (T entity in list)
            {
                object[] values = new object[properties.Length];
                for (int i = 0; i < properties.Length; i++)
                {
                    values[i] = properties[i].GetValue(entity);
                }

                dataTable.Rows.Add(values);
            }

            return dataTable;
        }

        #endregion Other static helper property methods.

        #region Support Classes methods.
            public class TestTable1 : KnightsTour.CoreLibrary.EntityBase<int?>, KnightsTour.CoreLibrary.IEntity<int?>
    {
        public TestTable1()
        {
            EntityName = "TestTable1";
            PKInsertConfiguration = InsertPKRule.AutoIncrement;
            PrimaryKeyField = "TestTable1Id";
        }
        public string PKDefaultValue { get { return ""; } }
        public int? TestTable1Id { get; set; }
        public string TableName { get { return EntityName; } }
        public string TableSchema { get { return "dbo"; } }
        public string Name { get; set; }
        public int? TestTable2Id { get; set; }
        public DateTime CreateDate { get; set; }
        public string SQLInsertBulkHeader => throw new NotImplementedException();
        public string SQLInsertBulkRow => throw new NotImplementedException();
        public IStorageStatement SQLInsertStatement
        {
            get
            {
                    string sql = "";
                    List<KnightsTour.CoreLibrary.IParameter> parms = new List<KnightsTour.CoreLibrary.IParameter> {
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}name", Name),
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}fk", TestTable2Id)
                    };
                    if (PKInsertConfiguration == InsertPKRule.AutoIncrement)
                    {
                        sql = $"INSERT INTO {StorageProvider.GetTableSQL("TestTable1", "dbo")} ({StorageProvider.GetColumnSQL("Name")}, {StorageProvider.GetColumnSQL("TestTable2Id")}) VALUES ({StorageProvider.GetParameterPrefix()}name, {StorageProvider.GetParameterPrefix()}fk)";
                    }
                    else if(PKInsertConfiguration == InsertPKRule.Sequence)
                    {
                        sql = $"INSERT INTO {StorageProvider.GetTableSQL("TestTable1", "dbo")} ({StorageProvider.GetColumnSQL("TestTable1Id")}, {StorageProvider.GetColumnSQL("Name")}, {StorageProvider.GetColumnSQL("TestTable2Id")}) VALUES ({StorageProvider.GetTableSQL(EntityMapper.GetSequenceName("TestTable1"), "dbo")}.NEXTVAL, {StorageProvider.GetParameterPrefix()}name, {StorageProvider.GetParameterPrefix()}fk)";
                    }
                    else if (PKInsertConfiguration == InsertPKRule.Manual)
                    {
                        sql = $"INSERT INTO {StorageProvider.GetTableSQL("TestTable1", "dbo")} ({StorageProvider.GetColumnSQL("TestTable1Id")}, {StorageProvider.GetColumnSQL("Name")}, {StorageProvider.GetColumnSQL("TestTable2Id")}) VALUES ({StorageProvider.GetParameterPrefix()}TestTable1Id, {StorageProvider.GetParameterPrefix()}name, {StorageProvider.GetParameterPrefix()}fk)";
                        parms.Add(new GenericParameter($"{StorageProvider.GetParameterPrefix()}TestTable1Id", Id));
                    }

                    return new KnightsTour.CoreLibrary.StorageStatement
                    {
                        Statement = sql,
                        Parameters = parms
                    };
            }
        }
        public string InstanceLabel { get { return PKDefaultValue; } }
        public IStorageStatement SQLUpdateStatement => throw new NotImplementedException();
        public bool IsNew => throw new NotImplementedException();
        public bool IsModified() { throw new NotImplementedException(); }
        public string SerializeDifferential() { throw new NotImplementedException(); }
        public string SerializeObject() { throw new NotImplementedException(); }
        public void SetOriginalProperties() { throw new NotImplementedException(); }
        public void SetPrimaryKey(int? id) { TestTable1Id = id; }
        public dynamic ToDynamic(DynamicObjectStrategy strategy = DynamicObjectStrategy.AllProperties) { throw new NotImplementedException(); }
        public string GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType type)
        {
            string storedProcedureName = string.Empty;

            // The Stored procedure prefix (as defined on the model) is optional, deal with that first.
            if (!string.IsNullOrEmpty(Schema.Model.StoredProcedurePrefix))
            {
                storedProcedureName += $"{Schema.Model.StoredProcedurePrefix}_";
            }

            // Model prefix (optional), Entity name then finally the type.
            return $"{storedProcedureName}{EntityName}_{type}";
        }
    }
    public class TestTable2 : KnightsTour.CoreLibrary.EntityBase<int?>, KnightsTour.CoreLibrary.IEntity<int?>
    {
        public TestTable2()
        {
            EntityName = "TestTable2";
            PKInsertConfiguration = InsertPKRule.AutoIncrement;
            PrimaryKeyField = "TestTable2Id";
        }
        public string PKDefaultValue { get { return ""; } }
        public int? TestTable2Id { get; set; }
        public string Name { get; set; }
        public string TableName { get { return EntityName; } }
        public string TableSchema { get { return "dbo"; } }
        public DateTime CreateDate { get; set; }
        public string SQLInsertBulkHeader => throw new NotImplementedException();
        public string SQLInsertBulkRow => throw new NotImplementedException();
        public IStorageStatement SQLInsertStatement
        {
            get
            {
                return new KnightsTour.CoreLibrary.StorageStatement
                {
                    Statement = $"INSERT INTO {StorageProvider.GetTableSQL("TestTable2", "dbo")} ({StorageProvider.GetColumnSQL("Name")}) VALUES ({StorageProvider.GetParameterPrefix()}name)",
                    Parameters = new List<KnightsTour.CoreLibrary.IParameter> {
                        new KnightsTour.CoreLibrary.GenericParameter($"{StorageProvider.GetParameterPrefix()}name", Name)
                    }
                };
            }
        }
        public string InstanceLabel { get { return PKDefaultValue; } }
        public IStorageStatement SQLUpdateStatement => throw new NotImplementedException();
        public bool IsNew => throw new NotImplementedException();
        public bool IsModified() { throw new NotImplementedException(); }
        public string SerializeDifferential() { throw new NotImplementedException(); }
        public string SerializeObject() { throw new NotImplementedException(); }
        public void SetOriginalProperties() { throw new NotImplementedException(); }
        public void SetPrimaryKey(int? id) { TestTable2Id = id; }
        public dynamic ToDynamic(DynamicObjectStrategy strategy = DynamicObjectStrategy.AllProperties) { throw new NotImplementedException(); }
        public string GetStoredProcedureName(KnightsTour.CoreLibrary.Enumerations.StoredProcedureType type)
        {
            string storedProcedureName = string.Empty;

            // The Stored procedure prefix (as defined on the model) is optional, deal with that first.
            if (!string.IsNullOrEmpty(Schema.Model.StoredProcedurePrefix))
            {
                storedProcedureName += $"{Schema.Model.StoredProcedurePrefix}_";
            }

            // Model prefix (optional), Entity name then finally the type.
            return $"{storedProcedureName}{EntityName}_{type}";
        }
    }
    #endregion Support Classes methods.

        #endregion Static code methods.

    } // Class
} // Namespace
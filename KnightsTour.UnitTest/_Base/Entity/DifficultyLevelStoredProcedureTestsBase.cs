// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : March 19, 2023 7:56:06 AM
// File             : DifficultyLevelStoredProcedureTestsBase.cs
// ************************************************************************

using System;
using System.Collections.Generic;
using System.Linq;
using System.Transactions;

using KnightsTour;
using KnightsTour.CoreLibrary;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace KnightsTourUnitTests.StoredProcedure
{
    /// <summary>
    /// Tests against the DifficultyLevel entity stored procedures.  Inherits <seealso cref="BaseDataTest" />
    /// Generated On: March 19, 2023 at 7:56:06 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// </remarks>
    [TestClass]
    public class DifficultyLevelStoredProcedureTestsBase : DataTestBase<int?>
    {
        #region Declarations
        static SQLServerStorageHandler storageHandler = null; // A universal storage handler to support these stored procedure tests.
        #endregion Declarations

        #region Properties

        /// <summary>
        /// A universal storage handler to support these stored procedure tests.
        /// </summary>
        /// <value>
        /// The storage handler.
        /// </value>
        static SQLServerStorageHandler StorageHandler
        {
            get
            {
                if (storageHandler == null)
                {
                    storageHandler = (SQLServerStorageHandler)StorageProvider.GetHandler();
                }
                return storageHandler;
            }
        }
        #endregion Properties

        #region DifficultyLevel stored procedure tests Methods

        /// <summary>
        /// Description for Difficulty Level_ Stored Procedure_ Create.
        /// </summary>
        [TestMethod]
        public void DifficultyLevel_StoredProcedure_Create()
        {
            // Verify that the stored procedure exists.
            if (Enum.IsDefined(typeof(KnightsTour.Enumerations.StoredProcedure), "DifficultyLevelInsert"))
            {
                using (var transactionScope = new TransactionScope())
                {
                    // This creates a new, fully populated yet randomized entity.
                    KnightsTour.DifficultyLevel difficultyLevel = GetNewEntity<KnightsTour.DifficultyLevel>();

                    StorageStatement statement = new StorageStatement()
                    {
                        CommandType = System.Data.CommandType.StoredProcedure,
                        // In production, the StoredProcedureTransformation should be referenced by the StoredProcedure enumeration list, for example:.
                        // Statement = EntityMapper.StoredProcedureTransformation[KnightsTour.Enumerations.StoredProcedure.DifficultyLevelInsert.ToString()];
                        Statement = EntityMapper.StoredProcedureTransformation["DifficultyLevelInsert"],
                        Parameters = new List<IParameter>
                        {
                            new KnightsTour.CoreLibrary.GenericParameter("@Name", difficultyLevel.GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.Name)),
                            new KnightsTour.CoreLibrary.GenericParameter("@Description", difficultyLevel.GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.Description)),
                            new KnightsTour.CoreLibrary.GenericParameter("@MaximumGap", difficultyLevel.GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.MaximumGap)),
                            new KnightsTour.CoreLibrary.GenericParameter("@PercentVisibility", difficultyLevel.GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.PercentVisibility)),
                        }
                    };

                    try
                    {
                        int? pkValueReturned = StorageHandler.GetValue<int?>(statement);
                        Assert.IsNotNull(pkValueReturned);
                    }
                    catch (Exception exception)
                    {
                        if (IsKeyConstraintException(exception))
                        {
                            Assert.Inconclusive("Data constraint violated or invalid trigger code detected.");
                        }

                        Assert.Fail(exception.Message);
                    }
                } // Transaction scope.
            } // Enum defined.
            else
            {
                Assert.Inconclusive("The stored procedure 'DifficultyLevelInsert' could not be verified to exist.");
            }
        }

        /// <summary>
        /// Description for Difficulty Level_ Stored Procedure_ Update.
        /// </summary>
        [TestMethod]
        public void DifficultyLevel_StoredProcedure_Update()
        {
            // Verify that the stored procedure exists.
            if (Enum.IsDefined(typeof(KnightsTour.Enumerations.StoredProcedure), "DifficultyLevelUpdate"))
            {
                using (var transactionScope = new TransactionScope())
                {
                    #region Data validation
                    long totalRecords = GetEntityProperty<KnightsTour.DifficultyLevel, KnightsTour.DifficultyLevelLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount);
                    int? idToSelect = null;

                    // This creates a new, fully populated yet randomized entity.
                    KnightsTour.DifficultyLevel difficultyLevel = GetNewEntity<KnightsTour.DifficultyLevel>();

                    // Insert a new record if required to validate this test.
                    if (totalRecords == 0)
                    {
                        try
                        {
                            IActionResponse insertResponse = new DifficultyLevelLogic("Unit test").Insert(difficultyLevel);

                            if (!insertResponse.IsValid)
                            {
                                Assert.Fail(insertResponse.Messages.Where(m => m.Type == KnightsTour.CoreLibrary.Enumerations.MessageType.Negative).First().Content);
                            }
                        }
                        catch (Exception exception)
                        {
                            if (IsKeyConstraintException(exception))
                            {
                                Assert.Inconclusive("Unit test passed, unique data constraints check kicked in and verified");
                            }

                            Assert.Fail(exception.Message);
                        }
                    }
                    else
                    {
                        idToSelect = GetEntityProperty<KnightsTour.DifficultyLevel, KnightsTour.DifficultyLevelLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.FirstId);
                        difficultyLevel = new DifficultyLevelLogic("Unit test").GetById(idToSelect);
                    }
                    #endregion

                    #region Dynamically update the newly created difficultyLevel
                    if (GetEntityProperty<KnightsTour.DifficultyLevel, KnightsTour.DifficultyLevelLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.HasStringField))
                    {
                        string stringField = GetEntityProperty<KnightsTour.DifficultyLevel, KnightsTour.DifficultyLevelLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.StringField);
                        string currentValue = KnightsTour.CoreLibrary.ReflectionAssistant.GetValue<KnightsTour.DifficultyLevel, string>(difficultyLevel, stringField);
                        string newValue = "modified";
                        if (!string.IsNullOrEmpty(currentValue))
                        {
                            newValue = currentValue + " modified.";
                            if (currentValue.StartsWith("a"))
                            {
                                newValue = currentValue.Replace("a", "z");
                            }
                        }
                        KnightsTour.CoreLibrary.ReflectionAssistant.SetValue<KnightsTour.DifficultyLevel>(difficultyLevel, stringField, newValue);
                    }
                    else if (GetEntityProperty<KnightsTour.DifficultyLevel, KnightsTour.DifficultyLevelLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.HasIntField))
                    {
                        string intField = GetEntityProperty<KnightsTour.DifficultyLevel, KnightsTour.DifficultyLevelLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.IntField);
                        int currentValue = KnightsTour.CoreLibrary.ReflectionAssistant.GetValue<KnightsTour.DifficultyLevel, int>(difficultyLevel, intField);
                        int newValue = currentValue + 1;
                        KnightsTour.CoreLibrary.ReflectionAssistant.SetValue<KnightsTour.DifficultyLevel>(difficultyLevel, intField, newValue);
                    }
                    #endregion

                    // Update the object using the stored procedure.
                    StorageStatement statement = new StorageStatement()
                    {
                        CommandType = System.Data.CommandType.StoredProcedure,
                        // In production, the StoredProcedureTransformation should be referenced by the StoredProcedure enumeration list, for example:.
                        // Statement = EntityMapper.StoredProcedureTransformation[KnightsTour.Enumerations.StoredProcedure.DifficultyLevelUpdate.ToString()];
                        Statement = EntityMapper.StoredProcedureTransformation["DifficultyLevelUpdate"],
                        Parameters = new List<IParameter>
                        {
                            new KnightsTour.CoreLibrary.GenericParameter("@DifficultyLevelId", difficultyLevel.GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.DifficultyLevelId)),
                            new KnightsTour.CoreLibrary.GenericParameter("@Name", difficultyLevel.GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.Name)),
                            new KnightsTour.CoreLibrary.GenericParameter("@Description", difficultyLevel.GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.Description)),
                            new KnightsTour.CoreLibrary.GenericParameter("@MaximumGap", difficultyLevel.GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.MaximumGap)),
                            new KnightsTour.CoreLibrary.GenericParameter("@PercentVisibility", difficultyLevel.GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.PercentVisibility)),
                            new KnightsTour.CoreLibrary.GenericParameter("@HighlightClosestEnabled", difficultyLevel.GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.HighlightClosestEnabled)),
                            new KnightsTour.CoreLibrary.GenericParameter("@DuplicateCheckingEnabled", difficultyLevel.GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.DuplicateCheckingEnabled)),
                            new KnightsTour.CoreLibrary.GenericParameter("@GuessFilterEnabled", difficultyLevel.GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.GuessFilterEnabled)),
                            new KnightsTour.CoreLibrary.GenericParameter("@BadLinkEnabled", difficultyLevel.GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.BadLinkEnabled)),
                            new KnightsTour.CoreLibrary.GenericParameter("@MaximumDimension", difficultyLevel.GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.MaximumDimension)),
                            new KnightsTour.CoreLibrary.GenericParameter("@MinimumDimension", difficultyLevel.GetDBValue(KnightsTour.Enumerations.DifficultyLevelProperty.MinimumDimension)),
                        }
                    };

                    try
                    {
                        int recordsUpdated = StorageHandler.Execute(statement);

                        // Validate the record was in fact updated.
                        Assert.AreEqual(recordsUpdated, 1);
                    }
                    catch (Exception exception)
                    {
                        if (IsKeyConstraintException(exception))
                        {
                            Assert.Inconclusive("Data constraint violated or invalid trigger code detected.");
                        }

                        Assert.Fail(exception.Message);
                    }
                } // Transaction scope.
            } // Enum defined.
            else
            {
                Assert.Inconclusive("The stored procedure 'DifficultyLevelUpdate' could not be verified to exist.");
            }
        }

        /// <summary>
        /// Description for Difficulty Level_ Stored Procedure_ Get By Id.
        /// </summary>
        [TestMethod]
        public void DifficultyLevel_StoredProcedure_GetById()
        {
            // Verify that the stored procedure exists.
            if (Enum.IsDefined(typeof(KnightsTour.Enumerations.StoredProcedure), "DifficultyLevelGetById"))
            {
                using (var transactionScope = new TransactionScope())
                {
                    #region Data validation
                    long totalRecords = GetEntityProperty<KnightsTour.DifficultyLevel, KnightsTour.DifficultyLevelLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount);
                    int? idToSelect = null;

                    // Insert a new record if required to validate this test.
                    if (totalRecords == 0)
                    {
                        // This creates a new, fully populated yet randomized entity.
                        KnightsTour.DifficultyLevel difficultyLevel = GetNewEntity<KnightsTour.DifficultyLevel>();

                        try
                        {
                            IActionResponse insertResponse = new DifficultyLevelLogic("Unit test").Insert(difficultyLevel);

                            if (!insertResponse.IsValid)
                            {
                                Assert.Fail(insertResponse.Messages.Where(m => m.Type == KnightsTour.CoreLibrary.Enumerations.MessageType.Negative).First().Content);
                            }
                            else
                            {
                                totalRecords = 1;
                                idToSelect = difficultyLevel.DifficultyLevelId;
                            }
                        }
                        catch (Exception exception)
                        {
                            if (IsKeyConstraintException(exception))
                            {
                                Assert.Inconclusive("Data constraint violated or invalid trigger code detected.");
                            }

                            Assert.Fail(exception.Message);
                        }
                    }
                    else
                    {
                        idToSelect = GetEntityProperty<KnightsTour.DifficultyLevel, KnightsTour.DifficultyLevelLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.FirstId);
                    }
                    #endregion

                    StorageStatement statement = new StorageStatement()
                    {
                        CommandType = System.Data.CommandType.StoredProcedure,
                        // In production, the StoredProcedureTransformation should be referenced by the StoredProcedure enumeration list, for example:.
                        // Statement = EntityMapper.StoredProcedureTransformation[KnightsTour.Enumerations.StoredProcedure.DifficultyLevelGetById.ToString()];
                        Statement = EntityMapper.StoredProcedureTransformation["DifficultyLevelGetById"],
                        Parameter = new KnightsTour.CoreLibrary.GenericParameter("@DifficultyLevelId", idToSelect),
                    };

                    KnightsTour.DifficultyLevel record = new KnightsTour.DifficultyLevel(StorageHandler.GetRecord(statement));

                    // Validate the record pk returned matches the expected identifier.
                    Assert.AreEqual(record.DifficultyLevelId, idToSelect);
                }
            }
            else
            {
                Assert.Inconclusive("The stored procedure 'DifficultyLevelGetById' could not be verified to exist.");
            }
        }

        /// <summary>
        /// Description for Difficulty Level_ Stored Procedure_ Get All.
        /// </summary>
        [TestMethod]
        public void DifficultyLevel_StoredProcedure_GetAll()
        {
            // Verify that the stored procedure exists.
            if (Enum.IsDefined(typeof(KnightsTour.Enumerations.StoredProcedure), "DifficultyLevelGetAll"))
            {
                using (var transactionScope = new TransactionScope())
                {
                    #region Data validation
                    long totalRecords = GetEntityProperty<KnightsTour.DifficultyLevel, KnightsTour.DifficultyLevelLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount);

                    // Insert a new record if required to validate this test.
                    if (totalRecords == 0)
                    {
                        // This creates a new, fully populated yet randomized entity.
                        KnightsTour.DifficultyLevel difficultyLevel = GetNewEntity<KnightsTour.DifficultyLevel>();

                        try
                        {
                            IActionResponse insertResponse = new DifficultyLevelLogic("Unit test").Insert(difficultyLevel);

                            if (!insertResponse.IsValid)
                            {
                                Assert.Fail(insertResponse.Messages.Where(m => m.Type == KnightsTour.CoreLibrary.Enumerations.MessageType.Negative).First().Content);
                            }
                            else
                            {
                                totalRecords = 1;
                            }
                        }
                        catch (Exception exception)
                        {
                            if (IsKeyConstraintException(exception))
                            {
                                Assert.Inconclusive("Data constraint violated or invalid trigger code detected.");
                            }

                            Assert.Fail(exception.Message);
                        }
                    }
                    #endregion

                    StorageStatement statement = new StorageStatement()
                    {
                        CommandType = System.Data.CommandType.StoredProcedure,
                        // In production, the StoredProcedureTransformation should be referenced by the StoredProcedure enumeration list, for example:.
                        // Statement = EntityMapper.StoredProcedureTransformation[KnightsTour.Enumerations.StoredProcedure.DifficultyLevelGetAll.ToString()];
                        Statement = EntityMapper.StoredProcedureTransformation["DifficultyLevelGetAll"],
                    };

                    List<KnightsTour.DifficultyLevel> records = new List<KnightsTour.DifficultyLevel>();
                    foreach (dynamic dataRow in StorageHandler.GetRecords(statement))
                    {
                        records.Add(new KnightsTour.DifficultyLevel(dataRow));
                    }

                    // Validate the total number of records returned match the total number of rows known to exist.
                    Assert.AreEqual(totalRecords, records.Count);
                }
            }
            else
            {
                Assert.Inconclusive("The stored procedure 'DifficultyLevelGetAll' could not be verified to exist.");
            }
        }

        /// <summary>
        /// Description for Difficulty Level_ Stored Procedure_ Delete.
        /// </summary>
        [TestMethod]
        public void DifficultyLevel_StoredProcedure_Delete()
        {
            // Verify that the stored procedure exists.
            if (Enum.IsDefined(typeof(KnightsTour.Enumerations.StoredProcedure), "DifficultyLevelDelete"))
            {
                using (var transactionScope = new TransactionScope())
                {
                    #region Data validation
                    long totalRecords = GetEntityProperty<KnightsTour.DifficultyLevel, KnightsTour.DifficultyLevelLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount);
                    int? idToDelete = null;

                    // Insert a new record if required to validate this test.
                    if (totalRecords == 0)
                    {
                        // This creates a new, fully populated yet randomized entity.
                        KnightsTour.DifficultyLevel difficultyLevel = GetNewEntity<KnightsTour.DifficultyLevel>();

                        try
                        {
                            IActionResponse insertResponse = new DifficultyLevelLogic("Unit test").Insert(difficultyLevel);

                            if (!insertResponse.IsValid)
                            {
                                Assert.Fail(insertResponse.Messages.Where(m => m.Type == KnightsTour.CoreLibrary.Enumerations.MessageType.Negative).First().Content);
                            }
                            else
                            {
                                totalRecords = 1;
                                idToDelete = difficultyLevel.DifficultyLevelId;
                            }
                        }
                        catch (Exception exception)
                        {
                            if (IsKeyConstraintException(exception))
                            {
                                Assert.Inconclusive("Unit test passed, unique data constraints check kicked in and verified");
                            }

                            Assert.Fail(exception.Message);
                        }
                    }
                    else
                    {
                        idToDelete = GetEntityProperty<KnightsTour.DifficultyLevel, KnightsTour.DifficultyLevelLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.FirstId);
                    }
                    #endregion

                    StorageStatement statement = new StorageStatement()
                    {
                        CommandType = System.Data.CommandType.StoredProcedure,
                        // In production, the StoredProcedureTransformation should be referenced by the StoredProcedure enumeration list, for example:.
                        // Statement = EntityMapper.StoredProcedureTransformation[KnightsTour.Enumerations.StoredProcedure.DifficultyLevelDelete.ToString()];
                        Statement = EntityMapper.StoredProcedureTransformation["DifficultyLevelDelete"],
                        Parameter = new KnightsTour.CoreLibrary.GenericParameter("@DifficultyLevelId", idToDelete),
                    };

                    try
                    {
                        int recordsDeleted = StorageHandler.Execute(statement);

                        // Validate the record was in fact deleted.
                        Assert.AreEqual(recordsDeleted, 1);
                    }
                    catch (Exception exception)
                    {
                        if (IsKeyConstraintException(exception))
                        {
                            Assert.Inconclusive("Data constraint violated or invalid trigger code detected.");
                        }
                    }
                }
            }
            else
            {
                Assert.Inconclusive("The stored procedure 'DifficultyLevelDelete' could not be verified to exist.");
            }
        }
        #endregion DifficultyLevel stored procedure tests Methods

    } // Class
} // Namespace
// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : March 19, 2023 7:56:06 AM
// File             : PuzzleLogicTestsBase.cs
// ************************************************************************

using System;
using System.Collections.Generic;
using System.Linq;
using System.Transactions;

using KnightsTour;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace KnightsTourUnitTests.Entity
{
    /// <summary>
    /// Tests against the PuzzleLogic support class.  Inherits <seealso cref="BaseDataTest" />
    /// Generated On: March 19, 2023 at 7:56:06 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <remarks>
    /// This class will be regenerated when requested to stay in sync with your model.
    /// </remarks>
    [TestClass]
    public class PuzzleLogicTestsBase : DataTestBase<int?>
    {
        #region Puzzle logic tests Methods

        /// <summary>
        /// Description for Puzzle Logic_ Has Repository.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_HasRepository()
        {
            KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);
            KnightsTour.CoreLibrary.IRepository<KnightsTour.Puzzle, KnightsTour.PuzzleLite, int?> repository = logic.Repository;
            Assert.IsNotNull(repository);
        }

        /// <summary>
        /// Description for Puzzle Logic_ Has Storage Handler.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_HasStorageHandler()
        {
            KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);
            KnightsTour.CoreLibrary.IStorageHandler handler = logic.StorageHandler;
            Assert.IsNotNull(handler);
        }

        /// <summary>
        /// Description for Puzzle Logic_ Get By Id.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_GetById()
        {
            EntityRepository_GetById<KnightsTour.Puzzle, KnightsTour.PuzzleLite>();
        }

        /// <summary>
        /// Description for Puzzle Logic_ Get By Ids.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_GetByIds()
        {
            KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);
            if (GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount) > 1)
            {
                int? firstId = GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.FirstId);
                int? lastId = GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.LastId);
                List<int?> ids = new List<int?>() { firstId, lastId };

                List<KnightsTour.Puzzle> puzzles = logic.GetByIds(ids).ToList();
                Assert.IsNotNull(puzzles);
                Assert.AreEqual(puzzles.Count, 2);
                puzzles = puzzles.OrderBy(x => x.Id).ToList();
                Assert.AreEqual(puzzles[0].Id, firstId);
                Assert.AreEqual(puzzles[1].Id, lastId);
            }
        }

        /// <summary>
        /// Description for Puzzle Logic_ Get All.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_GetAll()
        {
            KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);
            long totalRecords = GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount);
            if (totalRecords > 0)
            {
                List<KnightsTour.Puzzle> puzzles = logic.GetAll().ToList();
                Assert.IsTrue(puzzles.Count > 0);
                Assert.IsTrue(puzzles.Count >= totalRecords);
            }
        }

        /// <summary>
        /// Description for Puzzle Logic_ Get All_ By Condition.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_GetAll_ByCondition()
        {
            KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);
            string pk = new KnightsTour.Puzzle().PrimaryKeyField;

            long totalRecords = GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount);
            if (totalRecords > 1)
            {
                int? maxId = GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.LastId);
                List<KnightsTour.Puzzle> puzzles = logic.GetAll(new KnightsTour.CoreLibrary.RetrievalCondition { SQLWhere = $"{StorageProvider.GetColumnSQL(pk)} < {maxId}" }).ToList();
                Assert.IsTrue(puzzles.Count > 0);
                Assert.IsTrue(puzzles.Count < totalRecords);
            }
        }

        /// <summary>
        /// Description for Puzzle Logic_ Get All_ By Predicate.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_GetAll_ByPredicate()
        {
            long totalRecords = GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount);
            if (totalRecords > 0)
            {
                KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);
                int? maxId = GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.LastId);
                EntityRepository_GetAll_ByPredicate<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(a => a.PuzzleId < maxId);

                if (totalRecords > 1)
                {
                    List<KnightsTour.Puzzle> puzzles = logic.GetAll(a => a.PuzzleId < maxId).ToList();
                    Assert.IsTrue(puzzles.Count > 0);
                    Assert.IsTrue(puzzles.Count < totalRecords);
                }
            }
        }

        /// <summary>
        /// Description for Puzzle Logic_ Get All_ By F K.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_GetAll_ByFK()
        {
            KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);
            foreach (string property in EntityMapper.FKNames(new KnightsTour.Puzzle().EntityName))
            {
                // Get some valid FK Values.
                foreach (int? fkValue in StorageProvider.GetFKValues<KnightsTour.Puzzle, KnightsTour.PuzzleLite, int?>(property))
                {
                    List<KnightsTour.Puzzle> puzzles = logic.GetByFK(property, fkValue, new KnightsTour.CoreLibrary.RetrievalCondition { SQLOrderBy = property, Skip = 0, Take = MaxFKQuantity }).ToList();
                    Assert.IsTrue(puzzles.Count > 0);
                    Assert.IsTrue(puzzles.Count <= MaxFKQuantity);
                }
            }
        }

        /// <summary>
        /// Description for Puzzle Logic_ Get All_ By F Ks.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_GetAll_ByFKs()
        {
            if(StorageProvider.GetEntityAttribute<KnightsTour.Puzzle, KnightsTour.PuzzleLite, int?>().RecordCount == 0)
            {
                Assert.Inconclusive("Unable to insert an entity of type 'puzzle' due to lack of data.");
            }

            KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);
            foreach (string property in EntityMapper.FKNames(new KnightsTour.Puzzle().EntityName))
            {
                // Get some valid FK Values.
                List<KnightsTour.Puzzle> puzzles = logic.GetByFKs(property, KnightsTour.StorageProvider.GetFKValues<KnightsTour.Puzzle, KnightsTour.PuzzleLite, int?>(property), new KnightsTour.CoreLibrary.RetrievalCondition { SQLOrderBy = property, Skip = 0, Take = MaxFKQuantity }).ToList();
                Assert.IsTrue(puzzles.Count > 0);
                Assert.IsTrue(puzzles.Count <= MaxFKQuantity);
            }
        }

        /// <summary>
        /// Description for Puzzle Logic_ Insert_ Single.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_Insert_Single()
        {
            using (var transactionScope = new TransactionScope())
            {
                KnightsTour.Puzzle puzzle = InsertEntity<KnightsTour.Puzzle, KnightsTour.PuzzleLite>();
            }
        }

        /// <summary>
        /// Description for Puzzle Logic_ Insert_ Multiple.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_Insert_Multiple()
        {
            // Block size larger than the number of accounts.
            using (var transactionScope = new TransactionScope())
            {
                KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);

                List<KnightsTour.Puzzle> puzzles = CreateEntities<KnightsTour.Puzzle>(BulkTestQuantity);

                Assert.IsNotNull(puzzles);
                Assert.IsTrue(puzzles.Count == BulkTestQuantity);
                foreach (KnightsTour.Puzzle puzzle in puzzles)
                {
                    Assert.IsTrue(puzzle.IsNew);
                }

                // If the primary key insertion type is manual, then configure some values now.
                if (puzzles[0].PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Manual)
                {
                    foreach (KnightsTour.Puzzle puzzle in puzzles)
                    {
                        puzzle.Id = GetRandomValue<int?>();
                    }
                }

                KnightsTour.CoreLibrary.IActionResponse response = logic.Insert(puzzles, 500);
                Assert.IsTrue(response.IsValid);

                // Block size less than the number of accounts.
                puzzles = CreateEntities<KnightsTour.Puzzle>(BulkTestQuantity);

                Assert.IsNotNull(puzzles);
                Assert.IsTrue(puzzles.Count == BulkTestQuantity);
                foreach (KnightsTour.Puzzle puzzle in puzzles)
                {
                    Assert.IsTrue(puzzle.IsNew);
                }

                // If the primary key insertion type is manual, then configure some values now.
                if (puzzles[0].PKInsertConfiguration == KnightsTour.CoreLibrary.Enumerations.InsertPKRule.Manual)
                {
                    foreach (KnightsTour.Puzzle puzzle in puzzles)
                    {
                        puzzle.Id = GetRandomValue<int?>();
                    }
                }

                response = logic.Insert(puzzles, BulkTestQuantity - 1);
                Assert.IsTrue(response.IsValid);
            }
        }

        /// <summary>
        /// Description for Puzzle Logic_ Update_ Single.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_Update_Single()
        {
            using (var transactionScope = new TransactionScope())
            {
                KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);

                #region Create and insert a new puzzle
                KnightsTour.Puzzle puzzle = InsertEntity<KnightsTour.Puzzle, KnightsTour.PuzzleLite>();
                #endregion

                #region Now let's update that newly created puzzle
                if (GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.HasStringField))
                {
                    string stringField = GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.StringField);
                    string currentValue = KnightsTour.CoreLibrary.ReflectionAssistant.GetValue<KnightsTour.Puzzle, string>(puzzle, stringField);
                    string newValue = "modified";
                    if (string.IsNullOrEmpty(currentValue))
                    {
                        newValue = currentValue + " modified.";
                        if (currentValue.StartsWith("a"))
                        {
                            newValue = currentValue.Replace("a", "z");
                        }
                    }
                    KnightsTour.CoreLibrary.ReflectionAssistant.SetValue<KnightsTour.Puzzle>(puzzle, stringField, newValue);
                    KnightsTour.CoreLibrary.IActionResponse updateResponse = logic.Update(puzzle);
                    Assert.IsTrue(updateResponse.IsValid);
                }
                else if (GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.HasIntField))
                {
                    string intField = GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.IntField);
                    int currentValue = KnightsTour.CoreLibrary.ReflectionAssistant.GetValue<KnightsTour.Puzzle, int>(puzzle, intField);
                    int newValue = currentValue + 1;
                    KnightsTour.CoreLibrary.ReflectionAssistant.SetValue<KnightsTour.Puzzle>(puzzle, intField, newValue);
                    KnightsTour.CoreLibrary.IActionResponse updateResponse = logic.Update(puzzle);
                    Assert.IsTrue(updateResponse.IsValid);
                }
                #endregion
            }
        }

        /// <summary>
        /// Description for Puzzle Logic_ Update_ Multiple.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_Update_Multiple()
        {
            using (var transactionScope = new TransactionScope())
            {
                KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);

                string pk = new KnightsTour.Puzzle().PrimaryKeyField;

                if (GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.RecordCount) > 0)
                {
                    List<KnightsTour.Puzzle> puzzles = logic.GetAll(new KnightsTour.CoreLibrary.RetrievalCondition
                    {
                        SQLOrderBy = StorageProvider.GetColumnSQL(pk),
                        Skip = 0,
                        Take = BulkTestQuantity
                    }).ToList();

                    Assert.IsTrue(puzzles.Count > 0);

                    // Modify each account.
                    bool modified = false;
                    foreach (KnightsTour.Puzzle puzzle in puzzles)
                    {
                        if (GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.HasStringField))
                        {
                            string stringField = GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.StringField);
                            string currentValue = KnightsTour.CoreLibrary.ReflectionAssistant.GetValue<KnightsTour.Puzzle, string>(puzzle, stringField);
                            string newValue = "modified";
                            if (string.IsNullOrEmpty(currentValue))
                            {
                                newValue = currentValue + " modified.";
                                if (currentValue.StartsWith("a"))
                                {
                                    newValue = currentValue.Replace("a", "z");
                                }
                            }
                            KnightsTour.CoreLibrary.ReflectionAssistant.SetValue<KnightsTour.Puzzle>(puzzle, stringField, newValue);
                            modified = true;
                        }
                        else if (GetEntityProperty<KnightsTour.Puzzle, KnightsTour.PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.HasIntField))
                        {
                            string intField = GetEntityProperty<KnightsTour.Puzzle, PuzzleLite>(KnightsTour.CoreLibrary.Enumerations.EntityProperty.IntField);
                            int currentValue = KnightsTour.CoreLibrary.ReflectionAssistant.GetValue<KnightsTour.Puzzle, int>(puzzle, intField);
                            int newValue = currentValue + 1;
                            KnightsTour.CoreLibrary.ReflectionAssistant.SetValue<KnightsTour.Puzzle>(puzzle, intField, newValue);
                            modified = true;
                        }
                    }
                    if (modified)
                    {
                        KnightsTour.CoreLibrary.IActionResponse updateResponse = logic.Update(puzzles);
                        Assert.IsTrue(updateResponse.IsValid);
                    }
                }
            }

        }

        /// <summary>
        /// Description for Puzzle Logic_ Delete By Id.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_DeleteById()
        {
            using (var transactionScope = new TransactionScope())
            {
                KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);

                #region Create and insert a new puzzle
                KnightsTour.Puzzle puzzle = InsertEntity<KnightsTour.Puzzle, KnightsTour.PuzzleLite>();
                #endregion

                #region Now let's delete that newly created puzzle by it's id
                KnightsTour.CoreLibrary.IActionResponse deleteResponse = logic.Delete(puzzle.Id.Value);
                Assert.IsTrue(deleteResponse.IsValid);
                #endregion
            }
        }

        /// <summary>
        /// Description for Puzzle Logic_ Delete By Ids.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_DeleteByIds()
        {
            using (var transactionScope = new TransactionScope())
            {
                KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);

                #region Create and insert some new puzzles
                List<int?> newIds = new List<int?>();
                for (int i = 0; i < BulkTestQuantity; i++)
                {
                    KnightsTour.Puzzle puzzle = InsertEntity<KnightsTour.Puzzle, KnightsTour.PuzzleLite>();
                    newIds.Add(puzzle.Id.Value);
                }
                Assert.IsTrue(newIds.Count == BulkTestQuantity);
                #endregion

                #region Now let's delete that newly cretaed puzzle by it's id
                KnightsTour.CoreLibrary.IActionResponse deleteResponse = logic.Delete(newIds);
                Assert.IsTrue(deleteResponse.IsValid);
                #endregion
            }
        }

        /// <summary>
        /// Description for Puzzle Logic_ Delete By Entity.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_DeleteByEntity()
        {
            using (var transactionScope = new TransactionScope())
            {
                KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);

                #region Create and insert a new puzzle
                KnightsTour.Puzzle puzzle = InsertEntity<KnightsTour.Puzzle, KnightsTour.PuzzleLite>();
                #endregion

                #region Now let's delete that newly created puzzle by it's id
                KnightsTour.CoreLibrary.IActionResponse deleteResponse = logic.Delete(puzzle);
                Assert.IsTrue(deleteResponse.IsValid);
                #endregion
            }
        }

        /// <summary>
        /// Description for Puzzle Logic_ Delete By Entities.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_DeleteByEntities()
        {
            using (var transactionScope = new TransactionScope())
            {
                KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);

                #region Create and insert some new puzzles
                List<KnightsTour.Puzzle> newEntities = new List<KnightsTour.Puzzle>();
                for (int i = 0; i < BulkTestQuantity; i++)
                {
                    KnightsTour.Puzzle puzzle = InsertEntity<KnightsTour.Puzzle, KnightsTour.PuzzleLite>();
                    newEntities.Add(puzzle);
                }
                Assert.IsTrue(newEntities.Count == BulkTestQuantity);
                #endregion

                #region Now let's delete that newly created puzzle by it's id
                KnightsTour.CoreLibrary.IActionResponse deleteResponse = logic.Delete(newEntities);
                Assert.IsTrue(deleteResponse.IsValid);
                #endregion
            }
        }

        /// <summary>
        /// Description for Puzzle Logic_ Delete_ Cascade.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_Delete_Cascade()
        {
            using (var transactionScope = new TransactionScope())
            {
                KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);

                #region Create and insert a new puzzle
                KnightsTour.Puzzle puzzle = InsertEntity<KnightsTour.Puzzle, KnightsTour.PuzzleLite>();
                #endregion

                #region Now let's delete that newly created puzzle by it's id
                KnightsTour.CoreLibrary.IActionResponse deleteResponse = logic.DeleteCascade(puzzle.Id.Value);
                Assert.IsTrue(deleteResponse.IsValid);
                #endregion
            }
        }

        /// <summary>
        /// Description for Puzzle Logic_ Delete_ By F K.
        /// </summary>
        [TestMethod]
        public void PuzzleLogic_Delete_ByFK()
        {
            EntityMetaData meta = new EntityMetaData(KnightsTour.Enumerations.EntityName.Puzzle, UserName);

            if (meta.Dependencies.Count > 0)
            {
                Assert.Inconclusive("Delete by FK is not possible due to dependencies.");
            }
            else
            {
                KnightsTour.PuzzleLogic logic = new KnightsTour.PuzzleLogic(UserName);
                using (var transactionScope = new TransactionScope())
                {
                    foreach (string property in EntityMapper.FKNames(new KnightsTour.Puzzle().EntityName))
                    {
                        // Get some valid FK Values.
                        foreach (int fkValue in StorageProvider.GetFKValues<KnightsTour.Puzzle, KnightsTour.PuzzleLite, int?>(property))
                        {
                            KnightsTour.CoreLibrary.IActionResponse deleteResponse = logic.DeleteByFK(property, fkValue);
                            Assert.IsTrue(deleteResponse.IsValid);
                        }
                    }
                }
            }
        }
        #endregion Puzzle logic tests Methods

    } // Class
} // Namespace
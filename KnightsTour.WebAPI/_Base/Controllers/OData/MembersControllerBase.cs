// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 21, 2023 9:45:26 AM
// File             : MembersControllerBase.cs
// ************************************************************************

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;

using KnightsTour.CoreLibrary;
using KnightsTour.WebAPI;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.OData.Formatter;
using Microsoft.AspNetCore.OData.Query;
using Microsoft.AspNetCore.OData.Results;

namespace Web.ODataControllers
{
    /// <summary>
    /// The base Rest based member endpoints.
    /// Generated On: October 21, 2023 at 9:45:26 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <seealso cref="Web.ODataControllers.ApiControllerBase" />
    /// <remarks>
    /// This class is overwritten every time the entity or generator version is modified to stay in sync with your model.
    /// </remarks>
    public class MembersControllerBase : ApiControllerBase
    {
        #region Public endpoints Methods

        /// <summary>
        /// Returns a page limited list of all Member entities.
        /// </summary>
        /// <returns>A <seealso cref="System.Web.Http.IActionResult" /> result.</returns>
        [EnableQuery]
        #if !DEBUG
        [Authorize]
        #endif
        public IActionResult Get()
        {
            return ExecuteCommon(_Get);
        }

        /// <summary>
        /// Returns a single Member entity.
        /// </summary>
        /// <param name="key">The id of the <seealso cref="KnightsTour.Member" /> of which to retrieve.</param>
        /// <returns>A <seealso cref="System.Web.Http.IActionResult" /> result.</returns>
        [EnableQuery]
        #if !DEBUG
        [Authorize]
        #endif
        public IActionResult Get(int key)
        {
            return ExecuteCommon(_Get, new dynamic[] { key });
        }

        /// <summary>
        /// Insert a lite <seealso cref="KnightsTour.Member" /> entity.
        /// </summary>
        /// <param name="memberLite">The new <seealso cref="KnightsTour.MemberLite" /> to insert.</param>
        /// <returns>A <seealso cref="System.Web.Http.IActionResult" /> result.</returns>
        #if !DEBUG
        [Authorize]
        #endif
        public IActionResult Post([FromBody] KnightsTour.MemberLite memberLite)
        {
            return ExecuteCommon(_Post, new dynamic[] { memberLite });
        }

        /// <summary>
        /// Updated the passed<seealso cref="KnightsTour.Member" /> entity.
        /// </summary>
        /// <param name="memberLite">The <seealso cref="KnightsTour.MemberLite" /> to update.</param>
        /// <returns>A <seealso cref="System.Web.Http.IActionResult" /> result.</returns>
        #if !DEBUG
        [Authorize]
        #endif
        public IActionResult Put([FromBody] KnightsTour.MemberLite memberLite)
        {
            return ExecuteCommon(_Put, new dynamic[] { memberLite });
        }

        /// <summary>
        /// Deletes a single Member entity.
        /// </summary>
        /// <param name="key">The id of the <seealso cref="KnightsTour.Member" /> of which to delete.</param>
        /// <returns>A <seealso cref="System.Web.Http.IActionResult" /> result.</returns>
        #if !DEBUG
        [Authorize]
        #endif
        public IActionResult Delete([FromODataUri] int key)
        {
            return ExecuteCommon(_Delete, new dynamic[] { key });
        }

        /// <summary>
        /// Returns all the related Solutions entities related to the Member.
        /// </summary>
        /// <param name="key">The id of the <seealso cref="KnightsTour.Member" /> of which to retrieve the related <seealso cref="KnightsTour.Solution" /> entities.</param>
        /// <returns>A <seealso cref="System.Web.Http.IActionResult" /> result.</returns>
        [EnableQuery]
        [HttpGet]
        #if !DEBUG
        [Authorize]
        #endif
        public IActionResult GetSolutions([FromODataUri] int key)
        {
            return ExecuteCommon(_GetSolutions, new dynamic[] { key });
        }

        /// <summary>
        /// Returns all the related EventHistories entities related to the Member.
        /// </summary>
        /// <param name="key">The id of the <seealso cref="KnightsTour.Member" /> of which to retrieve the related <seealso cref="KnightsTour.EventHistory" /> entities.</param>
        /// <returns>A <seealso cref="System.Web.Http.IActionResult" /> result.</returns>
        [EnableQuery]
        [HttpGet]
        #if !DEBUG
        [Authorize]
        #endif
        public IActionResult GetEventHistories([FromODataUri] int key)
        {
            return ExecuteCommon(_GetEventHistories, new dynamic[] { key });
        }
        #endregion Public endpoints Methods

        #region CRUD Methods

        /// <summary>
        /// Returns a page limited list of all Member entities.
        /// </summary>
        /// <param name="arguments">A dynamic list of arguments (required by the wrapping method call 'ExecuteCommon()').</param>
        /// <returns>A <seealso cref="System.Web.Http.IActionResult" /> result.</returns>
        private IActionResult _Get(dynamic[] arguments)
        {
            KnightsTour.MemberLogic logic = new KnightsTour.MemberLogic(UserName);
            if (arguments == null)
            {
                IEnumerable<KnightsTour.Member> members = logic.GetAll().AsQueryable();
                return Ok(members);
            }
            else
            {
                KnightsTour.Member member = logic.GetById(arguments[0]);
                if (member == null)
                {
                    return new NotFoundResult();
                }
                else
                {
                    SingleResult<KnightsTour.Member> creationResult = SingleResult.Create(new[] { member }.AsQueryable());
                    return Ok(creationResult);
                }
            }
        }

        /// <summary>
        /// Insert a lite <seealso cref="KnightsTour.Member" /> entity.
        /// </summary>
        /// <param name="arguments">A dynamic list of arguments (required by the wrapping method call 'ExecuteCommon()').</param>
        /// <returns>A <seealso cref="System.Web.Http.IActionResult" /> result.</returns>
        private IActionResult _Post(dynamic[] arguments)
        {
            KnightsTour.MemberLogic logic = new KnightsTour.MemberLogic(UserName);

            KnightsTour.Member newMember = new KnightsTour.Member(arguments[0]);
            IActionResponse response = logic.Insert(newMember);

            if (response.IsValid)
            {
                return Created(newMember);
            }
            else
            {
                return StatusCode((int)HttpStatusCode.BadRequest, response);
            }
        }

        /// <summary>
        /// Updated the passed<seealso cref="KnightsTour.Member" /> entity.
        /// </summary>
        /// <param name="arguments">A dynamic list of arguments (required by the wrapping method call 'ExecuteCommon()').</param>
        /// <returns>A <seealso cref="System.Web.Http.IActionResult" /> result.</returns>
        private IActionResult _Put(dynamic[] arguments)
        {
            KnightsTour.MemberLite memberLite = arguments[0];
            if (memberLite.Id.HasValue)
            {
                KnightsTour.MemberLogic logic = new KnightsTour.MemberLogic(UserName);

                KnightsTour.Member existingMember = logic.GetById(memberLite.MemberId.Value);
                if (existingMember != null)
                {
                    existingMember.UpdateFromLite(memberLite);
                    if (existingMember.IsModified())
                    {
                        IActionResponse response = logic.Update(existingMember);

                        if (response.IsValid)
                        {
                            return Updated(existingMember);
                        }
                        else
                        {
                            return StatusCode((int)HttpStatusCode.BadRequest, response);
                        }
                    }
                    else
                    {
                        return StatusCode((int)HttpStatusCode.NoContent, "No update required.");
                    }
                }
                else
                {
                    return new NotFoundResult();
                }
            }
            else
            {
                return StatusCode((int)HttpStatusCode.BadRequest, "When updating a member via a HttpPut verb, MemberId must be set.");
            }
        }

        /// <summary>
        /// Deletes a single Member entity.
        /// </summary>
        /// <param name="arguments">A dynamic list of arguments (required by the wrapping method call 'ExecuteCommon()').</param>
        /// <returns>A <seealso cref="System.Web.Http.IActionResult" /> result.</returns>
        private IActionResult _Delete(dynamic[] arguments)
        {
            KnightsTour.MemberLogic logic = new KnightsTour.MemberLogic(UserName);
            IActionResponse response = logic.Delete(arguments[0]);

            if (response.IsValid)
            {
                return StatusCode((int)HttpStatusCode.NoContent, response);
            }
            else
            {
                return StatusCode((int)HttpStatusCode.BadRequest, response);
            }
        }
        #endregion CRUD Methods

        #region Child CRUD access Methods

        /// <summary>
        /// Returns all the related Solutions entities related to the Member.
        /// </summary>
        /// <param name="arguments">A dynamic list of arguments (required by the wrapping method call 'ExecuteCommon()').</param>
        /// <returns>A <seealso cref="System.Web.Http.IActionResult" /> result.</returns>
        private IActionResult _GetSolutions(dynamic[] arguments)
        {
            KnightsTour.MemberLogic logic = new KnightsTour.MemberLogic(UserName);
            KnightsTour.Member member = logic.GetById(arguments[0]);
            if (member == null)
            {
                return new NotFoundResult();
            }
            else
            {
                return Ok(member.Solutions.AsQueryable());
            }
        }

        /// <summary>
        /// Returns all the related EventHistories entities related to the Member.
        /// </summary>
        /// <param name="arguments">A dynamic list of arguments (required by the wrapping method call 'ExecuteCommon()').</param>
        /// <returns>A <seealso cref="System.Web.Http.IActionResult" /> result.</returns>
        private IActionResult _GetEventHistories(dynamic[] arguments)
        {
            KnightsTour.MemberLogic logic = new KnightsTour.MemberLogic(UserName);
            KnightsTour.Member member = logic.GetById(arguments[0]);
            if (member == null)
            {
                return new NotFoundResult();
            }
            else
            {
                return Ok(member.EventHistories.AsQueryable());
            }
        }
        #endregion Child CRUD access Methods

    } // Class
} // Namespace
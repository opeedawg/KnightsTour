// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 21, 2023 9:45:26 AM
// File             : BoardType.cs
// ************************************************************************

using GraphQL.Types;

namespace WebAPI.GraphQL.Types
{
    /// <summary>
    /// Graph QL model mapping for board.
    /// Generated On: October 21, 2023 at 9:45:26 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    public class BoardType : ObjectGraphType<KnightsTour.Board>
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="BoardType"/> class.
        /// Type configuration for access to the Board entity.
        /// </summary>
        /// <param name="data">The data model associated with the GraphQL Schema.</param>
        public BoardType(KnightsTourData data)
        {
            Name = "Board";
            Description = "The GraphQL class that maps and exposes properties and references from the KnightsTour.Board entity.";

            // Board property mapping.
            Field(x => x.Id, nullable: true).Description("The unique primary key accessor of the board.");
            Field(x => x.BoardId, nullable: true).Description("The primary key of the board.");
            Field(x => x.BoardCode, type: typeof(IdGraphType)).Description("The board code of the board.");
            Field(x => x.RowDimension).Description("The row dimension of the board.");
            Field(x => x.ColDimension).Description("The col dimension of the board.");
            Field(x => x.DiscoveryDate).Description("The discovery date of the board.");
            Field(x => x.Author).Description("The author of the board.");
            Field(x => x.DiscoveryIterationCount).Description("The discovery iteration count of the board.");
            Field(x => x.DiscoveryRandomness).Description("The discovery randomness of the board.");
            Field(x => x.Path).Description("The path of the board.");
            Field(x => x.SourceBoardId, nullable: true).Description("The associated source board id to the board.");
            Field(x => x.DiscoveryDateFormatted).Description("The board formatted as a date using the defined custom or default date format.");

            // Foreign key reference mapping.
            Field<BoardType>("board", "The associated board reference (if it exists otherwise null) to this board.", resolve: context => data.GetBoardByIdAsync(context.Source.SourceBoardId));

            // Child relationship reference mapping.
            Field<ListGraphType<BoardType>>("boards", "A collection of child boards that reference this board.", resolve: context => context.Source.Boards);
            Field<ListGraphType<PuzzleType>>("puzzles", "A collection of child puzzles that reference this board.", resolve: context => context.Source.Puzzles);
        }
        #endregion Constructor(s)

    } // Class
} // Namespace
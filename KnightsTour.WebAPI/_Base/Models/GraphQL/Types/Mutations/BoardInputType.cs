// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 21, 2023 9:45:26 AM
// File             : BoardInputType.cs
// ************************************************************************

using GraphQL.Types;

namespace WebAPI.GraphQL.Types
{
    /// <summary>
    /// Graph QL input model mapping for board.
    /// Generated On: October 21, 2023 at 9:45:26 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    public class BoardInputType : InputObjectGraphType<KnightsTour.BoardLite>
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="BoardInputType"/> class.
        /// Type configuration for access to the Board entity.
        /// </summary>
        /// <param name="data">The data model assiciated with the GraphQL Schema.</param>
        public BoardInputType(KnightsTourData data)
        {
            Name = "BoardInput";

            // Board property mapping.
            Field(x => x.Id, nullable: true).Description("The unique primary key accessor of the board.");
            Field(x => x.BoardId, nullable: true).Description("The primary key of the board.");
            Field(x => x.BoardCode, type: typeof(IdGraphType)).Description("The board code of the board.");
            Field(x => x.RowDimension).Description("The row dimension of the board.");
            Field(x => x.ColDimension).Description("The col dimension of the board.");
            Field(x => x.DiscoveryDate).Description("The discovery date of the board.");
            Field(x => x.Author).Description("The author of the board.");
            Field(x => x.DiscoveryIterationCount).Description("The discovery iteration count of the board.");
            Field(x => x.DiscoveryRandomness).Description("The discovery randomness of the board.");
            Field(x => x.Path).Description("The path of the board.");
            Field(x => x.SourceBoardId, nullable: true).Description("The associated source board id to the board.");
        }
        #endregion Constructor(s)

    } // Class
} // Namespace
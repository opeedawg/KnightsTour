// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 21, 2023 9:45:26 AM
// File             : KnightsTourMutation.cs
// ************************************************************************

using System;

using GraphQL.Types;
using WebAPI.GraphQL.Types;

namespace WebAPI.GraphQL
{
    /// <summary>
    /// Graph QL mutation model.
    /// Generated On: October 21, 2023 at 9:45:26 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    /// <example>
    /// This is an example JSON request for a mutation
    /// {
    ///   "query": "mutation ($human:HumanInput!){ createHuman(human: $human) { id name } }",
    ///   "variables": {
    ///     "human": {
    ///       "name": "Boba Fett"
    ///     }
    ///   }
    /// }
    /// </example>
    public class KnightsTourMutation : ObjectGraphType
    {
        #region Constructor(s)

        /// <summary>
        /// Initializes a new instance of the <see cref="KnightsTourMutation"/> class.
        /// Mutation configuration for KnightsTour.
        /// </summary>
        /// <param name="data">The data model assiciated with the GraphQL Schema.</param>
        public KnightsTourMutation(KnightsTourData data)
        {
            Name = "Mutation";

            #region Board Mutations
            Field<BoardType>(
            "createBoard",
            arguments: new QueryArguments(
            new QueryArgument<NonNullGraphType<BoardInputType>> { Name = "board" }
            ),
            resolve: context =>
            {
                KnightsTour.Board board = context.GetArgument<KnightsTour.Board>("board");
                return data.InsertBoard(board);
            });
            Field<BoardType>(
            "updateBoard",
            arguments: new QueryArguments(
            new QueryArgument<NonNullGraphType<BoardInputType>> { Name = "board" }
            ),
            resolve: context =>
            {
                KnightsTour.Board board = context.GetArgument<KnightsTour.Board>("board");
                return data.UpdateBoard(board);
            });
            Field<BoardType>(
                "deleteBoard",
                arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                int? id = context.GetArgument<int?>("id");
                return data.DeleteBoard(id);
            });
            Field<BoardType>(
                "deleteBoardCascade",
                arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                int id = context.GetArgument<int>("id");
                return data.DeleteBoardCascade(id);
            });
            Field<BoardType>(
                "deleteBoardByFK",
                arguments: new QueryArguments(
                new QueryArgument<StringGraphType> { Name = "foreignKeyName" },
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                 string foreignKeyName = context.GetArgument<string>("foreignKeyName");
                int id = context.GetArgument<int>("id");
                return data.DeleteBoardByFK(foreignKeyName, id);
            });
            #endregion

            #region DifficultyLevel Mutations
            Field<DifficultyLevelType>(
            "createDifficultyLevel",
            arguments: new QueryArguments(
            new QueryArgument<NonNullGraphType<DifficultyLevelInputType>> { Name = "difficultyLevel" }
            ),
            resolve: context =>
            {
                KnightsTour.DifficultyLevel difficultyLevel = context.GetArgument<KnightsTour.DifficultyLevel>("difficultyLevel");
                return data.InsertDifficultyLevel(difficultyLevel);
            });
            Field<DifficultyLevelType>(
            "updateDifficultyLevel",
            arguments: new QueryArguments(
            new QueryArgument<NonNullGraphType<DifficultyLevelInputType>> { Name = "difficultyLevel" }
            ),
            resolve: context =>
            {
                KnightsTour.DifficultyLevel difficultyLevel = context.GetArgument<KnightsTour.DifficultyLevel>("difficultyLevel");
                return data.UpdateDifficultyLevel(difficultyLevel);
            });
            Field<DifficultyLevelType>(
                "deleteDifficultyLevel",
                arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                int? id = context.GetArgument<int?>("id");
                return data.DeleteDifficultyLevel(id);
            });
            Field<DifficultyLevelType>(
                "deleteDifficultyLevelCascade",
                arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                int id = context.GetArgument<int>("id");
                return data.DeleteDifficultyLevelCascade(id);
            });
            Field<DifficultyLevelType>(
                "deleteDifficultyLevelByFK",
                arguments: new QueryArguments(
                new QueryArgument<StringGraphType> { Name = "foreignKeyName" },
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                 string foreignKeyName = context.GetArgument<string>("foreignKeyName");
                int id = context.GetArgument<int>("id");
                return data.DeleteDifficultyLevelByFK(foreignKeyName, id);
            });
            #endregion

            #region EventHistory Mutations
            Field<EventHistoryType>(
            "createEventHistory",
            arguments: new QueryArguments(
            new QueryArgument<NonNullGraphType<EventHistoryInputType>> { Name = "eventHistory" }
            ),
            resolve: context =>
            {
                KnightsTour.EventHistory eventHistory = context.GetArgument<KnightsTour.EventHistory>("eventHistory");
                return data.InsertEventHistory(eventHistory);
            });
            Field<EventHistoryType>(
            "updateEventHistory",
            arguments: new QueryArguments(
            new QueryArgument<NonNullGraphType<EventHistoryInputType>> { Name = "eventHistory" }
            ),
            resolve: context =>
            {
                KnightsTour.EventHistory eventHistory = context.GetArgument<KnightsTour.EventHistory>("eventHistory");
                return data.UpdateEventHistory(eventHistory);
            });
            Field<EventHistoryType>(
                "deleteEventHistory",
                arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                int? id = context.GetArgument<int?>("id");
                return data.DeleteEventHistory(id);
            });
            Field<EventHistoryType>(
                "deleteEventHistoryCascade",
                arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                int id = context.GetArgument<int>("id");
                return data.DeleteEventHistoryCascade(id);
            });
            Field<EventHistoryType>(
                "deleteEventHistoryByFK",
                arguments: new QueryArguments(
                new QueryArgument<StringGraphType> { Name = "foreignKeyName" },
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                 string foreignKeyName = context.GetArgument<string>("foreignKeyName");
                int id = context.GetArgument<int>("id");
                return data.DeleteEventHistoryByFK(foreignKeyName, id);
            });
            #endregion

            #region EventType Mutations
            Field<EventTypeType>(
            "createEventType",
            arguments: new QueryArguments(
            new QueryArgument<NonNullGraphType<EventTypeInputType>> { Name = "eventType" }
            ),
            resolve: context =>
            {
                KnightsTour.EventType eventType = context.GetArgument<KnightsTour.EventType>("eventType");
                return data.InsertEventType(eventType);
            });
            Field<EventTypeType>(
            "updateEventType",
            arguments: new QueryArguments(
            new QueryArgument<NonNullGraphType<EventTypeInputType>> { Name = "eventType" }
            ),
            resolve: context =>
            {
                KnightsTour.EventType eventType = context.GetArgument<KnightsTour.EventType>("eventType");
                return data.UpdateEventType(eventType);
            });
            Field<EventTypeType>(
                "deleteEventType",
                arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                int? id = context.GetArgument<int?>("id");
                return data.DeleteEventType(id);
            });
            Field<EventTypeType>(
                "deleteEventTypeCascade",
                arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                int id = context.GetArgument<int>("id");
                return data.DeleteEventTypeCascade(id);
            });
            Field<EventTypeType>(
                "deleteEventTypeByFK",
                arguments: new QueryArguments(
                new QueryArgument<StringGraphType> { Name = "foreignKeyName" },
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                 string foreignKeyName = context.GetArgument<string>("foreignKeyName");
                int id = context.GetArgument<int>("id");
                return data.DeleteEventTypeByFK(foreignKeyName, id);
            });
            #endregion

            #region Member Mutations
            Field<MemberType>(
            "createMember",
            arguments: new QueryArguments(
            new QueryArgument<NonNullGraphType<MemberInputType>> { Name = "member" }
            ),
            resolve: context =>
            {
                KnightsTour.Member member = context.GetArgument<KnightsTour.Member>("member");
                return data.InsertMember(member);
            });
            Field<MemberType>(
            "updateMember",
            arguments: new QueryArguments(
            new QueryArgument<NonNullGraphType<MemberInputType>> { Name = "member" }
            ),
            resolve: context =>
            {
                KnightsTour.Member member = context.GetArgument<KnightsTour.Member>("member");
                return data.UpdateMember(member);
            });
            Field<MemberType>(
                "deleteMember",
                arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                int? id = context.GetArgument<int?>("id");
                return data.DeleteMember(id);
            });
            Field<MemberType>(
                "deleteMemberCascade",
                arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                int id = context.GetArgument<int>("id");
                return data.DeleteMemberCascade(id);
            });
            Field<MemberType>(
                "deleteMemberByFK",
                arguments: new QueryArguments(
                new QueryArgument<StringGraphType> { Name = "foreignKeyName" },
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                 string foreignKeyName = context.GetArgument<string>("foreignKeyName");
                int id = context.GetArgument<int>("id");
                return data.DeleteMemberByFK(foreignKeyName, id);
            });
            #endregion

            #region Puzzle Mutations
            Field<PuzzleType>(
            "createPuzzle",
            arguments: new QueryArguments(
            new QueryArgument<NonNullGraphType<PuzzleInputType>> { Name = "puzzle" }
            ),
            resolve: context =>
            {
                KnightsTour.Puzzle puzzle = context.GetArgument<KnightsTour.Puzzle>("puzzle");
                return data.InsertPuzzle(puzzle);
            });
            Field<PuzzleType>(
            "updatePuzzle",
            arguments: new QueryArguments(
            new QueryArgument<NonNullGraphType<PuzzleInputType>> { Name = "puzzle" }
            ),
            resolve: context =>
            {
                KnightsTour.Puzzle puzzle = context.GetArgument<KnightsTour.Puzzle>("puzzle");
                return data.UpdatePuzzle(puzzle);
            });
            Field<PuzzleType>(
                "deletePuzzle",
                arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                int? id = context.GetArgument<int?>("id");
                return data.DeletePuzzle(id);
            });
            Field<PuzzleType>(
                "deletePuzzleCascade",
                arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                int id = context.GetArgument<int>("id");
                return data.DeletePuzzleCascade(id);
            });
            Field<PuzzleType>(
                "deletePuzzleByFK",
                arguments: new QueryArguments(
                new QueryArgument<StringGraphType> { Name = "foreignKeyName" },
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                 string foreignKeyName = context.GetArgument<string>("foreignKeyName");
                int id = context.GetArgument<int>("id");
                return data.DeletePuzzleByFK(foreignKeyName, id);
            });
            #endregion

            #region Solution Mutations
            Field<SolutionType>(
            "createSolution",
            arguments: new QueryArguments(
            new QueryArgument<NonNullGraphType<SolutionInputType>> { Name = "solution" }
            ),
            resolve: context =>
            {
                KnightsTour.Solution solution = context.GetArgument<KnightsTour.Solution>("solution");
                return data.InsertSolution(solution);
            });
            Field<SolutionType>(
            "updateSolution",
            arguments: new QueryArguments(
            new QueryArgument<NonNullGraphType<SolutionInputType>> { Name = "solution" }
            ),
            resolve: context =>
            {
                KnightsTour.Solution solution = context.GetArgument<KnightsTour.Solution>("solution");
                return data.UpdateSolution(solution);
            });
            Field<SolutionType>(
                "deleteSolution",
                arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                int? id = context.GetArgument<int?>("id");
                return data.DeleteSolution(id);
            });
            Field<SolutionType>(
                "deleteSolutionCascade",
                arguments: new QueryArguments(
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                int id = context.GetArgument<int>("id");
                return data.DeleteSolutionCascade(id);
            });
            Field<SolutionType>(
                "deleteSolutionByFK",
                arguments: new QueryArguments(
                new QueryArgument<StringGraphType> { Name = "foreignKeyName" },
                new QueryArgument<IntGraphType> { Name = "id" }
            ),
            resolve: context =>
            {
                 string foreignKeyName = context.GetArgument<string>("foreignKeyName");
                int id = context.GetArgument<int>("id");
                return data.DeleteSolutionByFK(foreignKeyName, id);
            });
            #endregion

        }
        #endregion Constructor(s)

    } // Class
} // Namespace
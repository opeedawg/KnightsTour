// Â© 2023 27 Software
//
// ************************************************************************
// Author           : DXterity8 Version 8.6
// Created          : October 21, 2023 9:45:26 AM
// File             : KnightsTourData.cs
// ************************************************************************

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

using KnightsTour;
using KnightsTour.CoreLibrary;

namespace WebAPI.GraphQL
{
    /// <summary>
    /// Graph QL Data access model.
    /// Generated On: October 21, 2023 at 9:45:26 AM by DXterity Solutions.
    /// Generated By: DXterity8 Version 8.6.0 (see https://dxteritysolutions.com/).
    /// </summary>
    public class KnightsTourData
    {
        #region Properties

        /// <summary>
        /// The user name of the contextual user invoking the method.
        /// </summary>
        /// <value>
        /// The user name.
        /// </value>
        public string UserName
        {
            get
            {
                return "System";
            }
        }
        #endregion Properties

        #region Board [Board] related Methods

        /// <summary>
        /// Returns the Board by it's primary key.
        /// </summary>
        /// <param name="id">The primary key of the board to retrieve.</param>
        /// <returns>The Board.</returns>
        public Task<KnightsTour.Board> GetBoardByIdAsync(int? id)
        {
            if (id.HasValue)
            {
                return System.Threading.Tasks.Task.FromResult(new KnightsTour.BoardLogic(UserName).GetById(id.Value));
            }
            return null;
        }

        /// <summary>
        /// Returns a collection of Boards.
        /// </summary>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="orderBy">A valid SQL order by clause.</param>
        /// <param name="take">The maximum number of records to return.</param>
        /// <param name="skip">The number of records to skip (for pagination).</param>
        /// <param name="tableJoins">The optional tables to join this query on.</param>
        /// <returns>The Boards.</returns>
        public Task<IEnumerable<KnightsTour.Board>> GetBoards(string where = null, string orderBy = null, int? take = null, int? skip = null, List<TableJoin> tableJoins = null)
        {
            RetrievalCondition condition = new RetrievalCondition()
            {
                SQLWhere = where,
                SQLOrderBy = orderBy,
                Take = take,
                Skip = skip,
                TableJoins = tableJoins
            };
            return System.Threading.Tasks.Task.FromResult(new KnightsTour.BoardLogic(UserName).GetAll(condition));
        }

        /// <summary>
        /// Returns a collection of Boards.
        /// </summary>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="tableJoins">The optional tables to join this query on.</param>
        /// <returns>The Boards.</returns>
        public Task<int> GetBoardCount(string where = null, List<TableJoin> tableJoins = null)
        {
            RetrievalCondition condition = new RetrievalCondition()
            {
                SQLWhere = where,
                TableJoins = tableJoins
            };
            return System.Threading.Tasks.Task.FromResult(new KnightsTour.BoardLogic(UserName).GetAll(condition).Count());
        }

        /// <summary>
        /// Returns a collection of distinct column data from the Boards.
        /// </summary>
        /// <param name="keyName">A vaid column name that exists on the Board table.</param>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="tableJoins">A collection of table join definitions.</param>
        /// <param name="fkTable">The name of the foreign key table (optional).</param>
        /// <param name="fkColumn">The name of the foreign key column to join on (optional).</param>
        /// <param name="fkProperty1Name">The name of the primary foreign key column (optional).</param>
        /// <param name="fkProperty2Name">The name of the secondary foreign key column (optional).</param>
        /// <returns>Distinct Board column data.</returns>
        public Task<List<GroupDetail>> GetBoardDistinctValues(string keyName, string where = null, List<TableJoin> tableJoins = null, string fkTable = null, string fkColumn = null, string fkProperty1Name = null, string fkProperty2Name = null)
        {
            return GetDistinctValues("Board", keyName, where, tableJoins, fkTable, fkColumn, fkProperty1Name, fkProperty2Name);
        }

        /// <summary>
        /// Inserts the Board entity.
        /// </summary>
        /// <param name="board">The board to insert.</param>
        /// <returns>The inserted Board.</returns>
        public KnightsTour.Board InsertBoard(KnightsTour.Board board)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.BoardLogic(UserName).Insert(board);
            return board;
        }

        /// <summary>
        /// Updates the Board entity.
        /// </summary>
        /// <param name="board">The board to update.</param>
        /// <returns>The updated Board.</returns>
        public KnightsTour.Board UpdateBoard(KnightsTour.Board board)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.BoardLogic(UserName).Update(board);
            return board;
        }

        /// <summary>
        /// Deletes the Board entity by it's primary key.
        /// </summary>
        /// <param name="id">The id of the board to delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteBoard(int? id)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.BoardLogic(UserName).Delete(id);
            return response.Messages[0].Content;
        }

        /// <summary>
        /// Deletes the Board entity and all related dependencies by it's primary key.
        /// </summary>
        /// <param name="id">The id of the board to cascade delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteBoardCascade(int id)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.BoardLogic(UserName).DeleteCascade(id);
            return response.Messages[0].Content;
        }

        /// <summary>
        /// Deletes a possible collection of Board entities by a passed foreign key.
        /// </summary>
        /// <param name="foreignKeyName">The foreign key column name of the board to delete.</param>
        /// <param name="fkId">The id of the board foreign key column to delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteBoardByFK(string foreignKeyName, int fkId)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.BoardLogic(UserName).DeleteByFK(foreignKeyName, fkId);
            return response.Messages[0].Content;
        }
        #endregion Board [Board] related Methods

        #region Difficulty level [DifficultyLevel] related Methods

        /// <summary>
        /// Returns the DifficultyLevel by it's primary key.
        /// </summary>
        /// <param name="id">The primary key of the difficulty level to retrieve.</param>
        /// <returns>The DifficultyLevel.</returns>
        public Task<KnightsTour.DifficultyLevel> GetDifficultyLevelByIdAsync(int? id)
        {
            if (id.HasValue)
            {
                return System.Threading.Tasks.Task.FromResult(new KnightsTour.DifficultyLevelLogic(UserName).GetById(id.Value));
            }
            return null;
        }

        /// <summary>
        /// Returns a collection of DifficultyLevels.
        /// </summary>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="orderBy">A valid SQL order by clause.</param>
        /// <param name="take">The maximum number of records to return.</param>
        /// <param name="skip">The number of records to skip (for pagination).</param>
        /// <param name="tableJoins">The optional tables to join this query on.</param>
        /// <returns>The DifficultyLevels.</returns>
        public Task<IEnumerable<KnightsTour.DifficultyLevel>> GetDifficultyLevels(string where = null, string orderBy = null, int? take = null, int? skip = null, List<TableJoin> tableJoins = null)
        {
            RetrievalCondition condition = new RetrievalCondition()
            {
                SQLWhere = where,
                SQLOrderBy = orderBy,
                Take = take,
                Skip = skip,
                TableJoins = tableJoins
            };
            return System.Threading.Tasks.Task.FromResult(new KnightsTour.DifficultyLevelLogic(UserName).GetAll(condition));
        }

        /// <summary>
        /// Returns a collection of DifficultyLevels.
        /// </summary>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="tableJoins">The optional tables to join this query on.</param>
        /// <returns>The DifficultyLevels.</returns>
        public Task<int> GetDifficultyLevelCount(string where = null, List<TableJoin> tableJoins = null)
        {
            RetrievalCondition condition = new RetrievalCondition()
            {
                SQLWhere = where,
                TableJoins = tableJoins
            };
            return System.Threading.Tasks.Task.FromResult(new KnightsTour.DifficultyLevelLogic(UserName).GetAll(condition).Count());
        }

        /// <summary>
        /// Returns a collection of distinct column data from the DifficultyLevels.
        /// </summary>
        /// <param name="keyName">A vaid column name that exists on the DifficultyLevel table.</param>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="tableJoins">A collection of table join definitions.</param>
        /// <param name="fkTable">The name of the foreign key table (optional).</param>
        /// <param name="fkColumn">The name of the foreign key column to join on (optional).</param>
        /// <param name="fkProperty1Name">The name of the primary foreign key column (optional).</param>
        /// <param name="fkProperty2Name">The name of the secondary foreign key column (optional).</param>
        /// <returns>Distinct DifficultyLevel column data.</returns>
        public Task<List<GroupDetail>> GetDifficultyLevelDistinctValues(string keyName, string where = null, List<TableJoin> tableJoins = null, string fkTable = null, string fkColumn = null, string fkProperty1Name = null, string fkProperty2Name = null)
        {
            return GetDistinctValues("DifficultyLevel", keyName, where, tableJoins, fkTable, fkColumn, fkProperty1Name, fkProperty2Name);
        }

        /// <summary>
        /// Inserts the DifficultyLevel entity.
        /// </summary>
        /// <param name="difficultyLevel">The difficulty level to insert.</param>
        /// <returns>The inserted DifficultyLevel.</returns>
        public KnightsTour.DifficultyLevel InsertDifficultyLevel(KnightsTour.DifficultyLevel difficultyLevel)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.DifficultyLevelLogic(UserName).Insert(difficultyLevel);
            return difficultyLevel;
        }

        /// <summary>
        /// Updates the DifficultyLevel entity.
        /// </summary>
        /// <param name="difficultyLevel">The difficulty level to update.</param>
        /// <returns>The updated DifficultyLevel.</returns>
        public KnightsTour.DifficultyLevel UpdateDifficultyLevel(KnightsTour.DifficultyLevel difficultyLevel)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.DifficultyLevelLogic(UserName).Update(difficultyLevel);
            return difficultyLevel;
        }

        /// <summary>
        /// Deletes the DifficultyLevel entity by it's primary key.
        /// </summary>
        /// <param name="id">The id of the difficulty level to delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteDifficultyLevel(int? id)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.DifficultyLevelLogic(UserName).Delete(id);
            return response.Messages[0].Content;
        }

        /// <summary>
        /// Deletes the DifficultyLevel entity and all related dependencies by it's primary key.
        /// </summary>
        /// <param name="id">The id of the difficulty level to cascade delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteDifficultyLevelCascade(int id)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.DifficultyLevelLogic(UserName).DeleteCascade(id);
            return response.Messages[0].Content;
        }

        /// <summary>
        /// Deletes a possible collection of DifficultyLevel entities by a passed foreign key.
        /// </summary>
        /// <param name="foreignKeyName">The foreign key column name of the difficulty level to delete.</param>
        /// <param name="fkId">The id of the difficulty level foreign key column to delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteDifficultyLevelByFK(string foreignKeyName, int fkId)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.DifficultyLevelLogic(UserName).DeleteByFK(foreignKeyName, fkId);
            return response.Messages[0].Content;
        }
        #endregion Difficulty level [DifficultyLevel] related Methods

        #region Event history [EventHistory] related Methods

        /// <summary>
        /// Returns the EventHistory by it's primary key.
        /// </summary>
        /// <param name="id">The primary key of the event history to retrieve.</param>
        /// <returns>The EventHistory.</returns>
        public Task<KnightsTour.EventHistory> GetEventHistoryByIdAsync(int? id)
        {
            if (id.HasValue)
            {
                return System.Threading.Tasks.Task.FromResult(new KnightsTour.EventHistoryLogic(UserName).GetById(id.Value));
            }
            return null;
        }

        /// <summary>
        /// Returns a collection of EventHistories.
        /// </summary>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="orderBy">A valid SQL order by clause.</param>
        /// <param name="take">The maximum number of records to return.</param>
        /// <param name="skip">The number of records to skip (for pagination).</param>
        /// <param name="tableJoins">The optional tables to join this query on.</param>
        /// <returns>The EventHistories.</returns>
        public Task<IEnumerable<KnightsTour.EventHistory>> GetEventHistories(string where = null, string orderBy = null, int? take = null, int? skip = null, List<TableJoin> tableJoins = null)
        {
            RetrievalCondition condition = new RetrievalCondition()
            {
                SQLWhere = where,
                SQLOrderBy = orderBy,
                Take = take,
                Skip = skip,
                TableJoins = tableJoins
            };
            return System.Threading.Tasks.Task.FromResult(new KnightsTour.EventHistoryLogic(UserName).GetAll(condition));
        }

        /// <summary>
        /// Returns a collection of EventHistories.
        /// </summary>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="tableJoins">The optional tables to join this query on.</param>
        /// <returns>The EventHistories.</returns>
        public Task<int> GetEventHistoryCount(string where = null, List<TableJoin> tableJoins = null)
        {
            RetrievalCondition condition = new RetrievalCondition()
            {
                SQLWhere = where,
                TableJoins = tableJoins
            };
            return System.Threading.Tasks.Task.FromResult(new KnightsTour.EventHistoryLogic(UserName).GetAll(condition).Count());
        }

        /// <summary>
        /// Returns a collection of distinct column data from the EventHistories.
        /// </summary>
        /// <param name="keyName">A vaid column name that exists on the EventHistory table.</param>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="tableJoins">A collection of table join definitions.</param>
        /// <param name="fkTable">The name of the foreign key table (optional).</param>
        /// <param name="fkColumn">The name of the foreign key column to join on (optional).</param>
        /// <param name="fkProperty1Name">The name of the primary foreign key column (optional).</param>
        /// <param name="fkProperty2Name">The name of the secondary foreign key column (optional).</param>
        /// <returns>Distinct EventHistory column data.</returns>
        public Task<List<GroupDetail>> GetEventHistoryDistinctValues(string keyName, string where = null, List<TableJoin> tableJoins = null, string fkTable = null, string fkColumn = null, string fkProperty1Name = null, string fkProperty2Name = null)
        {
            return GetDistinctValues("EventHistory", keyName, where, tableJoins, fkTable, fkColumn, fkProperty1Name, fkProperty2Name);
        }

        /// <summary>
        /// Inserts the EventHistory entity.
        /// </summary>
        /// <param name="eventHistory">The event history to insert.</param>
        /// <returns>The inserted EventHistory.</returns>
        public KnightsTour.EventHistory InsertEventHistory(KnightsTour.EventHistory eventHistory)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.EventHistoryLogic(UserName).Insert(eventHistory);
            return eventHistory;
        }

        /// <summary>
        /// Updates the EventHistory entity.
        /// </summary>
        /// <param name="eventHistory">The event history to update.</param>
        /// <returns>The updated EventHistory.</returns>
        public KnightsTour.EventHistory UpdateEventHistory(KnightsTour.EventHistory eventHistory)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.EventHistoryLogic(UserName).Update(eventHistory);
            return eventHistory;
        }

        /// <summary>
        /// Deletes the EventHistory entity by it's primary key.
        /// </summary>
        /// <param name="id">The id of the event history to delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteEventHistory(int? id)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.EventHistoryLogic(UserName).Delete(id);
            return response.Messages[0].Content;
        }

        /// <summary>
        /// Deletes the EventHistory entity and all related dependencies by it's primary key.
        /// </summary>
        /// <param name="id">The id of the event history to cascade delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteEventHistoryCascade(int id)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.EventHistoryLogic(UserName).DeleteCascade(id);
            return response.Messages[0].Content;
        }

        /// <summary>
        /// Deletes a possible collection of EventHistory entities by a passed foreign key.
        /// </summary>
        /// <param name="foreignKeyName">The foreign key column name of the event history to delete.</param>
        /// <param name="fkId">The id of the event history foreign key column to delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteEventHistoryByFK(string foreignKeyName, int fkId)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.EventHistoryLogic(UserName).DeleteByFK(foreignKeyName, fkId);
            return response.Messages[0].Content;
        }
        #endregion Event history [EventHistory] related Methods

        #region Event type [EventType] related Methods

        /// <summary>
        /// Returns the EventType by it's primary key.
        /// </summary>
        /// <param name="id">The primary key of the event type to retrieve.</param>
        /// <returns>The EventType.</returns>
        public Task<KnightsTour.EventType> GetEventTypeByIdAsync(int? id)
        {
            if (id.HasValue)
            {
                return System.Threading.Tasks.Task.FromResult(new KnightsTour.EventTypeLogic(UserName).GetById(id.Value));
            }
            return null;
        }

        /// <summary>
        /// Returns a collection of EventTypes.
        /// </summary>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="orderBy">A valid SQL order by clause.</param>
        /// <param name="take">The maximum number of records to return.</param>
        /// <param name="skip">The number of records to skip (for pagination).</param>
        /// <param name="tableJoins">The optional tables to join this query on.</param>
        /// <returns>The EventTypes.</returns>
        public Task<IEnumerable<KnightsTour.EventType>> GetEventTypes(string where = null, string orderBy = null, int? take = null, int? skip = null, List<TableJoin> tableJoins = null)
        {
            RetrievalCondition condition = new RetrievalCondition()
            {
                SQLWhere = where,
                SQLOrderBy = orderBy,
                Take = take,
                Skip = skip,
                TableJoins = tableJoins
            };
            return System.Threading.Tasks.Task.FromResult(new KnightsTour.EventTypeLogic(UserName).GetAll(condition));
        }

        /// <summary>
        /// Returns a collection of EventTypes.
        /// </summary>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="tableJoins">The optional tables to join this query on.</param>
        /// <returns>The EventTypes.</returns>
        public Task<int> GetEventTypeCount(string where = null, List<TableJoin> tableJoins = null)
        {
            RetrievalCondition condition = new RetrievalCondition()
            {
                SQLWhere = where,
                TableJoins = tableJoins
            };
            return System.Threading.Tasks.Task.FromResult(new KnightsTour.EventTypeLogic(UserName).GetAll(condition).Count());
        }

        /// <summary>
        /// Returns a collection of distinct column data from the EventTypes.
        /// </summary>
        /// <param name="keyName">A vaid column name that exists on the EventType table.</param>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="tableJoins">A collection of table join definitions.</param>
        /// <param name="fkTable">The name of the foreign key table (optional).</param>
        /// <param name="fkColumn">The name of the foreign key column to join on (optional).</param>
        /// <param name="fkProperty1Name">The name of the primary foreign key column (optional).</param>
        /// <param name="fkProperty2Name">The name of the secondary foreign key column (optional).</param>
        /// <returns>Distinct EventType column data.</returns>
        public Task<List<GroupDetail>> GetEventTypeDistinctValues(string keyName, string where = null, List<TableJoin> tableJoins = null, string fkTable = null, string fkColumn = null, string fkProperty1Name = null, string fkProperty2Name = null)
        {
            return GetDistinctValues("EventType", keyName, where, tableJoins, fkTable, fkColumn, fkProperty1Name, fkProperty2Name);
        }

        /// <summary>
        /// Inserts the EventType entity.
        /// </summary>
        /// <param name="eventType">The event type to insert.</param>
        /// <returns>The inserted EventType.</returns>
        public KnightsTour.EventType InsertEventType(KnightsTour.EventType eventType)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.EventTypeLogic(UserName).Insert(eventType);
            return eventType;
        }

        /// <summary>
        /// Updates the EventType entity.
        /// </summary>
        /// <param name="eventType">The event type to update.</param>
        /// <returns>The updated EventType.</returns>
        public KnightsTour.EventType UpdateEventType(KnightsTour.EventType eventType)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.EventTypeLogic(UserName).Update(eventType);
            return eventType;
        }

        /// <summary>
        /// Deletes the EventType entity by it's primary key.
        /// </summary>
        /// <param name="id">The id of the event type to delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteEventType(int? id)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.EventTypeLogic(UserName).Delete(id);
            return response.Messages[0].Content;
        }

        /// <summary>
        /// Deletes the EventType entity and all related dependencies by it's primary key.
        /// </summary>
        /// <param name="id">The id of the event type to cascade delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteEventTypeCascade(int id)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.EventTypeLogic(UserName).DeleteCascade(id);
            return response.Messages[0].Content;
        }

        /// <summary>
        /// Deletes a possible collection of EventType entities by a passed foreign key.
        /// </summary>
        /// <param name="foreignKeyName">The foreign key column name of the event type to delete.</param>
        /// <param name="fkId">The id of the event type foreign key column to delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteEventTypeByFK(string foreignKeyName, int fkId)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.EventTypeLogic(UserName).DeleteByFK(foreignKeyName, fkId);
            return response.Messages[0].Content;
        }
        #endregion Event type [EventType] related Methods

        #region Member [Member] related Methods

        /// <summary>
        /// Returns the Member by it's primary key.
        /// </summary>
        /// <param name="id">The primary key of the member to retrieve.</param>
        /// <returns>The Member.</returns>
        public Task<KnightsTour.Member> GetMemberByIdAsync(int? id)
        {
            if (id.HasValue)
            {
                return System.Threading.Tasks.Task.FromResult(new KnightsTour.MemberLogic(UserName).GetById(id.Value));
            }
            return null;
        }

        /// <summary>
        /// Returns a collection of Members.
        /// </summary>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="orderBy">A valid SQL order by clause.</param>
        /// <param name="take">The maximum number of records to return.</param>
        /// <param name="skip">The number of records to skip (for pagination).</param>
        /// <param name="tableJoins">The optional tables to join this query on.</param>
        /// <returns>The Members.</returns>
        public Task<IEnumerable<KnightsTour.Member>> GetMembers(string where = null, string orderBy = null, int? take = null, int? skip = null, List<TableJoin> tableJoins = null)
        {
            RetrievalCondition condition = new RetrievalCondition()
            {
                SQLWhere = where,
                SQLOrderBy = orderBy,
                Take = take,
                Skip = skip,
                TableJoins = tableJoins
            };
            return System.Threading.Tasks.Task.FromResult(new KnightsTour.MemberLogic(UserName).GetAll(condition));
        }

        /// <summary>
        /// Returns a collection of Members.
        /// </summary>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="tableJoins">The optional tables to join this query on.</param>
        /// <returns>The Members.</returns>
        public Task<int> GetMemberCount(string where = null, List<TableJoin> tableJoins = null)
        {
            RetrievalCondition condition = new RetrievalCondition()
            {
                SQLWhere = where,
                TableJoins = tableJoins
            };
            return System.Threading.Tasks.Task.FromResult(new KnightsTour.MemberLogic(UserName).GetAll(condition).Count());
        }

        /// <summary>
        /// Returns a collection of distinct column data from the Members.
        /// </summary>
        /// <param name="keyName">A vaid column name that exists on the Member table.</param>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="tableJoins">A collection of table join definitions.</param>
        /// <param name="fkTable">The name of the foreign key table (optional).</param>
        /// <param name="fkColumn">The name of the foreign key column to join on (optional).</param>
        /// <param name="fkProperty1Name">The name of the primary foreign key column (optional).</param>
        /// <param name="fkProperty2Name">The name of the secondary foreign key column (optional).</param>
        /// <returns>Distinct Member column data.</returns>
        public Task<List<GroupDetail>> GetMemberDistinctValues(string keyName, string where = null, List<TableJoin> tableJoins = null, string fkTable = null, string fkColumn = null, string fkProperty1Name = null, string fkProperty2Name = null)
        {
            return GetDistinctValues("Member", keyName, where, tableJoins, fkTable, fkColumn, fkProperty1Name, fkProperty2Name);
        }

        /// <summary>
        /// Inserts the Member entity.
        /// </summary>
        /// <param name="member">The member to insert.</param>
        /// <returns>The inserted Member.</returns>
        public KnightsTour.Member InsertMember(KnightsTour.Member member)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.MemberLogic(UserName).Insert(member);
            return member;
        }

        /// <summary>
        /// Updates the Member entity.
        /// </summary>
        /// <param name="member">The member to update.</param>
        /// <returns>The updated Member.</returns>
        public KnightsTour.Member UpdateMember(KnightsTour.Member member)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.MemberLogic(UserName).Update(member);
            return member;
        }

        /// <summary>
        /// Deletes the Member entity by it's primary key.
        /// </summary>
        /// <param name="id">The id of the member to delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteMember(int? id)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.MemberLogic(UserName).Delete(id);
            return response.Messages[0].Content;
        }

        /// <summary>
        /// Deletes the Member entity and all related dependencies by it's primary key.
        /// </summary>
        /// <param name="id">The id of the member to cascade delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteMemberCascade(int id)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.MemberLogic(UserName).DeleteCascade(id);
            return response.Messages[0].Content;
        }

        /// <summary>
        /// Deletes a possible collection of Member entities by a passed foreign key.
        /// </summary>
        /// <param name="foreignKeyName">The foreign key column name of the member to delete.</param>
        /// <param name="fkId">The id of the member foreign key column to delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteMemberByFK(string foreignKeyName, int fkId)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.MemberLogic(UserName).DeleteByFK(foreignKeyName, fkId);
            return response.Messages[0].Content;
        }
        #endregion Member [Member] related Methods

        #region Puzzle [Puzzle] related Methods

        /// <summary>
        /// Returns the Puzzle by it's primary key.
        /// </summary>
        /// <param name="id">The primary key of the puzzle to retrieve.</param>
        /// <returns>The Puzzle.</returns>
        public Task<KnightsTour.Puzzle> GetPuzzleByIdAsync(int? id)
        {
            if (id.HasValue)
            {
                return System.Threading.Tasks.Task.FromResult(new KnightsTour.PuzzleLogic(UserName).GetById(id.Value));
            }
            return null;
        }

        /// <summary>
        /// Returns a collection of Puzzles.
        /// </summary>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="orderBy">A valid SQL order by clause.</param>
        /// <param name="take">The maximum number of records to return.</param>
        /// <param name="skip">The number of records to skip (for pagination).</param>
        /// <param name="tableJoins">The optional tables to join this query on.</param>
        /// <returns>The Puzzles.</returns>
        public Task<IEnumerable<KnightsTour.Puzzle>> GetPuzzles(string where = null, string orderBy = null, int? take = null, int? skip = null, List<TableJoin> tableJoins = null)
        {
            RetrievalCondition condition = new RetrievalCondition()
            {
                SQLWhere = where,
                SQLOrderBy = orderBy,
                Take = take,
                Skip = skip,
                TableJoins = tableJoins
            };
            return System.Threading.Tasks.Task.FromResult(new KnightsTour.PuzzleLogic(UserName).GetAll(condition));
        }

        /// <summary>
        /// Returns a collection of Puzzles.
        /// </summary>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="tableJoins">The optional tables to join this query on.</param>
        /// <returns>The Puzzles.</returns>
        public Task<int> GetPuzzleCount(string where = null, List<TableJoin> tableJoins = null)
        {
            RetrievalCondition condition = new RetrievalCondition()
            {
                SQLWhere = where,
                TableJoins = tableJoins
            };
            return System.Threading.Tasks.Task.FromResult(new KnightsTour.PuzzleLogic(UserName).GetAll(condition).Count());
        }

        /// <summary>
        /// Returns a collection of distinct column data from the Puzzles.
        /// </summary>
        /// <param name="keyName">A vaid column name that exists on the Puzzle table.</param>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="tableJoins">A collection of table join definitions.</param>
        /// <param name="fkTable">The name of the foreign key table (optional).</param>
        /// <param name="fkColumn">The name of the foreign key column to join on (optional).</param>
        /// <param name="fkProperty1Name">The name of the primary foreign key column (optional).</param>
        /// <param name="fkProperty2Name">The name of the secondary foreign key column (optional).</param>
        /// <returns>Distinct Puzzle column data.</returns>
        public Task<List<GroupDetail>> GetPuzzleDistinctValues(string keyName, string where = null, List<TableJoin> tableJoins = null, string fkTable = null, string fkColumn = null, string fkProperty1Name = null, string fkProperty2Name = null)
        {
            return GetDistinctValues("Puzzle", keyName, where, tableJoins, fkTable, fkColumn, fkProperty1Name, fkProperty2Name);
        }

        /// <summary>
        /// Inserts the Puzzle entity.
        /// </summary>
        /// <param name="puzzle">The puzzle to insert.</param>
        /// <returns>The inserted Puzzle.</returns>
        public KnightsTour.Puzzle InsertPuzzle(KnightsTour.Puzzle puzzle)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.PuzzleLogic(UserName).Insert(puzzle);
            return puzzle;
        }

        /// <summary>
        /// Updates the Puzzle entity.
        /// </summary>
        /// <param name="puzzle">The puzzle to update.</param>
        /// <returns>The updated Puzzle.</returns>
        public KnightsTour.Puzzle UpdatePuzzle(KnightsTour.Puzzle puzzle)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.PuzzleLogic(UserName).Update(puzzle);
            return puzzle;
        }

        /// <summary>
        /// Deletes the Puzzle entity by it's primary key.
        /// </summary>
        /// <param name="id">The id of the puzzle to delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeletePuzzle(int? id)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.PuzzleLogic(UserName).Delete(id);
            return response.Messages[0].Content;
        }

        /// <summary>
        /// Deletes the Puzzle entity and all related dependencies by it's primary key.
        /// </summary>
        /// <param name="id">The id of the puzzle to cascade delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeletePuzzleCascade(int id)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.PuzzleLogic(UserName).DeleteCascade(id);
            return response.Messages[0].Content;
        }

        /// <summary>
        /// Deletes a possible collection of Puzzle entities by a passed foreign key.
        /// </summary>
        /// <param name="foreignKeyName">The foreign key column name of the puzzle to delete.</param>
        /// <param name="fkId">The id of the puzzle foreign key column to delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeletePuzzleByFK(string foreignKeyName, int fkId)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.PuzzleLogic(UserName).DeleteByFK(foreignKeyName, fkId);
            return response.Messages[0].Content;
        }
        #endregion Puzzle [Puzzle] related Methods

        #region Solution [Solution] related Methods

        /// <summary>
        /// Returns the Solution by it's primary key.
        /// </summary>
        /// <param name="id">The primary key of the solution to retrieve.</param>
        /// <returns>The Solution.</returns>
        public Task<KnightsTour.Solution> GetSolutionByIdAsync(int? id)
        {
            if (id.HasValue)
            {
                return System.Threading.Tasks.Task.FromResult(new KnightsTour.SolutionLogic(UserName).GetById(id.Value));
            }
            return null;
        }

        /// <summary>
        /// Returns a collection of Solutions.
        /// </summary>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="orderBy">A valid SQL order by clause.</param>
        /// <param name="take">The maximum number of records to return.</param>
        /// <param name="skip">The number of records to skip (for pagination).</param>
        /// <param name="tableJoins">The optional tables to join this query on.</param>
        /// <returns>The Solutions.</returns>
        public Task<IEnumerable<KnightsTour.Solution>> GetSolutions(string where = null, string orderBy = null, int? take = null, int? skip = null, List<TableJoin> tableJoins = null)
        {
            RetrievalCondition condition = new RetrievalCondition()
            {
                SQLWhere = where,
                SQLOrderBy = orderBy,
                Take = take,
                Skip = skip,
                TableJoins = tableJoins
            };
            return System.Threading.Tasks.Task.FromResult(new KnightsTour.SolutionLogic(UserName).GetAll(condition));
        }

        /// <summary>
        /// Returns a collection of Solutions.
        /// </summary>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="tableJoins">The optional tables to join this query on.</param>
        /// <returns>The Solutions.</returns>
        public Task<int> GetSolutionCount(string where = null, List<TableJoin> tableJoins = null)
        {
            RetrievalCondition condition = new RetrievalCondition()
            {
                SQLWhere = where,
                TableJoins = tableJoins
            };
            return System.Threading.Tasks.Task.FromResult(new KnightsTour.SolutionLogic(UserName).GetAll(condition).Count());
        }

        /// <summary>
        /// Returns a collection of distinct column data from the Solutions.
        /// </summary>
        /// <param name="keyName">A vaid column name that exists on the Solution table.</param>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="tableJoins">A collection of table join definitions.</param>
        /// <param name="fkTable">The name of the foreign key table (optional).</param>
        /// <param name="fkColumn">The name of the foreign key column to join on (optional).</param>
        /// <param name="fkProperty1Name">The name of the primary foreign key column (optional).</param>
        /// <param name="fkProperty2Name">The name of the secondary foreign key column (optional).</param>
        /// <returns>Distinct Solution column data.</returns>
        public Task<List<GroupDetail>> GetSolutionDistinctValues(string keyName, string where = null, List<TableJoin> tableJoins = null, string fkTable = null, string fkColumn = null, string fkProperty1Name = null, string fkProperty2Name = null)
        {
            return GetDistinctValues("Solution", keyName, where, tableJoins, fkTable, fkColumn, fkProperty1Name, fkProperty2Name);
        }

        /// <summary>
        /// Inserts the Solution entity.
        /// </summary>
        /// <param name="solution">The solution to insert.</param>
        /// <returns>The inserted Solution.</returns>
        public KnightsTour.Solution InsertSolution(KnightsTour.Solution solution)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.SolutionLogic(UserName).Insert(solution);
            return solution;
        }

        /// <summary>
        /// Updates the Solution entity.
        /// </summary>
        /// <param name="solution">The solution to update.</param>
        /// <returns>The updated Solution.</returns>
        public KnightsTour.Solution UpdateSolution(KnightsTour.Solution solution)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.SolutionLogic(UserName).Update(solution);
            return solution;
        }

        /// <summary>
        /// Deletes the Solution entity by it's primary key.
        /// </summary>
        /// <param name="id">The id of the solution to delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteSolution(int? id)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.SolutionLogic(UserName).Delete(id);
            return response.Messages[0].Content;
        }

        /// <summary>
        /// Deletes the Solution entity and all related dependencies by it's primary key.
        /// </summary>
        /// <param name="id">The id of the solution to cascade delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteSolutionCascade(int id)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.SolutionLogic(UserName).DeleteCascade(id);
            return response.Messages[0].Content;
        }

        /// <summary>
        /// Deletes a possible collection of Solution entities by a passed foreign key.
        /// </summary>
        /// <param name="foreignKeyName">The foreign key column name of the solution to delete.</param>
        /// <param name="fkId">The id of the solution foreign key column to delete.</param>
        /// <returns>The delete response message.</returns>
        public string DeleteSolutionByFK(string foreignKeyName, int fkId)
        {
            KnightsTour.CoreLibrary.IActionResponse response = new KnightsTour.SolutionLogic(UserName).DeleteByFK(foreignKeyName, fkId);
            return response.Messages[0].Content;
        }
        #endregion Solution [Solution] related Methods

        #region Private cosmic support methods Methods

        /// <summary>
        /// Returns a collection of distinct column data from and generic table.
        /// </summary>
        /// <param name="pkTable">The primary table to operate against.</param>
        /// <param name="keyName">A vaid column name that exists on the 'pkTable' table.</param>
        /// <param name="where">A valid SQL where clause.</param>
        /// <param name="tableJoins">A collection of table join definitions.</param>
        /// <param name="fkTable">The name of the foreign key table (optional).</param>
        /// <param name="fkColumn">The name of the foreign key column to join on (optional).</param>
        /// <param name="fkProperty1Name">The name of the primary foreign key column (optional).</param>
        /// <param name="fkProperty2Name">The name of the secondary foreign key column (optional).</param>
        /// <returns>Distinct 'keyName' column data from the passed 'pkTable'.</returns>
        private Task<List<GroupDetail>> GetDistinctValues(string pkTable, string keyName, string where = null, List<TableJoin> tableJoins = null, string fkTable = null, string fkColumn = null, string fkProperty1Name = null, string fkProperty2Name = null)
        {
            #region Build the SQL statement given the parameters passed
            // The PK and FK Tables require aliases to avoid any possible collision with a defined table join.
            string fkTableName = "FkTableAlias";
            string fkTableAlias = string.Empty;
            if (!string.IsNullOrEmpty(fkTable))
            {
                fkTableAlias = $"{StorageProvider.GetTableSQL(fkTable)} AS {StorageProvider.GetTableSQL(fkTableName)}";
            }

            string sql = $"SELECT DISTINCT {StorageProvider.GetTableSQL(pkTable)}.{StorageProvider.GetColumnSQL(keyName)} AS GroupProperty";
            if (!string.IsNullOrEmpty(fkProperty1Name))
            {
                sql += $", {StorageProvider.GetTableSQL(fkTableName)}.{StorageProvider.GetColumnSQL(fkProperty1Name)}";
            }
            else
            {
                sql += ",''";
            }

            sql += " AS FKProperty1";
            if (!string.IsNullOrEmpty(fkProperty2Name))
            {
                sql += $", {StorageProvider.GetTableSQL(fkTableName)}.{StorageProvider.GetColumnSQL(fkProperty2Name)}";
            }
            else
            {
                sql += ",''";
            }

            sql += " AS FKProperty2";
            sql += $" FROM {StorageProvider.GetTableSQL(pkTable)} ";

            if (tableJoins != null)
            {
                foreach (TableJoin join in tableJoins)
                {
                    sql += $" INNER JOIN {StorageProvider.GetTableSQL(join.JoinTable)} ON {StorageProvider.GetTableSQL(join.JoinTable)}.{StorageProvider.GetColumnSQL(join.JoinColumn)} = {StorageProvider.GetTableSQL(pkTable)}.{StorageProvider.GetColumnSQL(join.PrimaryColumn)}";
                }
            }

            if (!string.IsNullOrEmpty(fkTable))
            {
                sql += $" INNER JOIN {fkTableAlias} ON {StorageProvider.GetTableSQL(pkTable)}.{StorageProvider.GetColumnSQL(keyName)} = {StorageProvider.GetTableSQL(fkTableName)}.{StorageProvider.GetColumnSQL(fkColumn)}";
            }

            if (!string.IsNullOrEmpty(where))
            {
                sql += $" WHERE {where}";
            }

            if (!string.IsNullOrEmpty(fkProperty1Name))
            {
                sql += $" ORDER BY {StorageProvider.GetTableSQL(fkTableName)}.{StorageProvider.GetColumnSQL(fkProperty1Name)}";
            }
            else
            {
                sql += $" ORDER BY {StorageProvider.GetTableSQL(pkTable)}.{StorageProvider.GetColumnSQL(keyName)}";
            }
            #endregion

            #region Retrieve the data
            List<GroupDetail> results = new List<GroupDetail>();
            foreach (dynamic row in StorageProvider.GetHandler().GetRecords(new StorageStatement { Statement = sql }))
            {
                results.Add(new GroupDetail { GroupProperty = row["GroupProperty"].ToString(), FkProperty1 = row["FKProperty1"].ToString(), FkProperty2 = row["FKProperty2"].ToString() });
            }
            #endregion

            return System.Threading.Tasks.Task.FromResult(results);
        }
        #endregion Private cosmic support methods Methods

    } // Class
} // Namespace